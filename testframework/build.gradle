plugins {
    id 'java'
    id 'maven-publish'
    id 'com.diffplug.spotless'
    id 'net.neoforged.licenser'
    id 'neoforge.formatting-conventions'
}

java.withSourcesJar()

apply plugin : net.neoforged.minecraftdependencies.MinecraftDependenciesPlugin

dependencies {
    // TODO: is this leaking in the POM? (most likely yes)
    // TODO: does this need to be changed back to runtimeDependencies?
    // TODO: should use attributes to resolve the right variant instead of hardcoding
    compileOnly project(path: ':neoforge', configuration: 'apiElements')
    runtimeOnly project(path: ':neoforge', configuration: 'runtimeElements')

    compileOnly(platform("org.junit:junit-bom:${project.jupiter_api_version}"))
    compileOnly "org.junit.jupiter:junit-jupiter-params"

    compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
}

sourceSets {
    main {
        // TODO: cursed
        compileClasspath += project(':neoforge').sourceSets.main.compileClasspath
        runtimeClasspath += project(':neoforge').sourceSets.main.runtimeClasspath
    }
}

license {
    header = rootProject.file('codeformat/HEADER.txt')
    include '**/*.java'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

def version = project.version
tasks.withType(ProcessResources).configureEach {
    inputs.properties version: version

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand file: [
                jarVersion: version
        ]
    }
}

publishing {
    publications.create('TestFramework', MavenPublication) {
        groupId = project.group
        artifactId = project.name
        version = project.version

        from components.java
    }
    repositories {
        maven rootProject.gradleutils.getPublishingMaven()
    }
}
