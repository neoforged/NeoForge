--- a/net/minecraft/client/player/LocalPlayer.java
+++ b/net/minecraft/client/player/LocalPlayer.java
@@ -158,6 +_,7 @@
 
    @Override
    public boolean hurt(DamageSource p_108662_, float p_108663_) {
+      net.neoforged.neoforge.common.CommonHooks.onPlayerAttack(this, p_108662_, p_108663_);
       return false;
    }
 
@@ -294,6 +_,7 @@
       ServerboundPlayerActionPacket.Action serverboundplayeractionpacket$action = p_108701_
          ? ServerboundPlayerActionPacket.Action.DROP_ALL_ITEMS
          : ServerboundPlayerActionPacket.Action.DROP_ITEM;
+      if (isUsingItem() && getUsedItemHand() == InteractionHand.MAIN_HAND && (p_108701_ || getUseItem().getCount() == 1)) stopUsingItem(); // Forge: fix MC-231097 on the clientside
       ItemStack itemstack = this.getInventory().removeFromSelected(p_108701_);
       this.connection.send(new ServerboundPlayerActionPacket(serverboundplayeractionpacket$action, BlockPos.ZERO, Direction.DOWN));
       return !itemstack.isEmpty();
@@ -489,7 +_,14 @@
 
    @Override
    public void playSound(SoundEvent p_108651_, float p_108652_, float p_108653_) {
-      this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), p_108651_, this.getSoundSource(), p_108652_, p_108653_, false);
+      net.minecraft.core.Holder<SoundEvent> holder = net.minecraft.core.registries.BuiltInRegistries.SOUND_EVENT.wrapAsHolder(p_108651_);
+      net.neoforged.neoforge.event.PlayLevelSoundEvent.AtEntity event = net.neoforged.neoforge.event.EventHooks.onPlaySoundAtEntity(this, holder, this.getSoundSource(), p_108652_, p_108653_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_108651_ = event.getSound().get();
+      SoundSource source = event.getSource();
+      p_108652_ = event.getNewVolume();
+      p_108653_ = event.getNewPitch();
+      this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), p_108651_, source, p_108652_, p_108653_, false);
    }
 
    @Override
@@ -681,6 +_,7 @@
          && (this.isShiftKeyDown() || !this.isSleeping() && !this.canPlayerFitWithinBlocksAndEntitiesWhen(Pose.STANDING));
       float f = Mth.clamp(0.3F + EnchantmentHelper.getSneakingSpeedBonus(this), 0.0F, 1.0F);
       this.input.tick(this.isMovingSlowly(), f);
+      net.neoforged.neoforge.client.ClientHooks.onMovementInputUpdate(this, this.input);
       this.minecraft.getTutorial().onInput(this.input);
       if (this.isUsingItem() && !this.isPassenger()) {
          this.input.leftImpulse *= 0.2F;
@@ -709,7 +_,7 @@
       boolean flag4 = this.canStartSprinting();
       boolean flag5 = this.isPassenger() ? this.getVehicle().onGround() : this.onGround();
       boolean flag6 = !flag1 && !flag2;
-      if ((flag5 || this.isUnderWater()) && flag6 && flag4) {
+      if ((flag5 || this.isUnderWater() || this.canStartSwimming()) && flag6 && flag4) {
          if (this.sprintTriggerTime <= 0 && !this.minecraft.options.keySprint.isDown()) {
             this.sprintTriggerTime = 7;
          } else {
@@ -717,15 +_,15 @@
          }
       }
 
-      if ((!this.isInWater() || this.isUnderWater()) && flag4 && this.minecraft.options.keySprint.isDown()) {
+      if (!this.isSprinting() && (!(this.isInWater() || this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType))) || (this.isUnderWater() || this.canStartSwimming())) && this.hasEnoughImpulseToStartSprinting() && flag4 && !this.isUsingItem() && !this.hasEffect(MobEffects.BLINDNESS) && this.minecraft.options.keySprint.isDown()) {
          this.setSprinting(true);
       }
 
       if (this.isSprinting()) {
          boolean flag7 = !this.input.hasForwardImpulse() || !this.hasEnoughFoodToStartSprinting();
-         boolean flag8 = flag7 || this.horizontalCollision && !this.minorHorizontalCollision || this.isInWater() && !this.isUnderWater();
+         boolean flag8 = flag7 || this.horizontalCollision && !this.minorHorizontalCollision || this.isInWater() && !this.isUnderWater() || (this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType)) && !this.canStartSwimming());
          if (this.isSwimming()) {
-            if (!this.onGround() && !this.input.shiftKeyDown && flag7 || !this.isInWater()) {
+            if (!this.onGround() && !this.input.shiftKeyDown && flag7 || !(this.isInWater() || this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType)))) {
                this.setSprinting(false);
             }
          } else if (flag8) {
@@ -755,14 +_,15 @@
 
       if (this.input.jumping && !flag9 && !flag && !this.getAbilities().flying && !this.isPassenger() && !this.onClimbable()) {
          ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);
-         if (itemstack.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemstack) && this.tryToStartFallFlying()) {
+         if (itemstack.canElytraFly(this) && this.tryToStartFallFlying()) {
             this.connection.send(new ServerboundPlayerCommandPacket(this, ServerboundPlayerCommandPacket.Action.START_FALL_FLYING));
          }
       }
 
       this.wasFallFlying = this.isFallFlying();
-      if (this.isInWater() && this.input.shiftKeyDown && this.isAffectedByFluids()) {
-         this.goDownInWater();
+      net.neoforged.neoforge.fluids.FluidType fluidType = this.getMaxHeightFluidType();
+      if ((this.isInWater() || (!fluidType.isAir() && this.canSwimInFluidType(fluidType))) && this.input.shiftKeyDown && this.isAffectedByFluids()) {
+         this.sinkInFluid(this.isInWater() ? net.neoforged.neoforge.common.NeoForgeMod.WATER_TYPE.get() : fluidType);
       }
 
       if (this.isEyeInFluid(FluidTags.WATER)) {
@@ -864,6 +_,7 @@
    @Override
    public void rideTick() {
       super.rideTick();
+      if (this.wantsToStopRiding() && this.isPassenger()) this.input.shiftKeyDown = false;
       this.handsBusy = false;
       Entity entity = this.getControlledVehicle();
       if (entity instanceof Boat boat) {
@@ -1110,6 +_,18 @@
       } else {
          return super.getRopeHoldPosition(p_108758_);
       }
+   }
+
+   public void updateSyncFields(LocalPlayer old) {
+      this.xLast = old.xLast;
+      this.yLast1 = old.yLast1;
+      this.zLast = old.zLast;
+      this.yRotLast = old.yRotLast;
+      this.xRotLast = old.xRotLast;
+      this.lastOnGround = old.lastOnGround;
+      this.wasShiftKeyDown = old.wasShiftKeyDown;
+      this.wasSprinting = old.wasSprinting;
+      this.positionReminder = old.positionReminder;
    }
 
    @Override
