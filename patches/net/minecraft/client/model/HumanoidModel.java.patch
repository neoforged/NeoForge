--- a/net/minecraft/client/model/HumanoidModel.java
+++ b/net/minecraft/client/model/HumanoidModel.java
@@ -257,6 +_,8 @@
             case BRUSH:
                 this.rightArm.xRot = this.rightArm.xRot * 0.5F - (float) (Math.PI / 5);
                 this.rightArm.yRot = 0.0F;
+            default:
+                p_362238_.applyTransform(this, p_364666_, net.minecraft.world.entity.HumanoidArm.RIGHT);
         }
     }
 
@@ -299,6 +_,8 @@
             case BRUSH:
                 this.leftArm.xRot = this.leftArm.xRot * 0.5F - (float) (Math.PI / 5);
                 this.leftArm.yRot = 0.0F;
+            default:
+                p_361463_.applyTransform(this, p_361741_, net.minecraft.world.entity.HumanoidArm.LEFT);
         }
     }
 
@@ -376,7 +_,7 @@
     }
 
     @OnlyIn(Dist.CLIENT)
-    public static enum ArmPose {
+    public static enum ArmPose implements net.neoforged.fml.common.asm.enumextension.IExtensibleEnum {
         EMPTY(false),
         ITEM(false),
         BLOCK(false),
@@ -389,13 +_,31 @@
         BRUSH(false);
 
         private final boolean twoHanded;
+        @org.jetbrains.annotations.Nullable
+        private final net.neoforged.neoforge.client.IArmPoseTransformer forgeArmPose;
 
+        @net.neoforged.fml.common.asm.enumextension.ReservedConstructor
         private ArmPose(boolean p_102896_) {
             this.twoHanded = p_102896_;
+            this.forgeArmPose = null;
+        }
+
+        private ArmPose(boolean twoHanded, net.neoforged.neoforge.client.IArmPoseTransformer forgeArmPose) {
+            this.twoHanded = twoHanded;
+            com.google.common.base.Preconditions.checkNotNull(forgeArmPose, "Cannot create new ArmPose with null transformer!");
+            this.forgeArmPose = forgeArmPose;
         }
 
         public boolean isTwoHanded() {
             return this.twoHanded;
+        }
+
+        public <T extends HumanoidRenderState> void applyTransform(HumanoidModel<T> model, T entity, net.minecraft.world.entity.HumanoidArm arm) {
+            if (this.forgeArmPose != null) this.forgeArmPose.applyTransform(model, entity, arm);
+        }
+
+        public static net.neoforged.fml.common.asm.enumextension.ExtensionInfo getExtensionInfo() {
+            return net.neoforged.fml.common.asm.enumextension.ExtensionInfo.nonExtended(HumanoidModel.ArmPose.class);
         }
     }
 }
