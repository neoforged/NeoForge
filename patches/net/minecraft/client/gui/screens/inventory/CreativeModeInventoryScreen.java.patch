--- a/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
+++ b/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
@@ -112,6 +_,8 @@
     private boolean hasClickedOutside;
     private final Set<TagKey<Item>> visibleTags = new HashSet<>();
     private final boolean displayOperatorCreativeTab;
+    private final List<net.neoforged.neoforge.client.gui.CreativeTabsScreenPage> pages = new java.util.ArrayList<>();
+    private net.neoforged.neoforge.client.gui.CreativeTabsScreenPage currentPage = new net.neoforged.neoforge.client.gui.CreativeTabsScreenPage(new java.util.ArrayList<>());
 
     public CreativeModeInventoryScreen(LocalPlayer player, FeatureFlagSet enabledFeatures, boolean displayOperatorCreativeTab) {
         super(new CreativeModeInventoryScreen.ItemPickerMenu(player), player.getInventory(), CommonComponents.EMPTY);
@@ -147,9 +_,11 @@
             return false;
         } else {
             if (searchTrees != null) {
-                List<ItemStack> list = List.copyOf(CreativeModeTabs.searchTab().getDisplayItems());
-                searchTrees.updateCreativeTooltips(registries, list);
-                searchTrees.updateCreativeTags(list);
+                CreativeModeTabs.allTabs().stream().filter(net.minecraft.world.item.CreativeModeTab::hasSearchBar).forEach(tab -> {
+                    List<ItemStack> list = List.copyOf(tab.getDisplayItems());
+                    searchTrees.updateCreativeTooltips(registries, list, net.neoforged.neoforge.client.CreativeModeTabSearchRegistry.getNameSearchKey(tab));
+                    searchTrees.updateCreativeTags(list, net.neoforged.neoforge.client.CreativeModeTabSearchRegistry.getTagSearchKey(tab));
+                });
             }
 
             return true;
@@ -159,7 +_,7 @@
     private void refreshCurrentTabContents(Collection<ItemStack> items) {
         int i = this.menu.getRowIndexForScroll(this.scrollOffs);
         this.menu.items.clear();
-        if (selectedTab.getType() == CreativeModeTab.Type.SEARCH) {
+        if (selectedTab.hasSearchBar()) {
             this.refreshSearchResults();
         } else {
             this.menu.items.addAll(items);
@@ -326,6 +_,34 @@
     protected void init() {
         if (this.minecraft.gameMode.hasInfiniteItems()) {
             super.init();
+            this.pages.clear();
+            int tabIndex = 0;
+            List<CreativeModeTab> currentPage = new java.util.ArrayList<>();
+            for (CreativeModeTab sortedCreativeModeTab : net.neoforged.neoforge.common.CreativeModeTabRegistry.getSortedCreativeModeTabs()) {
+                currentPage.add(sortedCreativeModeTab);
+                tabIndex++;
+                if (tabIndex == 10) {
+                    this.pages.add(new net.neoforged.neoforge.client.gui.CreativeTabsScreenPage(currentPage));
+                    currentPage = new java.util.ArrayList<>();
+                    tabIndex = 0;
+                }
+            }
+            if (tabIndex != 0) {
+                this.pages.add(new net.neoforged.neoforge.client.gui.CreativeTabsScreenPage(currentPage));
+            }
+            if (this.pages.isEmpty()) {
+                this.currentPage = new net.neoforged.neoforge.client.gui.CreativeTabsScreenPage(new java.util.ArrayList<>());
+            } else {
+                this.currentPage = this.pages.get(0);
+            }
+            if (this.pages.size() > 1) {
+                addRenderableWidget(net.minecraft.client.gui.components.Button.builder(Component.literal("<"), b -> setCurrentPage(this.pages.get(Math.max(this.pages.indexOf(this.currentPage) - 1, 0)))).pos(leftPos,  topPos - 50).size(20, 20).build());
+                addRenderableWidget(net.minecraft.client.gui.components.Button.builder(Component.literal(">"), b -> setCurrentPage(this.pages.get(Math.min(this.pages.indexOf(this.currentPage) + 1, this.pages.size() - 1)))).pos(leftPos + imageWidth - 20, topPos - 50).size(20, 20).build());
+            }
+            this.currentPage = this.pages.stream().filter(page -> page.getVisibleTabs().contains(selectedTab)).findFirst().orElse(this.currentPage);
+            if (!this.currentPage.getVisibleTabs().contains(selectedTab)) {
+                selectedTab = this.currentPage.getVisibleTabs().get(0);
+            }
             this.searchBox = new EditBox(this.font, this.leftPos + 82, this.topPos + 6, 80, 9, Component.translatable("itemGroup.search"));
             this.searchBox.setMaxLength(50);
             this.searchBox.setBordered(false);
@@ -372,7 +_,7 @@
     public boolean charTyped(char codePoint, int modifiers) {
         if (this.ignoreTextInput) {
             return false;
-        } else if (selectedTab.getType() != CreativeModeTab.Type.SEARCH) {
+        } else if (!selectedTab.hasSearchBar()) {
             return false;
         } else {
             String s = this.searchBox.getValue();
@@ -391,7 +_,7 @@
     @Override
     public boolean keyPressed(int keyCode, int scanCode, int modifiers) {
         this.ignoreTextInput = false;
-        if (selectedTab.getType() != CreativeModeTab.Type.SEARCH) {
+        if (!selectedTab.hasSearchBar()) {
             if (this.minecraft.options.keyChat.matches(keyCode, scanCode)) {
                 this.ignoreTextInput = true;
                 this.selectTab(CreativeModeTabs.searchTab());
@@ -427,6 +_,7 @@
     }
 
     private void refreshSearchResults() {
+        if (!selectedTab.hasSearchBar()) return;
         this.menu.items.clear();
         this.visibleTags.clear();
         String s = this.searchBox.getValue();
@@ -439,10 +_,10 @@
                 SearchTree<ItemStack> searchtree;
                 if (s.startsWith("#")) {
                     s = s.substring(1);
-                    searchtree = sessionsearchtrees.creativeTagSearch();
+                    searchtree = sessionsearchtrees.creativeTagSearch(net.neoforged.neoforge.client.CreativeModeTabSearchRegistry.getTagSearchKey(selectedTab));
                     this.updateVisibleTags(s);
                 } else {
-                    searchtree = sessionsearchtrees.creativeNameSearch();
+                    searchtree = sessionsearchtrees.creativeNameSearch(net.neoforged.neoforge.client.CreativeModeTabSearchRegistry.getNameSearchKey(selectedTab));
                 }
 
                 this.menu.items.addAll(searchtree.search(s.toLowerCase(Locale.ROOT)));
@@ -470,7 +_,8 @@
     @Override
     protected void renderLabels(GuiGraphics guiGraphics, int mouseX, int mouseY) {
         if (selectedTab.showTitle()) {
-            guiGraphics.drawString(this.font, selectedTab.getDisplayName(), 8, 6, 4210752, false);
+            com.mojang.blaze3d.systems.RenderSystem.disableBlend();
+            guiGraphics.drawString(this.font, selectedTab.getDisplayName(), 8, 6, selectedTab.getLabelColor(), false);
         }
     }
 
@@ -480,7 +_,7 @@
             double d0 = mouseX - (double)this.leftPos;
             double d1 = mouseY - (double)this.topPos;
 
-            for (CreativeModeTab creativemodetab : CreativeModeTabs.tabs()) {
+            for(CreativeModeTab creativemodetab : currentPage.getVisibleTabs()) {
                 if (this.checkTabClicked(creativemodetab, d0, d1)) {
                     return true;
                 }
@@ -502,7 +_,7 @@
             double d1 = mouseY - (double)this.topPos;
             this.scrolling = false;
 
-            for (CreativeModeTab creativemodetab : CreativeModeTabs.tabs()) {
+            for(CreativeModeTab creativemodetab : currentPage.getVisibleTabs()) {
                 if (this.checkTabClicked(creativemodetab, d0, d1)) {
                     this.selectTab(creativemodetab);
                     return true;
@@ -520,6 +_,7 @@
     private void selectTab(CreativeModeTab tab) {
         CreativeModeTab creativemodetab = selectedTab;
         selectedTab = tab;
+        slotColor = tab.getSlotColor();
         this.quickCraftSlots.clear();
         this.menu.items.clear();
         this.clearDraggingState();
@@ -596,13 +_,15 @@
             this.originalSlots = null;
         }
 
-        if (selectedTab.getType() == CreativeModeTab.Type.SEARCH) {
+        if (selectedTab.hasSearchBar()) {
             this.searchBox.setVisible(true);
             this.searchBox.setCanLoseFocus(false);
             this.searchBox.setFocused(true);
             if (creativemodetab != tab) {
                 this.searchBox.setValue("");
             }
+            this.searchBox.setWidth(selectedTab.getSearchBarWidth());
+            this.searchBox.setX(this.leftPos + (82 /*default left*/ + 89 /*default width*/) - this.searchBox.getWidth());
 
             this.refreshSearchResults();
         } else {
@@ -665,7 +_,7 @@
     public void render(GuiGraphics guiGraphics, int mouseX, int mouseY, float partialTick) {
         super.render(guiGraphics, mouseX, mouseY, partialTick);
 
-        for (CreativeModeTab creativemodetab : CreativeModeTabs.tabs()) {
+        for(CreativeModeTab creativemodetab : currentPage.getVisibleTabs()) {
             if (this.checkTabHovering(guiGraphics, creativemodetab, mouseX, mouseY)) {
                 break;
             }
@@ -677,6 +_,15 @@
             guiGraphics.renderTooltip(this.font, TRASH_SLOT_TOOLTIP, mouseX, mouseY);
         }
 
+        if (this.pages.size() != 1) {
+            Component page = Component.literal(String.format("%d / %d", this.pages.indexOf(this.currentPage) + 1, this.pages.size()));
+            guiGraphics.pose().pushPose();
+            guiGraphics.pose().translate(0F, 0F, 300F);
+            guiGraphics.drawString(font, page.getVisualOrderText(), leftPos + (imageWidth / 2) - (font.width(page) / 2), topPos - 44, -1);
+            guiGraphics.pose().popPose();
+        }
+
+        com.mojang.blaze3d.systems.RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
         this.renderTooltip(guiGraphics, mouseX, mouseY);
     }
 
@@ -684,7 +_,7 @@
     public List<Component> getTooltipFromContainerItem(ItemStack stack) {
         boolean flag = this.hoveredSlot != null && this.hoveredSlot instanceof CreativeModeInventoryScreen.CustomCreativeSlot;
         boolean flag1 = selectedTab.getType() == CreativeModeTab.Type.CATEGORY;
-        boolean flag2 = selectedTab.getType() == CreativeModeTab.Type.SEARCH;
+        boolean flag2 = selectedTab.hasSearchBar();
         TooltipFlag.Default tooltipflag$default = this.minecraft.options.advancedItemTooltips ? TooltipFlag.Default.ADVANCED : TooltipFlag.Default.NORMAL;
         TooltipFlag tooltipflag = flag ? tooltipflag$default.asCreative() : tooltipflag$default;
         List<Component> list = stack.getTooltipLines(Item.TooltipContext.of(this.minecraft.level), this.minecraft.player, tooltipflag);
@@ -703,7 +_,7 @@
             int i = 1;
 
             for (CreativeModeTab creativemodetab : CreativeModeTabs.tabs()) {
-                if (creativemodetab.getType() != CreativeModeTab.Type.SEARCH && creativemodetab.contains(stack)) {
+                if (!creativemodetab.hasSearchBar() && creativemodetab.contains(stack)) {
                     list1.add(i++, creativemodetab.getDisplayName().copy().withStyle(ChatFormatting.BLUE));
                 }
             }
@@ -714,7 +_,7 @@
 
     @Override
     protected void renderBg(GuiGraphics guiGraphics, float partialTick, int mouseX, int mouseY) {
-        for (CreativeModeTab creativemodetab : CreativeModeTabs.tabs()) {
+        for (CreativeModeTab creativemodetab : currentPage.getVisibleTabs()) {
             if (creativemodetab != selectedTab) {
                 this.renderTabButton(guiGraphics, creativemodetab);
             }
@@ -726,10 +_,11 @@
         int k = this.topPos + 18;
         int i = k + 112;
         if (selectedTab.canScroll()) {
-            ResourceLocation resourcelocation = this.canScroll() ? SCROLLER_SPRITE : SCROLLER_DISABLED_SPRITE;
+            ResourceLocation resourcelocation = selectedTab.getScrollerSprite(); // this.canScroll() ? SCROLLER_SPRITE : SCROLLER_DISABLED_SPRITE;
             guiGraphics.blitSprite(resourcelocation, j, k + (int)((float)(i - k - 17) * this.scrollOffs), 12, 15);
         }
 
+        if (currentPage.getVisibleTabs().contains(selectedTab)) //Forge: only display tab selection when the selected tab is on the current page
         this.renderTabButton(guiGraphics, selectedTab);
         if (selectedTab.getType() == CreativeModeTab.Type.INVENTORY) {
             InventoryScreen.renderEntityInInventoryFollowsMouse(
@@ -748,7 +_,7 @@
     }
 
     private int getTabX(CreativeModeTab tab) {
-        int i = tab.column();
+        int i = currentPage.getColumn(tab);
         int j = 27;
         int k = 27 * i;
         if (tab.isAlignedRight()) {
@@ -760,7 +_,7 @@
 
     private int getTabY(CreativeModeTab tab) {
         int i = 0;
-        if (tab.row() == CreativeModeTab.Row.TOP) {
+        if (currentPage.isTop(tab)) {
             i -= 32;
         } else {
             i += this.imageHeight;
@@ -788,8 +_,8 @@
 
     protected void renderTabButton(GuiGraphics guiGraphics, CreativeModeTab creativeModeTab) {
         boolean flag = creativeModeTab == selectedTab;
-        boolean flag1 = creativeModeTab.row() == CreativeModeTab.Row.TOP;
-        int i = creativeModeTab.column();
+        boolean flag1 = currentPage.isTop(creativeModeTab);
+        int i = currentPage.getColumn(creativeModeTab);
         int j = this.leftPos + this.getTabX(creativeModeTab);
         int k = this.topPos - (flag1 ? 28 : -(this.imageHeight - 4));
         ResourceLocation[] aresourcelocation;
@@ -799,6 +_,7 @@
             aresourcelocation = flag ? SELECTED_BOTTOM_TABS : UNSELECTED_BOTTOM_TABS;
         }
 
+        //PATCH 1.20.2: Deal with custom tab backgrounds, and deal with transparency.
         guiGraphics.blitSprite(aresourcelocation[Mth.clamp(i, 0, aresourcelocation.length)], j, k, 26, 32);
         guiGraphics.pose().pushPose();
         guiGraphics.pose().translate(0.0F, 0.0F, 100.0F);
@@ -840,6 +_,14 @@
         }
     }
 
+    public net.neoforged.neoforge.client.gui.CreativeTabsScreenPage getCurrentPage() {
+        return currentPage;
+    }
+
+    public void setCurrentPage(net.neoforged.neoforge.client.gui.CreativeTabsScreenPage currentPage) {
+        this.currentPage = currentPage;
+    }
+
     @OnlyIn(Dist.CLIENT)
     static class CustomCreativeSlot extends Slot {
         public CustomCreativeSlot(Container container, int slot, int x, int y) {
@@ -1024,6 +_,22 @@
         @Override
         public boolean mayPickup(Player player) {
             return this.target.mayPickup(player);
+        }
+
+        @Override
+        public int getSlotIndex() {
+            return this.target.getSlotIndex();
+        }
+
+        @Override
+        public boolean isSameInventory(Slot other) {
+            return this.target.isSameInventory(other);
+        }
+
+        @Override
+        public Slot setBackground(ResourceLocation atlas, ResourceLocation sprite) {
+            this.target.setBackground(atlas, sprite);
+            return this;
         }
     }
 }
