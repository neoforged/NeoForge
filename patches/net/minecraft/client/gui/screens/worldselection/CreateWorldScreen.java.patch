--- a/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
+++ b/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
@@ -122,6 +_,7 @@
     public static void openFresh(Minecraft p_232897_, @Nullable Screen p_232898_) {
         queueLoadScreen(p_232897_, PREPARING_WORLD_DATA);
         PackRepository packrepository = new PackRepository(new ServerPacksSource(p_232897_.directoryValidator()));
+        net.neoforged.neoforge.resource.ResourcePackLoader.populatePackRepository(packrepository, net.minecraft.server.packs.PackType.SERVER_DATA);
         WorldLoader.InitConfig worldloader$initconfig = createDefaultLoadConfig(packrepository, WorldDataConfiguration.DEFAULT);
         CompletableFuture<WorldCreationContext> completablefuture = WorldLoader.load(
             worldloader$initconfig,
@@ -248,6 +_,10 @@
             WorldCreationContext worldcreationcontext = this.uiState.getSettings();
             LevelSettings levelsettings = this.createLevelSettings(flag);
             WorldData worlddata = new PrimaryLevelData(levelsettings, worldcreationcontext.options(), p_250577_, p_249994_);
+            if(worlddata.worldGenSettingsLifecycle() != Lifecycle.stable()) {
+                // Neo: set experimental settings confirmation flag so user is not shown warning on next open
+                ((PrimaryLevelData)worlddata).withConfirmedWarning(true);
+            }
             this.minecraft
                 .createWorldOpenFlows()
                 .createLevelFromExistingSettings(optional.get(), worldcreationcontext.dataPackResources(), p_249152_, worlddata);
@@ -427,7 +_,7 @@
                                         if (p_269627_) {
                                             p_270552_.accept(this.uiState.getSettings().dataConfiguration());
                                         } else {
-                                            p_270552_.accept(WorldDataConfiguration.DEFAULT);
+                                            p_270552_.accept(new WorldDataConfiguration(new DataPackConfig(ImmutableList.of("vanilla"), ImmutableList.of()), FeatureFlags.VANILLA_SET)); // FORGE: Revert to *actual* vanilla data
                                         }
                                     },
                                     Component.translatable("dataPack.validation.failed"),
@@ -545,6 +_,7 @@
         if (path != null) {
             if (this.tempDataPackRepository == null) {
                 this.tempDataPackRepository = ServerPacksSource.createPackRepository(path, this.packValidator);
+                net.neoforged.neoforge.resource.ResourcePackLoader.populatePackRepository(this.tempDataPackRepository, net.minecraft.server.packs.PackType.SERVER_DATA);
                 this.tempDataPackRepository.reload();
             }
 
