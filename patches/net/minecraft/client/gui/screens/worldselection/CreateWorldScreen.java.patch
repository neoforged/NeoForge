--- a/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
+++ b/net/minecraft/client/gui/screens/worldselection/CreateWorldScreen.java
@@ -169,6 +_,7 @@
     ) {
         queueLoadScreen(p_372818_, PREPARING_WORLD_DATA);
         PackRepository packrepository = new PackRepository(new ServerPacksSource(p_372818_.directoryValidator()));
+        net.neoforged.neoforge.resource.ResourcePackLoader.populatePackRepository(packrepository, net.minecraft.server.packs.PackType.SERVER_DATA, false);
         WorldLoader.InitConfig worldloader$initconfig = createDefaultLoadConfig(packrepository, WorldDataConfiguration.DEFAULT);
         CompletableFuture<WorldCreationContext> completablefuture = WorldLoader.load(
             worldloader$initconfig,
@@ -307,6 +_,10 @@
             SystemToast.onPackCopyFailure(this.minecraft, s);
             return false;
         } else {
+            if (p_374211_.worldGenSettingsLifecycle() != Lifecycle.stable()) {
+                // Neo: set experimental settings confirmation flag so user is not shown warning on next open
+                ((PrimaryLevelData)p_374211_).withConfirmedWarning(true);
+            }
             this.minecraft
                 .createWorldOpenFlows()
                 .createLevelFromExistingSettings(optional.get(), worldcreationcontext.dataPackResources(), p_249152_, p_374211_);
@@ -491,7 +_,7 @@
                                         if (p_269627_) {
                                             p_270552_.accept(this.uiState.getSettings().dataConfiguration());
                                         } else {
-                                            p_270552_.accept(WorldDataConfiguration.DEFAULT);
+                                            p_270552_.accept(new WorldDataConfiguration(new DataPackConfig(ImmutableList.of("vanilla"), ImmutableList.of()), FeatureFlags.VANILLA_SET)); // FORGE: Revert to *actual* vanilla data
                                         }
                                     },
                                     Component.translatable("dataPack.validation.failed"),
@@ -605,6 +_,7 @@
         if (path != null) {
             if (this.tempDataPackRepository == null) {
                 this.tempDataPackRepository = ServerPacksSource.createPackRepository(path, this.packValidator);
+                net.neoforged.neoforge.resource.ResourcePackLoader.populatePackRepository(this.tempDataPackRepository, net.minecraft.server.packs.PackType.SERVER_DATA, false);
                 this.tempDataPackRepository.reload();
             }
 
