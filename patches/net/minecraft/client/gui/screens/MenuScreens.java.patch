--- a/net/minecraft/client/gui/screens/MenuScreens.java
+++ b/net/minecraft/client/gui/screens/MenuScreens.java
@@ -41,12 +_,17 @@
     private static final Map<MenuType<?>, MenuScreens.ScreenConstructor<?, ?>> SCREENS = Maps.newHashMap();
 
     public static <T extends AbstractContainerMenu> void create(MenuType<T> type, Minecraft mc, int windowId, Component title) {
+        getScreenFactory(type).ifPresent(f -> f.fromPacket(title, type, mc, windowId));
+    }
+
+    public static <T extends AbstractContainerMenu> java.util.Optional<ScreenConstructor<T, ?>> getScreenFactory(MenuType<T> type) {
         MenuScreens.ScreenConstructor<T, ?> screenconstructor = getConstructor(type);
         if (screenconstructor == null) {
             LOGGER.warn("Failed to create screen for menu type: {}", BuiltInRegistries.MENU.getKey(type));
         } else {
-            screenconstructor.fromPacket(title, type, mc, windowId);
+            return java.util.Optional.of(screenconstructor);
         }
+        return java.util.Optional.empty();
     }
 
     @Nullable
@@ -54,6 +_,10 @@
         return (MenuScreens.ScreenConstructor<T, ?>)SCREENS.get(type);
     }
 
+    /**
+     * @deprecated use {@link net.neoforged.neoforge.client.event.RegisterMenuScreensEvent} instead
+     */
+    @Deprecated
     private static <M extends AbstractContainerMenu, U extends Screen & MenuAccess<M>> void register(
         MenuType<? extends M> type, MenuScreens.ScreenConstructor<M, U> factory
     ) {
@@ -61,6 +_,12 @@
         if (screenconstructor != null) {
             throw new IllegalStateException("Duplicate registration for " + BuiltInRegistries.MENU.getKey(type));
         }
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public static void init() {
+        var event = new net.neoforged.neoforge.client.event.RegisterMenuScreensEvent(SCREENS);
+        net.neoforged.fml.ModLoader.postEvent(event);
     }
 
     public static boolean selfTest() {
