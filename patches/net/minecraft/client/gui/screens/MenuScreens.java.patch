--- a/net/minecraft/client/gui/screens/MenuScreens.java
+++ b/net/minecraft/client/gui/screens/MenuScreens.java
@@ -41,12 +_,17 @@
     private static final Map<MenuType<?>, MenuScreens.ScreenConstructor<?, ?>> SCREENS = Maps.newHashMap();
 
     public static <T extends AbstractContainerMenu> void create(MenuType<T> p_96202_, Minecraft p_96203_, int p_96204_, Component p_96205_) {
+        getScreenFactory(p_96202_).ifPresent(f -> f.fromPacket(p_96205_, p_96202_, p_96203_, p_96204_));
+    }
+
+    public static <T extends AbstractContainerMenu> java.util.Optional<ScreenConstructor<T, ?>> getScreenFactory(MenuType<T> p_96202_) {
         MenuScreens.ScreenConstructor<T, ?> screenconstructor = getConstructor(p_96202_);
         if (screenconstructor == null) {
             LOGGER.warn("Failed to create screen for menu type: {}", BuiltInRegistries.MENU.getKey(p_96202_));
         } else {
-            screenconstructor.fromPacket(p_96205_, p_96202_, p_96203_, p_96204_);
+            return java.util.Optional.of(screenconstructor);
         }
+        return java.util.Optional.empty();
     }
 
     @Nullable
@@ -54,6 +_,10 @@
         return (MenuScreens.ScreenConstructor<T, ?>)SCREENS.get(p_96200_);
     }
 
+    /**
+     * @deprecated use {@link net.neoforged.neoforge.client.event.RegisterMenuScreensEvent} instead
+     */
+    @Deprecated
     private static <M extends AbstractContainerMenu, U extends Screen & MenuAccess<M>> void register(
         MenuType<? extends M> p_96207_, MenuScreens.ScreenConstructor<M, U> p_96208_
     ) {
@@ -61,6 +_,12 @@
         if (screenconstructor != null) {
             throw new IllegalStateException("Duplicate registration for " + BuiltInRegistries.MENU.getKey(p_96207_));
         }
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public static void init() {
+        var event = new net.neoforged.neoforge.client.event.RegisterMenuScreensEvent(SCREENS);
+        net.neoforged.fml.ModLoader.postEvent(event);
     }
 
     public static boolean selfTest() {
