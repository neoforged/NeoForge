--- a/net/minecraft/client/gui/Gui.java
+++ b/net/minecraft/client/gui/Gui.java
@@ -69,6 +_,9 @@
 import net.neoforged.api.distmarker.OnlyIn;
 import org.joml.Matrix4fStack;
 
+// Neo: Exceptionally add a static wildcard import to make the patch bearable, and comments to avoid the detection by spotless rules.
+/* space for import change */ import static net.neoforged.neoforge.client.gui.VanillaGuiLayers.* /* space for wildcard import */;
+
 @OnlyIn(Dist.CLIENT)
 public class Gui {
     private static final ResourceLocation CROSSHAIR_SPRITE = ResourceLocation.withDefaultNamespace("hud/crosshair");
@@ -158,9 +_,21 @@
     private long healthBlinkTime;
     private float autosaveIndicatorValue;
     private float lastAutosaveIndicatorValue;
+    /** Neo: This is empty and unused, rendering goes through {@link #layerManager} instead. */
+    @Deprecated
     private final LayeredDraw layers = new LayeredDraw();
+    private final net.neoforged.neoforge.client.gui.GuiLayerManager layerManager = new net.neoforged.neoforge.client.gui.GuiLayerManager();
     private float scopeScale;
 
+    /**
+     * Neo: This variable controls the height of overlays on the left of the hotbar (e.g. health, armor).
+     */
+    public int leftHeight;
+    /**
+     * Neo: This variable controls the height of overlays on the right of the hotbar (e.g. food, vehicle health, air).
+     */
+    public int rightHeight;
+
     public Gui(Minecraft p_232355_) {
         this.minecraft = p_232355_;
         this.debugOverlay = new DebugScreenOverlay(p_232355_);
@@ -170,27 +_,40 @@
         this.bossOverlay = new BossHealthOverlay(p_232355_);
         this.subtitleOverlay = new SubtitleOverlay(p_232355_);
         this.resetTitleTimes();
-        LayeredDraw layereddraw = new LayeredDraw()
-            .add(this::renderCameraOverlays)
-            .add(this::renderCrosshair)
-            .add(this::renderHotbarAndDecorations)
-            .add(this::renderExperienceLevel)
-            .add(this::renderEffects)
-            .add((p_315814_, p_348661_) -> this.bossOverlay.render(p_315814_));
-        LayeredDraw layereddraw1 = new LayeredDraw()
-            .add(this::renderDemoOverlay)
-            .add((p_315812_, p_348497_) -> {
+        var playerHealthComponents = new net.neoforged.neoforge.client.gui.GuiLayerManager()
+                .add(PLAYER_HEALTH, (guiGraphics, partialTick) -> renderHealthLevel(guiGraphics))
+                .add(ARMOR_LEVEL, (guiGraphics, partialTick) -> renderArmorLevel(guiGraphics))
+                .add(FOOD_LEVEL, (guiGraphics, partialTick) -> renderFoodLevel(guiGraphics));
+        var layereddraw = new net.neoforged.neoforge.client.gui.GuiLayerManager()
+            .add(CAMERA_OVERLAYS, this::renderCameraOverlays)
+            .add(CROSSHAIR, this::renderCrosshair)
+            .add(HOTBAR, this::renderHotbar)
+            .add(JUMP_METER, this::maybeRenderJumpMeter)
+            .add(EXPERIENCE_BAR, this::maybeRenderExperienceBar)
+            .add(playerHealthComponents, () -> this.minecraft.gameMode.canHurtPlayer())
+            .add(VEHICLE_HEALTH, this::maybeRenderVehicleHealth)
+            // Air goes above vehicle health, it must render after it for `rightHeight` to work!
+            .add(AIR_LEVEL, (guiGraphics, partialTick) -> { if (this.minecraft.gameMode.canHurtPlayer()) renderAirLevel(guiGraphics); })
+            .add(SELECTED_ITEM_NAME, this::maybeRenderSelectedItemName)
+            .add(SPECTATOR_TOOLTIP, this::maybeRenderSpectatorTooltip)
+            .add(EXPERIENCE_LEVEL, this::renderExperienceLevel)
+            .add(EFFECTS, this::renderEffects)
+            .add(BOSS_OVERLAY, (p_315814_, p_315815_) -> this.bossOverlay.render(p_315814_));
+        var layereddraw1 = new net.neoforged.neoforge.client.gui.GuiLayerManager()
+            .add(DEMO_OVERLAY, this::renderDemoOverlay)
+            .add(DEBUG_OVERLAY, (p_315812_, p_315813_) -> {
                 if (this.debugOverlay.showDebugScreen()) {
                     this.debugOverlay.render(p_315812_);
                 }
             })
-            .add(this::renderScoreboardSidebar)
-            .add(this::renderOverlayMessage)
-            .add(this::renderTitle)
-            .add(this::renderChat)
-            .add(this::renderTabList)
-            .add((p_315816_, p_348512_) -> this.subtitleOverlay.render(p_315816_));
-        this.layers.add(layereddraw, () -> !p_232355_.options.hideGui).add(this::renderSleepOverlay).add(layereddraw1, () -> !p_232355_.options.hideGui);
+            .add(SCOREBOARD_SIDEBAR, this::renderScoreboardSidebar)
+            .add(OVERLAY_MESSAGE, this::renderOverlayMessage)
+            .add(TITLE, this::renderTitle)
+            .add(CHAT, this::renderChat)
+            .add(TAB_LIST, this::renderTabList)
+            .add(SUBTITLE_OVERLAY, (p_315816_, p_315817_) -> this.subtitleOverlay.render(p_315816_))
+            .add(SAVING_INDICATOR, this::renderSavingIndicator);
+        this.layerManager.add(layereddraw, () -> !p_232355_.options.hideGui).add(SLEEP_OVERLAY, this::renderSleepOverlay).add(layereddraw1, () -> !p_232355_.options.hideGui);
     }
 
     public void resetTitleTimes() {
@@ -201,7 +_,9 @@
 
     public void render(GuiGraphics p_282884_, DeltaTracker p_348630_) {
         RenderSystem.enableDepthTest();
-        this.layers.render(p_282884_, p_348630_);
+        leftHeight = 39;
+        rightHeight = 39;
+        this.layerManager.render(p_282884_, p_348630_);
         RenderSystem.disableDepthTest();
     }
 
@@ -262,8 +_,12 @@
             }
 
             if (i > 8) {
+                //Include a shift based on the bar height plus the difference between the height that renderSelectedItemName
+                // renders at (59) and the height that the overlay/status bar renders at (68) by default
+                int yShift = Math.max(leftHeight, rightHeight) + (68 - 59);
                 p_316291_.pose().pushPose();
-                p_316291_.pose().translate((float)(p_316291_.guiWidth() / 2), (float)(p_316291_.guiHeight() - 68), 0.0F);
+                //If y shift is smaller less than the default y level, just render it at the base y level
+                p_316291_.pose().translate((float)(p_316291_.guiWidth() / 2), (float)(p_316291_.guiHeight() - Math.max(yShift, 68)), 0.0F);
                 int j;
                 if (this.animateOverlayMessageColor) {
                     j = Mth.hsvToArgb(f / 50.0F, 0.7F, 0.6F, i);
@@ -323,9 +_,19 @@
     private void renderChat(GuiGraphics p_316307_, DeltaTracker p_348631_) {
         if (!this.chat.isChatFocused()) {
             Window window = this.minecraft.getWindow();
+            // Neo: Allow customizing position of chat component
+            var chatBottomMargin = 40; // See ChatComponent#BOTTOM_MARGIN (used in translate calls in ChatComponent#render)
+            var event = net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(
+                    new net.neoforged.neoforge.client.event.CustomizeGuiOverlayEvent.Chat(window, p_316307_, p_348631_, 0, p_316307_.guiHeight() - chatBottomMargin)
+            );
+
+            // The event is given the absolute Y position; account for chat component's own offsetting here
+            p_316307_.pose().pushPose();
+            p_316307_.pose().translate(event.getPosX(), (event.getPosY() - p_316307_.guiHeight() + chatBottomMargin) / this.chat.getScale(), 0.0F);
             int i = Mth.floor(this.minecraft.mouseHandler.xpos() * (double)window.getGuiScaledWidth() / (double)window.getScreenWidth());
             int j = Mth.floor(this.minecraft.mouseHandler.ypos() * (double)window.getGuiScaledHeight() / (double)window.getScreenHeight());
             this.chat.render(p_316307_, this.tickCount, i, j, false);
+            p_316307_.pose().popPose();
         }
     }
 
@@ -441,6 +_,8 @@
             List<Runnable> list = Lists.newArrayListWithExpectedSize(collection.size());
 
             for (MobEffectInstance mobeffectinstance : Ordering.natural().reverse().sortedCopy(collection)) {
+                var renderer = net.neoforged.neoforge.client.extensions.common.IClientMobEffectExtensions.of(mobeffectinstance);
+                if (!renderer.isVisibleInGui(mobeffectinstance)) continue;
                 Holder<MobEffect> holder = mobeffectinstance.getEffect();
                 if (mobeffectinstance.showIcon()) {
                     int i = p_282812_.guiWidth();
@@ -471,6 +_,7 @@
                         }
                     }
 
+                    if (renderer.renderGuiIcon(mobeffectinstance, this, p_282812_, i, j, 0, f)) continue;
                     TextureAtlasSprite textureatlassprite = mobeffecttexturemanager.get(holder);
                     int l1 = i;
                     int i1 = j;
@@ -488,29 +_,59 @@
         }
     }
 
+    @Deprecated // Neo: Split up into different layers
     private void renderHotbarAndDecorations(GuiGraphics p_316628_, DeltaTracker p_348543_) {
+        renderHotbar(p_316628_, p_348543_);
+        maybeRenderJumpMeter(p_316628_, p_348543_);
+        maybeRenderExperienceBar(p_316628_, p_348543_);
+        maybeRenderPlayerHealth(p_316628_, p_348543_);
+        maybeRenderVehicleHealth(p_316628_, p_348543_);
+        maybeRenderSelectedItemName(p_316628_, p_348543_);
+        maybeRenderSpectatorTooltip(p_316628_, p_348543_);
+    }
+
+    private void renderHotbar(GuiGraphics p_316628_, DeltaTracker p_348543_) {
         if (this.minecraft.gameMode.getPlayerMode() == GameType.SPECTATOR) {
             this.spectatorGui.renderHotbar(p_316628_);
         } else {
             this.renderItemHotbar(p_316628_, p_348543_);
         }
+    }
 
+    private void maybeRenderJumpMeter(GuiGraphics p_316628_, DeltaTracker p_348543_) {
         int i = p_316628_.guiWidth() / 2 - 91;
         PlayerRideableJumping playerrideablejumping = this.minecraft.player.jumpableVehicle();
         if (playerrideablejumping != null) {
             this.renderJumpMeter(playerrideablejumping, p_316628_, i);
-        } else if (this.isExperienceBarVisible()) {
+        }
+
+    }
+
+    private void maybeRenderExperienceBar(GuiGraphics p_316628_, DeltaTracker p_348543_) {
+        int i = p_316628_.guiWidth() / 2 - 91;
+        if (this.minecraft.player.jumpableVehicle() == null && this.isExperienceBarVisible()) {
             this.renderExperienceBar(p_316628_, i);
         }
+    }
 
+    private void maybeRenderPlayerHealth(GuiGraphics p_316628_, DeltaTracker p_348543_) {
         if (this.minecraft.gameMode.canHurtPlayer()) {
             this.renderPlayerHealth(p_316628_);
         }
+    }
 
+    private void maybeRenderVehicleHealth(GuiGraphics p_316628_, DeltaTracker p_348543_) {
         this.renderVehicleHealth(p_316628_);
+    }
+
+    private void maybeRenderSelectedItemName(GuiGraphics p_316628_, DeltaTracker p_348543_) {
         if (this.minecraft.gameMode.getPlayerMode() != GameType.SPECTATOR) {
-            this.renderSelectedItemName(p_316628_);
-        } else if (this.minecraft.player.isSpectator()) {
+            this.renderSelectedItemName(p_316628_, Math.max(this.leftHeight, this.rightHeight));
+        }
+    }
+
+    private void maybeRenderSpectatorTooltip(GuiGraphics p_316628_, DeltaTracker p_348543_) {
+        if (this.minecraft.gameMode.getPlayerMode() == GameType.SPECTATOR && this.minecraft.player.isSpectator()) {
             this.spectatorGui.renderTooltip(p_316628_);
         }
     }
@@ -633,18 +_,23 @@
     }
 
     private void renderSelectedItemName(GuiGraphics p_283501_) {
+        renderSelectedItemName(p_283501_, 0);
+    }
+
+    public void renderSelectedItemName(GuiGraphics p_283501_, int yShift) {
         this.minecraft.getProfiler().push("selectedItemName");
         if (this.toolHighlightTimer > 0 && !this.lastToolHighlight.isEmpty()) {
             MutableComponent mutablecomponent = Component.empty()
                 .append(this.lastToolHighlight.getHoverName())
-                .withStyle(this.lastToolHighlight.getRarity().color());
+                .withStyle(this.lastToolHighlight.getRarity().getStyleModifier());
             if (this.lastToolHighlight.has(DataComponents.CUSTOM_NAME)) {
                 mutablecomponent.withStyle(ChatFormatting.ITALIC);
             }
 
-            int i = this.getFont().width(mutablecomponent);
+            Component highlightTip = this.lastToolHighlight.getHighlightTip(mutablecomponent);
+            int i = this.getFont().width(highlightTip);
             int j = (p_283501_.guiWidth() - i) / 2;
-            int k = p_283501_.guiHeight() - 59;
+            int k = p_283501_.guiHeight() - Math.max(yShift, 59);
             if (!this.minecraft.gameMode.canHurtPlayer()) {
                 k += 14;
             }
@@ -655,7 +_,13 @@
             }
 
             if (l > 0) {
-                p_283501_.drawStringWithBackdrop(this.getFont(), mutablecomponent, j, k, i, FastColor.ARGB32.color(l, -1));
+                Font font = net.neoforged.neoforge.client.extensions.common.IClientItemExtensions.of(lastToolHighlight).getFont(lastToolHighlight, net.neoforged.neoforge.client.extensions.common.IClientItemExtensions.FontContext.SELECTED_ITEM_NAME);
+                if (font == null) {
+                    p_283501_.drawStringWithBackdrop(this.getFont(), highlightTip, j, k, i, FastColor.ARGB32.color(l, -1));
+                } else {
+                    j = (p_283501_.guiWidth() - font.width(highlightTip)) / 2;
+                    p_283501_.drawStringWithBackdrop(font, highlightTip, j, k, i, FastColor.ARGB32.color(l, -1));
+                }
             }
         }
 
@@ -663,7 +_,7 @@
     }
 
     private void renderDemoOverlay(GuiGraphics p_281825_, DeltaTracker p_348679_) {
-        if (this.minecraft.isDemo()) {
+        if (this.minecraft.isDemo() && !this.getDebugOverlay().showDebugScreen()) { // Neo: Hide demo timer when F3 debug overlay is open; fixes MC-271166
             this.minecraft.getProfiler().push("demo");
             Component component;
             if (this.minecraft.level.getGameTime() >= 120500L) {
@@ -778,7 +_,15 @@
         return (int)Math.ceil((double)p_93013_ / 10.0);
     }
 
+    @Deprecated // Neo: Split up into different layers
     private void renderPlayerHealth(GuiGraphics p_283143_) {
+        renderHealthLevel(p_283143_);
+        renderArmorLevel(p_283143_);
+        renderFoodLevel(p_283143_);
+        renderAirLevel(p_283143_);
+    }
+
+    private void renderHealthLevel(GuiGraphics p_283143_) {
         Player player = this.getCameraPlayer();
         if (player != null) {
             int i = Mth.ceil(player.getHealth());
@@ -803,35 +_,62 @@
             this.random.setSeed((long)(this.tickCount * 312871));
             int l = p_283143_.guiWidth() / 2 - 91;
             int i1 = p_283143_.guiWidth() / 2 + 91;
-            int j1 = p_283143_.guiHeight() - 39;
+            int j1 = p_283143_.guiHeight() - leftHeight;
             float f = Math.max((float)player.getAttributeValue(Attributes.MAX_HEALTH), (float)Math.max(k, i));
             int k1 = Mth.ceil(player.getAbsorptionAmount());
             int l1 = Mth.ceil((f + (float)k1) / 2.0F / 10.0F);
             int i2 = Math.max(10 - (l1 - 2), 3);
             int j2 = j1 - 10;
+            leftHeight += (l1 - 1) * i2 + 10;
             int k2 = -1;
             if (player.hasEffect(MobEffects.REGENERATION)) {
                 k2 = this.tickCount % Mth.ceil(f + 5.0F);
             }
-
-            this.minecraft.getProfiler().push("armor");
-            renderArmor(p_283143_, player, j1, l1, i2, l);
-            this.minecraft.getProfiler().popPush("health");
+            this.minecraft.getProfiler().push("health");
             this.renderHearts(p_283143_, player, l, j1, i2, k2, f, i, k, k1, flag);
+            this.minecraft.getProfiler().pop();
+        }
+    }
+
+    private void renderArmorLevel(GuiGraphics p_283143_) {
+        Player player = this.getCameraPlayer();
+        if (player != null) {
+            int l = p_283143_.guiWidth() / 2 - 91;
+            this.minecraft.getProfiler().push("armor");
+            renderArmor(p_283143_, player, p_283143_.guiHeight() - leftHeight + 10, 1, 0, l);
+            this.minecraft.getProfiler().pop();
+            if (player.getArmorValue() > 0) {
+                leftHeight += 10;
+            }
+        }
+    }
+
+    private void renderFoodLevel(GuiGraphics p_283143_) {
+        Player player = this.getCameraPlayer();
+        if (player != null) {
             LivingEntity livingentity = this.getPlayerVehicleWithHealth();
             int l2 = this.getVehicleMaxHearts(livingentity);
             if (l2 == 0) {
-                this.minecraft.getProfiler().popPush("food");
+                this.minecraft.getProfiler().push("food");
+                int i1 = p_283143_.guiWidth() / 2 + 91;
+                int j1 = p_283143_.guiHeight() - rightHeight;
                 this.renderFood(p_283143_, player, j1, i1);
-                j2 -= 10;
+                rightHeight += 10;
+                this.minecraft.getProfiler().pop();
             }
-
-            this.minecraft.getProfiler().popPush("air");
+        }
+    }
+
+    private void renderAirLevel(GuiGraphics p_283143_) {
+        Player player = this.getCameraPlayer();
+        if (player != null) {
+            int i1 = p_283143_.guiWidth() / 2 + 91;
+
+            this.minecraft.getProfiler().push("air");
             int i3 = player.getMaxAirSupply();
             int j3 = Math.min(player.getAirSupply(), i3);
             if (player.isEyeInFluid(FluidTags.WATER) || j3 < i3) {
-                int k3 = this.getVisibleVehicleHeartRows(l2) - 1;
-                j2 -= k3 * 10;
+                int j2 = p_283143_.guiHeight() - rightHeight;
                 int l3 = Mth.ceil((double)(j3 - 2) * 10.0 / (double)i3);
                 int i4 = Mth.ceil((double)j3 * 10.0 / (double)i3) - l3;
                 RenderSystem.enableBlend();
@@ -845,6 +_,7 @@
                 }
 
                 RenderSystem.disableBlend();
+                rightHeight += 10;
             }
 
             this.minecraft.getProfiler().pop();
@@ -984,7 +_,7 @@
             if (i != 0) {
                 int j = (int)Math.ceil((double)livingentity.getHealth());
                 this.minecraft.getProfiler().popPush("mountHealth");
-                int k = p_283368_.guiHeight() - 39;
+                int k = p_283368_.guiHeight() - rightHeight;
                 int l = p_283368_.guiWidth() / 2 + 91;
                 int i1 = k;
                 int j1 = 0;
@@ -1007,6 +_,7 @@
                     }
 
                     i1 -= 10;
+                    rightHeight += 10;
                     j1 += 20;
                 }
 
@@ -1163,7 +_,7 @@
                 this.toolHighlightTimer = 0;
             } else if (this.lastToolHighlight.isEmpty()
                 || !itemstack.is(this.lastToolHighlight.getItem())
-                || !itemstack.getHoverName().equals(this.lastToolHighlight.getHoverName())) {
+                || (!itemstack.getHoverName().equals(this.lastToolHighlight.getHoverName()) || !itemstack.getHighlightTip(itemstack.getHoverName()).equals(this.lastToolHighlight.getHighlightTip(this.lastToolHighlight.getHoverName())))) {
                 this.toolHighlightTimer = (int)(40.0 * this.minecraft.options.notificationDisplayTime().get());
             } else if (this.toolHighlightTimer > 0) {
                 this.toolHighlightTimer--;
@@ -1292,8 +_,17 @@
         }
     }
 
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public void initModdedOverlays() {
+        this.layerManager.initModdedLayers();
+    }
+
+    public int getLayerCount() {
+        return this.layerManager.getLayerCount();
+    }
+
     @OnlyIn(Dist.CLIENT)
-    public static enum HeartType {
+    public static enum HeartType implements net.neoforged.fml.common.asm.enumextension.IExtensibleEnum {
         CONTAINER(
             ResourceLocation.withDefaultNamespace("hud/heart/container"),
             ResourceLocation.withDefaultNamespace("hud/heart/container_blinking"),
@@ -1409,8 +_,13 @@
             } else {
                 gui$hearttype = NORMAL;
             }
+            gui$hearttype = net.neoforged.neoforge.event.EventHooks.firePlayerHeartTypeEvent(p_168733_, gui$hearttype);
 
             return gui$hearttype;
+        }
+
+        public static net.neoforged.fml.common.asm.enumextension.ExtensionInfo getExtensionInfo() {
+            return net.neoforged.fml.common.asm.enumextension.ExtensionInfo.nonExtended(Gui.HeartType.class);
         }
     }
 }
