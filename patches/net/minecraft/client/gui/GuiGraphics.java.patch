--- a/net/minecraft/client/gui/GuiGraphics.java
+++ b/net/minecraft/client/gui/GuiGraphics.java
@@ -56,7 +_,7 @@
 import org.joml.Vector2ic;
 
 @OnlyIn(Dist.CLIENT)
-public class GuiGraphics {
+public class GuiGraphics implements net.neoforged.neoforge.client.extensions.IGuiGraphicsExtension {
     public static final float MAX_GUI_Z = 10000.0F;
     public static final float MIN_GUI_Z = -10000.0F;
     private static final int EXTRA_SPACE_AFTER_FIRST_TOOLTIP_LINE = 2;
@@ -268,6 +_,11 @@
     }
 
     public int drawString(Font font, @Nullable String text, int x, int y, int color, boolean dropShadow) {
+        return this.drawString(font, text, (float)x, (float)y, color, dropShadow);
+    }
+
+    // Forge: Add float variant for x,y coordinates, with a string as input
+    public int drawString(Font font, @Nullable String text, float x, float y, int color, boolean dropShadow) {
         if (text == null) {
             return 0;
         } else {
@@ -294,6 +_,11 @@
     }
 
     public int drawString(Font font, FormattedCharSequence text, int x, int y, int color, boolean dropShadow) {
+        return this.drawString(font, text, (float)x, (float)y, color, dropShadow);
+    }
+
+    // Forge: Add float variant for x,y coordinates, with a formatted char sequence as input
+    public int drawString(Font font, FormattedCharSequence text, float x, float y, int color, boolean dropShadow) {
         int i = font.drawInBatch(
             text,
             (float)x,
@@ -873,19 +_,26 @@
             }
 
             this.pose.popPose();
+            net.neoforged.neoforge.client.ItemDecoratorHandler.of(stack).render(this, font, stack, x, y);
         }
     }
+
+    private ItemStack tooltipStack = ItemStack.EMPTY;
 
     public void renderTooltip(Font font, ItemStack stack, int mouseX, int mouseY) {
+        this.tooltipStack = stack;
         this.renderTooltip(font, Screen.getTooltipFromItem(this.minecraft, stack), stack.getTooltipImage(), mouseX, mouseY);
+        this.tooltipStack = ItemStack.EMPTY;
+    }
+
+    public void renderTooltip(Font font, List<Component> textComponents, Optional<TooltipComponent> tooltipComponent, ItemStack stack, int mouseX, int mouseY) {
+        this.tooltipStack = stack;
+        this.renderTooltip(font, textComponents, tooltipComponent, mouseX, mouseY);
+        this.tooltipStack = ItemStack.EMPTY;
     }
 
     public void renderTooltip(Font font, List<Component> tooltipLines, Optional<TooltipComponent> visualTooltipComponent, int mouseX, int mouseY) {
-        List<ClientTooltipComponent> list = tooltipLines.stream()
-            .map(Component::getVisualOrderText)
-            .map(ClientTooltipComponent::create)
-            .collect(Util.toMutableList());
-        visualTooltipComponent.ifPresent(p_337410_ -> list.add(list.isEmpty() ? 0 : 1, ClientTooltipComponent.create(p_337410_)));
+        List<ClientTooltipComponent> list = net.neoforged.neoforge.client.ClientHooks.gatherTooltipComponents(this.tooltipStack, tooltipLines, visualTooltipComponent, mouseX, guiWidth(), guiHeight(), font);
         this.renderTooltipInternal(font, list, mouseX, mouseY, DefaultTooltipPositioner.INSTANCE);
     }
 
@@ -894,7 +_,15 @@
     }
 
     public void renderComponentTooltip(Font font, List<Component> tooltipLines, int mouseX, int mouseY) {
-        this.renderTooltip(font, Lists.transform(tooltipLines, Component::getVisualOrderText), mouseX, mouseY);
+        List<ClientTooltipComponent> components = net.neoforged.neoforge.client.ClientHooks.gatherTooltipComponents(this.tooltipStack, tooltipLines, mouseX, guiWidth(), guiHeight(), font);
+        this.renderTooltipInternal(font, components, mouseX, mouseY, DefaultTooltipPositioner.INSTANCE);
+    }
+
+    public void renderComponentTooltip(Font font, List<? extends net.minecraft.network.chat.FormattedText> tooltips, int mouseX, int mouseY, ItemStack stack) {
+        this.tooltipStack = stack;
+        List<ClientTooltipComponent> components = net.neoforged.neoforge.client.ClientHooks.gatherTooltipComponents(stack, tooltips, mouseX, guiWidth(), guiHeight(), font);
+        this.renderTooltipInternal(font, components, mouseX, mouseY, DefaultTooltipPositioner.INSTANCE);
+        this.tooltipStack = ItemStack.EMPTY;
     }
 
     public void renderTooltip(Font font, List<? extends FormattedCharSequence> tooltipLines, int mouseX, int mouseY) {
@@ -915,11 +_,13 @@
 
     private void renderTooltipInternal(Font font, List<ClientTooltipComponent> components, int mouseX, int mouseY, ClientTooltipPositioner tooltipPositioner) {
         if (!components.isEmpty()) {
+            net.neoforged.neoforge.client.event.RenderTooltipEvent.Pre preEvent = net.neoforged.neoforge.client.ClientHooks.onRenderTooltipPre(this.tooltipStack, this, mouseX, mouseY, guiWidth(), guiHeight(), components, font, tooltipPositioner);
+            if (preEvent.isCanceled()) return;
             int i = 0;
             int j = components.size() == 1 ? -2 : 0;
 
             for (ClientTooltipComponent clienttooltipcomponent : components) {
-                int k = clienttooltipcomponent.getWidth(font);
+                int k = clienttooltipcomponent.getWidth(preEvent.getFont());
                 if (k > i) {
                     i = k;
                 }
@@ -929,18 +_,19 @@
 
             int i2 = i;
             int j2 = j;
-            Vector2ic vector2ic = tooltipPositioner.positionTooltip(this.guiWidth(), this.guiHeight(), mouseX, mouseY, i2, j2);
+            Vector2ic vector2ic = tooltipPositioner.positionTooltip(this.guiWidth(), this.guiHeight(), preEvent.getX(), preEvent.getY(), i2, j2);
             int l = vector2ic.x();
             int i1 = vector2ic.y();
             this.pose.pushPose();
             int j1 = 400;
-            this.drawManaged(() -> TooltipRenderUtil.renderTooltipBackground(this, l, i1, i2, j2, 400));
+            net.neoforged.neoforge.client.event.RenderTooltipEvent.Color colorEvent = net.neoforged.neoforge.client.ClientHooks.onRenderTooltipColor(this.tooltipStack, this, l, i1, preEvent.getFont(), components);
+            this.drawManaged(() -> TooltipRenderUtil.renderTooltipBackground(this, l, i1, i2, j2, 400, colorEvent.getBackgroundStart(), colorEvent.getBackgroundEnd(), colorEvent.getBorderStart(), colorEvent.getBorderEnd()));
             this.pose.translate(0.0F, 0.0F, 400.0F);
             int k1 = i1;
 
             for (int l1 = 0; l1 < components.size(); l1++) {
                 ClientTooltipComponent clienttooltipcomponent1 = components.get(l1);
-                clienttooltipcomponent1.renderText(font, l, k1, this.pose.last().pose(), this.bufferSource);
+                clienttooltipcomponent1.renderText(preEvent.getFont(), l, k1, this.pose.last().pose(), this.bufferSource);
                 k1 += clienttooltipcomponent1.getHeight() + (l1 == 0 ? 2 : 0);
             }
 
@@ -948,7 +_,7 @@
 
             for (int k2 = 0; k2 < components.size(); k2++) {
                 ClientTooltipComponent clienttooltipcomponent2 = components.get(k2);
-                clienttooltipcomponent2.renderImage(font, l, k1, this);
+                clienttooltipcomponent2.renderImage(preEvent.getFont(), l, k1, this);
                 k1 += clienttooltipcomponent2.getHeight() + (k2 == 0 ? 2 : 0);
             }
 
