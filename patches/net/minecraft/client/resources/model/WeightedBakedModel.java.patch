--- a/net/minecraft/client/resources/model/WeightedBakedModel.java
+++ b/net/minecraft/client/resources/model/WeightedBakedModel.java
@@ -17,7 +_,7 @@
 import net.neoforged.api.distmarker.OnlyIn;
 
 @OnlyIn(Dist.CLIENT)
-public class WeightedBakedModel implements BakedModel {
+public class WeightedBakedModel implements BakedModel, net.neoforged.neoforge.client.model.IDynamicBakedModel {
     private final int totalWeight;
     private final List<WeightedEntry.Wrapper<BakedModel>> list;
     private final BakedModel wrapped;
@@ -29,9 +_,10 @@
     }
 
     @Override
-    public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction direction, RandomSource random) {
+    // FORGE: Implement our overloads (here and below) so child models can have custom logic
+    public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction direction, RandomSource random, net.neoforged.neoforge.client.model.data.ModelData modelData, @org.jetbrains.annotations.Nullable net.minecraft.client.renderer.RenderType renderType) {
         return WeightedRandom.getWeightedItem(this.list, Math.abs((int)random.nextLong()) % this.totalWeight)
-            .map(p_337442_ -> p_337442_.data().getQuads(state, direction, random))
+            .map(p_235065_ -> p_235065_.data().getQuads(state, direction, random, modelData, renderType))
             .orElse(Collections.emptyList());
     }
 
@@ -41,6 +_,11 @@
     }
 
     @Override
+    public net.neoforged.neoforge.common.util.TriState useAmbientOcclusion(BlockState state, net.neoforged.neoforge.client.model.data.ModelData modelData, net.minecraft.client.renderer.RenderType renderType) {
+        return this.wrapped.useAmbientOcclusion(state, modelData, renderType);
+    }
+
+    @Override
     public boolean isGui3d() {
         return this.wrapped.isGui3d();
     }
@@ -61,8 +_,25 @@
     }
 
     @Override
+    public TextureAtlasSprite getParticleIcon(net.neoforged.neoforge.client.model.data.ModelData modelData) {
+        return this.wrapped.getParticleIcon(modelData);
+    }
+
+    @Override
     public ItemTransforms getTransforms() {
         return this.wrapped.getTransforms();
+    }
+
+    @Override
+    public BakedModel applyTransform(net.minecraft.world.item.ItemDisplayContext transformType, com.mojang.blaze3d.vertex.PoseStack poseStack, boolean applyLeftHandTransform) {
+        return this.wrapped.applyTransform(transformType, poseStack, applyLeftHandTransform);
+    }
+
+    @Override // FORGE: Get render types based on the active weighted model
+    public net.neoforged.neoforge.client.ChunkRenderTypeSet getRenderTypes(@org.jetbrains.annotations.NotNull BlockState state, @org.jetbrains.annotations.NotNull RandomSource rand, @org.jetbrains.annotations.NotNull net.neoforged.neoforge.client.model.data.ModelData data) {
+        return WeightedRandom.getWeightedItem(this.list, Math.abs((int)rand.nextLong()) % this.totalWeight)
+                  .map((p_235065_) -> p_235065_.data().getRenderTypes(state, rand, data))
+                  .orElse(net.neoforged.neoforge.client.ChunkRenderTypeSet.none());
     }
 
     @Override
