--- a/net/minecraft/client/resources/model/MultiPartBakedModel.java
+++ b/net/minecraft/client/resources/model/MultiPartBakedModel.java
@@ -16,7 +_,7 @@
 import net.neoforged.api.distmarker.OnlyIn;
 
 @OnlyIn(Dist.CLIENT)
-public class MultiPartBakedModel extends DelegateBakedModel {
+public class MultiPartBakedModel extends DelegateBakedModel implements net.neoforged.neoforge.client.model.IDynamicBakedModel {
     private final List<MultiPartBakedModel.Selector> selectors;
     private final Map<BlockState, BitSet> selectorCache = new Reference2ObjectOpenHashMap<>();
 
@@ -33,11 +_,7 @@
         this.selectors = p_119462_;
     }
 
-    @Override
-    public List<BakedQuad> getQuads(@Nullable BlockState p_235050_, @Nullable Direction p_235051_, RandomSource p_235052_) {
-        if (p_235050_ == null) {
-            return Collections.emptyList();
-        } else {
+    public BitSet getSelectors(@Nullable BlockState p_235050_) {
             BitSet bitset = this.selectorCache.get(p_235050_);
             if (bitset == null) {
                 bitset = new BitSet();
@@ -50,19 +_,47 @@
 
                 this.selectorCache.put(p_235050_, bitset);
             }
+            return bitset;
+    }
 
-            List<BakedQuad> list = new ArrayList<>();
+    // FORGE: Implement our overloads (here and below) so child models can have custom logic
+    @Override
+    public List<BakedQuad> getQuads(@Nullable BlockState p_235050_, @Nullable Direction p_235051_, RandomSource p_235052_, net.neoforged.neoforge.client.model.data.ModelData modelData, @org.jetbrains.annotations.Nullable net.minecraft.client.renderer.RenderType renderType) {
+        if (p_235050_ == null) {
+            return Collections.emptyList();
+        } else {
+            BitSet bitset = getSelectors(p_235050_);
+            List<List<BakedQuad>> list = new ArrayList<>();
             long j = p_235052_.nextLong();
 
             for (int k = 0; k < bitset.length(); k++) {
                 if (bitset.get(k)) {
-                    p_235052_.setSeed(j);
-                    list.addAll(this.selectors.get(k).model.getQuads(p_235050_, p_235051_, p_235052_));
+
+                    var model = this.selectors.get(k).model;
+                    if (renderType == null || model.getRenderTypes(p_235050_, p_235052_, modelData).contains(renderType)) { // FORGE: Only put quad data if the model is using the render type passed
+                        p_235052_.setSeed(j);
+                        list.add(model.getQuads(p_235050_, p_235051_, p_235052_, net.neoforged.neoforge.client.model.data.MultipartModelData.resolve(modelData, model), renderType));
+                    }
                 }
             }
 
-            return list;
+            return net.neoforged.neoforge.common.util.ConcatenatedListView.of(list);
         }
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.model.data.ModelData getModelData(net.minecraft.world.level.BlockAndTintGetter level, net.minecraft.core.BlockPos pos, BlockState state, net.neoforged.neoforge.client.model.data.ModelData modelData) {
+        return net.neoforged.neoforge.client.model.data.MultipartModelData.create(selectors, getSelectors(state), level, pos, state, modelData);
+    }
+
+    @Override // FORGE: Get render types based on the selectors matched by the given block state
+    public net.neoforged.neoforge.client.ChunkRenderTypeSet getRenderTypes(@org.jetbrains.annotations.NotNull BlockState state, @org.jetbrains.annotations.NotNull RandomSource rand, @org.jetbrains.annotations.NotNull net.neoforged.neoforge.client.model.data.ModelData data) {
+        var renderTypeSets = new java.util.LinkedList<net.neoforged.neoforge.client.ChunkRenderTypeSet>();
+        var selectors = getSelectors(state);
+        for (int i = 0; i < selectors.length(); i++)
+            if (selectors.get(i))
+                renderTypeSets.add(this.selectors.get(i).model.getRenderTypes(state, rand, data));
+        return net.neoforged.neoforge.client.ChunkRenderTypeSet.union(renderTypeSets);
     }
 
     @OnlyIn(Dist.CLIENT)
