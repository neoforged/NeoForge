--- a/net/minecraft/client/resources/model/MultiPartBakedModel.java
+++ b/net/minecraft/client/resources/model/MultiPartBakedModel.java
@@ -20,7 +_,7 @@
 import org.apache.commons.lang3.tuple.Pair;
 
 @OnlyIn(Dist.CLIENT)
-public class MultiPartBakedModel implements BakedModel {
+public class MultiPartBakedModel implements BakedModel, net.neoforged.neoforge.client.model.IDynamicBakedModel {
     private final List<Pair<Predicate<BlockState>, BakedModel>> selectors;
     protected final boolean hasAmbientOcclusion;
     protected final boolean isGui3d;
@@ -29,10 +_,12 @@
     protected final ItemTransforms transforms;
     protected final ItemOverrides overrides;
     private final Map<BlockState, BitSet> selectorCache = new Reference2ObjectOpenHashMap<>();
+    private final BakedModel defaultModel;
 
     public MultiPartBakedModel(List<Pair<Predicate<BlockState>, BakedModel>> selectors) {
         this.selectors = selectors;
         BakedModel bakedmodel = selectors.iterator().next().getRight();
+        this.defaultModel = bakedmodel;
         this.hasAmbientOcclusion = bakedmodel.useAmbientOcclusion();
         this.isGui3d = bakedmodel.isGui3d();
         this.usesBlockLight = bakedmodel.usesBlockLight();
@@ -41,11 +_,7 @@
         this.overrides = bakedmodel.getOverrides();
     }
 
-    @Override
-    public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction direction, RandomSource random) {
-        if (state == null) {
-            return Collections.emptyList();
-        } else {
+    public BitSet getSelectors(@Nullable BlockState state) {
             BitSet bitset = this.selectorCache.get(state);
             if (bitset == null) {
                 bitset = new BitSet();
@@ -59,17 +_,28 @@
 
                 this.selectorCache.put(state, bitset);
             }
+            return bitset;
+    }
 
-            List<BakedQuad> list = Lists.newArrayList();
+    // FORGE: Implement our overloads (here and below) so child models can have custom logic
+    @Override
+    public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction direction, RandomSource random, net.neoforged.neoforge.client.model.data.ModelData modelData, @org.jetbrains.annotations.Nullable net.minecraft.client.renderer.RenderType renderType) {
+        if (state == null) {
+            return Collections.emptyList();
+        } else {
+            BitSet bitset = getSelectors(state);
+            List<List<BakedQuad>> list = Lists.newArrayList();
             long k = random.nextLong();
 
             for (int j = 0; j < bitset.length(); j++) {
                 if (bitset.get(j)) {
-                    list.addAll(this.selectors.get(j).getRight().getQuads(state, direction, RandomSource.create(k)));
+                    var model = this.selectors.get(j).getRight();
+                    if (renderType == null || model.getRenderTypes(state, random, modelData).contains(renderType)) // FORGE: Only put quad data if the model is using the render type passed
+                    list.add(model.getQuads(state, direction, RandomSource.create(k), net.neoforged.neoforge.client.model.data.MultipartModelData.resolve(modelData, model), renderType));
                 }
             }
 
-            return list;
+            return net.neoforged.neoforge.common.util.ConcatenatedListView.of(list);
         }
     }
 
@@ -79,6 +_,16 @@
     }
 
     @Override
+    public net.neoforged.neoforge.common.util.TriState useAmbientOcclusion(BlockState state, net.neoforged.neoforge.client.model.data.ModelData modelData, net.minecraft.client.renderer.RenderType renderType) {
+        return this.defaultModel.useAmbientOcclusion(state, modelData, renderType);
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.model.data.ModelData getModelData(net.minecraft.world.level.BlockAndTintGetter level, net.minecraft.core.BlockPos pos, BlockState state, net.neoforged.neoforge.client.model.data.ModelData modelData) {
+        return net.neoforged.neoforge.client.model.data.MultipartModelData.create(selectors, getSelectors(state), level, pos, state, modelData);
+    }
+
+    @Override
     public boolean isGui3d() {
         return this.isGui3d;
     }
@@ -94,13 +_,35 @@
     }
 
     @Override
+    @Deprecated
     public TextureAtlasSprite getParticleIcon() {
         return this.particleIcon;
     }
 
     @Override
+    public TextureAtlasSprite getParticleIcon(net.neoforged.neoforge.client.model.data.ModelData modelData) {
+        return this.defaultModel.getParticleIcon(modelData);
+    }
+
+    @Deprecated
+    @Override
     public ItemTransforms getTransforms() {
         return this.transforms;
+    }
+
+    @Override
+    public BakedModel applyTransform(net.minecraft.world.item.ItemDisplayContext transformType, com.mojang.blaze3d.vertex.PoseStack poseStack, boolean applyLeftHandTransform) {
+        return this.defaultModel.applyTransform(transformType, poseStack, applyLeftHandTransform);
+    }
+
+    @Override // FORGE: Get render types based on the selectors matched by the given block state
+    public net.neoforged.neoforge.client.ChunkRenderTypeSet getRenderTypes(@org.jetbrains.annotations.NotNull BlockState state, @org.jetbrains.annotations.NotNull RandomSource rand, @org.jetbrains.annotations.NotNull net.neoforged.neoforge.client.model.data.ModelData data) {
+        var renderTypeSets = new java.util.LinkedList<net.neoforged.neoforge.client.ChunkRenderTypeSet>();
+        var selectors = getSelectors(state);
+        for (int i = 0; i < selectors.length(); i++)
+            if (selectors.get(i))
+                renderTypeSets.add(this.selectors.get(i).getRight().getRenderTypes(state, rand, data));
+        return net.neoforged.neoforge.client.ChunkRenderTypeSet.union(renderTypeSets);
     }
 
     @Override
