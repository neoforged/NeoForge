--- a/net/minecraft/client/resources/model/ModelManager.java
+++ b/net/minecraft/client/resources/model/ModelManager.java
@@ -63,13 +_,14 @@
         TextureAtlas.LOCATION_BLOCKS,
         ResourceLocation.withDefaultNamespace("blocks")
     );
-    private Map<ModelResourceLocation, BakedModel> bakedRegistry;
+    private Map<ModelResourceLocation, BakedModel> bakedRegistry = new java.util.HashMap<>();
     private final AtlasSet atlases;
     private final BlockModelShaper blockModelShaper;
     private final BlockColors blockColors;
     private int maxMipmapLevels;
     private BakedModel missingModel;
     private Object2IntMap<BlockState> modelGroups;
+    private ModelBakery modelBakery;
 
     public ModelManager(TextureManager textureManager, BlockColors blockColors, int maxMipmapLevels) {
         this.blockColors = blockColors;
@@ -100,6 +_,7 @@
         Executor gameExecutor
     ) {
         preparationsProfiler.startTick();
+        net.neoforged.neoforge.client.model.geometry.GeometryLoaderManager.init();
         CompletableFuture<Map<ResourceLocation, BlockModel>> completablefuture = loadBlockModels(resourceManager, backgroundExecutor);
         CompletableFuture<Map<ResourceLocation, List<BlockStateModelLoader.LoadedJson>>> completablefuture1 = loadBlockStates(resourceManager, backgroundExecutor);
         CompletableFuture<ModelBakery> completablefuture2 = completablefuture.thenCombineAsync(
@@ -218,6 +_,8 @@
                             .collect(Collectors.joining("\n"))
                     )
             );
+        profilerFiller.popPush("forge_modify_baking_result");
+        net.neoforged.neoforge.client.ClientHooks.onModifyBakingResult(modelBakery.getBakedTopLevelModels(), atlasPreparations, modelBakery);
         profilerFiller.popPush("dispatch");
         Map<ModelResourceLocation, BakedModel> map = modelBakery.getBakedTopLevelModels();
         BakedModel bakedmodel = map.get(ModelBakery.MISSING_MODEL_VARIANT);
@@ -247,6 +_,8 @@
         this.bakedRegistry = modelbakery.getBakedTopLevelModels();
         this.modelGroups = modelbakery.getModelGroups();
         this.missingModel = reloadState.missingModel;
+        this.modelBakery = modelbakery;
+        net.neoforged.neoforge.client.ClientHooks.onModelBake(this, this.bakedRegistry, modelbakery);
         profiler.popPush("cache");
         this.blockModelShaper.replaceCache(reloadState.modelCache);
         profiler.pop();
@@ -272,6 +_,7 @@
     }
 
     public TextureAtlas getAtlas(ResourceLocation location) {
+        if (this.atlases == null) throw new RuntimeException("getAtlasTexture called too early!");
         return this.atlases.getAtlas(location);
     }
 
@@ -282,6 +_,10 @@
 
     public void updateMaxMipLevel(int level) {
         this.maxMipmapLevels = level;
+    }
+
+    public ModelBakery getModelBakery() {
+        return com.google.common.base.Preconditions.checkNotNull(modelBakery, "Attempted to query model bakery before it has been initialized.");
     }
 
     @OnlyIn(Dist.CLIENT)
