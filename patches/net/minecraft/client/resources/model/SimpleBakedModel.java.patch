--- a/net/minecraft/client/resources/model/SimpleBakedModel.java
+++ b/net/minecraft/client/resources/model/SimpleBakedModel.java
@@ -25,7 +_,11 @@
     protected final boolean usesBlockLight;
     protected final TextureAtlasSprite particleIcon;
     protected final ItemTransforms transforms;
+    @Nullable protected final net.neoforged.neoforge.client.ChunkRenderTypeSet blockRenderTypes;
+    @Nullable protected final List<net.minecraft.client.renderer.RenderType> itemRenderTypes;
 
+    /** @deprecated Forge: Use {@linkplain #SimpleBakedModel(List, Map, boolean, boolean, boolean, TextureAtlasSprite, ItemTransforms, net.neoforged.neoforge.client.RenderTypeGroup) variant with RenderTypeGroup} **/
+    @Deprecated
     public SimpleBakedModel(
         List<BakedQuad> p_119489_,
         Map<Direction, List<BakedQuad>> p_119490_,
@@ -35,6 +_,19 @@
         TextureAtlasSprite p_119494_,
         ItemTransforms p_119495_
     ) {
+        this(p_119489_, p_119490_, p_119491_, p_119492_, p_119493_, p_119494_, p_119495_, net.neoforged.neoforge.client.RenderTypeGroup.EMPTY);
+    }
+
+    public SimpleBakedModel(
+            List<BakedQuad> p_119489_,
+            Map<Direction, List<BakedQuad>> p_119490_,
+            boolean p_119491_,
+            boolean p_119492_,
+            boolean p_119493_,
+            TextureAtlasSprite p_119494_,
+            ItemTransforms p_119495_,
+            net.neoforged.neoforge.client.RenderTypeGroup renderTypes
+    ) {
         this.unculledFaces = p_119489_;
         this.culledFaces = p_119490_;
         this.hasAmbientOcclusion = p_119491_;
@@ -42,6 +_,8 @@
         this.usesBlockLight = p_119492_;
         this.particleIcon = p_119494_;
         this.transforms = p_119495_;
+        this.blockRenderTypes = !renderTypes.isEmpty() ? net.neoforged.neoforge.client.ChunkRenderTypeSet.of(renderTypes.block()) : null;
+        this.itemRenderTypes = !renderTypes.isEmpty() ? List.of(renderTypes.entity()) : null;
     }
 
     @Override
@@ -79,6 +_,20 @@
         return this.transforms;
     }
 
+    @Override
+    public net.neoforged.neoforge.client.ChunkRenderTypeSet getRenderTypes(BlockState state, RandomSource rand, net.neoforged.neoforge.client.model.data.ModelData data) {
+        if (blockRenderTypes != null)
+            return blockRenderTypes;
+        return BakedModel.super.getRenderTypes(state, rand, data);
+    }
+
+    @Override
+    public List<net.minecraft.client.renderer.RenderType> getRenderTypes(net.minecraft.world.item.ItemStack itemStack) {
+        if (itemRenderTypes != null)
+            return itemRenderTypes;
+        return BakedModel.super.getRenderTypes(itemStack);
+    }
+
     @OnlyIn(Dist.CLIENT)
     public static class Builder {
         private final ImmutableList.Builder<BakedQuad> unculledFaces = ImmutableList.builder();
@@ -124,7 +_,13 @@
             return this;
         }
 
+        /** @deprecated Forge: Use {@linkplain #build(net.neoforged.neoforge.client.RenderTypeGroup) variant with RenderTypeGroup} **/
+        @Deprecated
         public BakedModel build() {
+            return build(net.neoforged.neoforge.client.RenderTypeGroup.EMPTY);
+        }
+
+        public BakedModel build(net.neoforged.neoforge.client.RenderTypeGroup renderTypes) {
             if (this.particleIcon == null) {
                 throw new RuntimeException("Missing particle!");
             } else {
@@ -136,7 +_,8 @@
                     this.usesBlockLight,
                     this.isGui3d,
                     this.particleIcon,
-                    this.transforms
+                    this.transforms,
+                    renderTypes
                 );
             }
         }
