--- a/net/minecraft/client/resources/model/SimpleBakedModel.java
+++ b/net/minecraft/client/resources/model/SimpleBakedModel.java
@@ -26,7 +_,12 @@
     protected final TextureAtlasSprite particleIcon;
     protected final ItemTransforms transforms;
     protected final ItemOverrides overrides;
+    protected final net.neoforged.neoforge.client.ChunkRenderTypeSet blockRenderTypes;
+    protected final List<net.minecraft.client.renderer.RenderType> itemRenderTypes;
+    protected final List<net.minecraft.client.renderer.RenderType> fabulousItemRenderTypes;
 
+    /** @deprecated Forge: Use {@linkplain #SimpleBakedModel(List, Map, boolean, boolean, boolean, TextureAtlasSprite, ItemTransforms, ItemOverrides, net.neoforged.neoforge.client.RenderTypeGroup) variant with RenderTypeGroup} **/
+    @Deprecated
     public SimpleBakedModel(
         List<BakedQuad> unculledFaces,
         Map<Direction, List<BakedQuad>> culledFaces,
@@ -37,6 +_,20 @@
         ItemTransforms transforms,
         ItemOverrides overrides
     ) {
+        this(unculledFaces, culledFaces, hasAmbientOcclusion, usesBlockLight, isGui3d, particleIcon, transforms, overrides, net.neoforged.neoforge.client.RenderTypeGroup.EMPTY);
+    }
+
+    public SimpleBakedModel(
+              List<BakedQuad> unculledFaces,
+              Map<Direction, List<BakedQuad>> culledFaces,
+              boolean hasAmbientOcclusion,
+              boolean usesBlockLight,
+              boolean isGui3d,
+              TextureAtlasSprite particleIcon,
+              ItemTransforms transforms,
+              ItemOverrides overrides,
+              net.neoforged.neoforge.client.RenderTypeGroup renderTypes
+    ) {
         this.unculledFaces = unculledFaces;
         this.culledFaces = culledFaces;
         this.hasAmbientOcclusion = hasAmbientOcclusion;
@@ -45,6 +_,9 @@
         this.particleIcon = particleIcon;
         this.transforms = transforms;
         this.overrides = overrides;
+        this.blockRenderTypes = !renderTypes.isEmpty() ? net.neoforged.neoforge.client.ChunkRenderTypeSet.of(renderTypes.block()) : null;
+        this.itemRenderTypes = !renderTypes.isEmpty() ? List.of(renderTypes.entity()) : null;
+        this.fabulousItemRenderTypes = !renderTypes.isEmpty() ? List.of(renderTypes.entityFabulous()) : null;
     }
 
     @Override
@@ -87,6 +_,25 @@
         return this.overrides;
     }
 
+    @Override
+    public net.neoforged.neoforge.client.ChunkRenderTypeSet getRenderTypes(@org.jetbrains.annotations.NotNull BlockState state, @org.jetbrains.annotations.NotNull RandomSource rand, @org.jetbrains.annotations.NotNull net.neoforged.neoforge.client.model.data.ModelData data) {
+        if (blockRenderTypes != null)
+            return blockRenderTypes;
+        return BakedModel.super.getRenderTypes(state, rand, data);
+    }
+
+    @Override
+    public List<net.minecraft.client.renderer.RenderType> getRenderTypes(net.minecraft.world.item.ItemStack itemStack, boolean fabulous) {
+        if (!fabulous) {
+            if (itemRenderTypes != null)
+                 return itemRenderTypes;
+        } else {
+            if (fabulousItemRenderTypes != null)
+                 return fabulousItemRenderTypes;
+        }
+        return BakedModel.super.getRenderTypes(itemStack, fabulous);
+    }
+
     @OnlyIn(Dist.CLIENT)
     public static class Builder {
         private final List<BakedQuad> unculledFaces = Lists.newArrayList();
@@ -133,7 +_,13 @@
             return this;
         }
 
+        /** @deprecated Forge: Use {@linkplain #build(net.neoforged.neoforge.client.RenderTypeGroup) variant with RenderTypeGroup} **/
+        @Deprecated
         public BakedModel build() {
+            return build(net.neoforged.neoforge.client.RenderTypeGroup.EMPTY);
+        }
+
+        public BakedModel build(net.neoforged.neoforge.client.RenderTypeGroup renderTypes) {
             if (this.particleIcon == null) {
                 throw new RuntimeException("Missing particle!");
             } else {
@@ -145,7 +_,8 @@
                     this.isGui3d,
                     this.particleIcon,
                     this.transforms,
-                    this.overrides
+                    this.overrides,
+                    renderTypes
                 );
             }
         }
