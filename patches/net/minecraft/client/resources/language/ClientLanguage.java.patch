--- a/net/minecraft/client/resources/language/ClientLanguage.java
+++ b/net/minecraft/client/resources/language/ClientLanguage.java
@@ -22,23 +_,32 @@
 public class ClientLanguage extends Language {
     private static final Logger LOGGER = LogUtils.getLogger();
     private final Map<String, String> storage;
+    private final Map<String, net.minecraft.network.chat.Component> componentStorage;
     private final boolean defaultRightToLeft;
 
+    @Deprecated
     private ClientLanguage(Map<String, String> p_118914_, boolean p_118915_) {
+        this(p_118914_, p_118915_, Map.of());
+    }
+
+    private ClientLanguage(Map<String, String> p_118914_, boolean p_118915_, Map<String, net.minecraft.network.chat.Component> componentStorage) {
         this.storage = p_118914_;
         this.defaultRightToLeft = p_118915_;
+        this.componentStorage = componentStorage;
     }
 
     public static ClientLanguage loadFrom(ResourceManager p_265765_, List<String> p_265743_, boolean p_265470_) {
         Map<String, String> map = new HashMap<>();
+        Map<String, net.minecraft.network.chat.Component> componentMap = new HashMap<>();
 
         for (String s : p_265743_) {
             String s1 = String.format(Locale.ROOT, "lang/%s.json", s);
+            map.putAll(net.neoforged.fml.i18n.I18nManager.loadTranslations(s));
 
             for (String s2 : p_265765_.getNamespaces()) {
                 try {
                     ResourceLocation resourcelocation = ResourceLocation.fromNamespaceAndPath(s2, s1);
-                    appendFrom(s, p_265765_.getResourceStack(resourcelocation), map);
+                    appendFrom(s, p_265765_.getResourceStack(resourcelocation), map, componentMap);
                 } catch (Exception exception) {
                     LOGGER.warn("Skipped language file: {}:{} ({})", s2, s1, exception.toString());
                 }
@@ -46,13 +_,18 @@
         }
 
         DeprecatedTranslationsInfo.loadFromDefaultResource().applyToMap(map);
-        return new ClientLanguage(Map.copyOf(map), p_265470_);
+        return new ClientLanguage(Map.copyOf(map), p_265470_, Map.copyOf(componentMap));
     }
 
+    @Deprecated
     private static void appendFrom(String p_235036_, List<Resource> p_235037_, Map<String, String> p_235038_) {
+        appendFrom(p_235036_, p_235037_, p_235038_, new java.util.HashMap<>());
+    }
+
+    private static void appendFrom(String p_235036_, List<Resource> p_235037_, Map<String, String> p_235038_, Map<String, net.minecraft.network.chat.Component> componentMap) {
         for (Resource resource : p_235037_) {
             try (InputStream inputstream = resource.open()) {
-                Language.loadFromJson(inputstream, p_235038_::put);
+                Language.loadFromJson(inputstream, p_235038_::put, componentMap::put);
             } catch (IOException ioexception) {
                 LOGGER.warn("Failed to load translations for {} from pack {}", p_235036_, resource.sourcePackId(), ioexception);
             }
@@ -77,5 +_,15 @@
     @Override
     public FormattedCharSequence getVisualOrder(FormattedText p_118925_) {
         return FormattedBidiReorder.reorder(p_118925_, this.defaultRightToLeft);
+    }
+
+    @Override
+    public Map<String, String> getLanguageData() {
+        return storage;
+    }
+
+    @Override
+    public @org.jetbrains.annotations.Nullable net.minecraft.network.chat.Component getComponent(String key) {
+        return componentStorage.get(key);
     }
 }
