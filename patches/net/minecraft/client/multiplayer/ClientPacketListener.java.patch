--- a/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -340,6 +_,7 @@
     private MessageSignatureCache messageSignatureCache = MessageSignatureCache.createDefault();
     private final ChunkBatchSizeCalculator chunkBatchSizeCalculator = new ChunkBatchSizeCalculator();
     private final PingDebugMonitor pingDebugMonitor;
+    private net.neoforged.neoforge.network.connection.ConnectionType connectionType;
     @Nullable
     private LevelLoadStatusManager levelLoadStatusManager;
     private boolean seenInsecureChatWarning = false;
@@ -353,6 +_,7 @@
         this.advancements = new ClientAdvancements(p_253924_, this.telemetryManager);
         this.suggestionsProvider = new ClientSuggestionProvider(this, p_253924_);
         this.pingDebugMonitor = new PingDebugMonitor(this, p_253924_.getDebugOverlay().getPingLogger());
+        this.connectionType = p_295121_.connectionType();
     }
 
     public ClientSuggestionProvider getSuggestionsProvider() {
@@ -416,6 +_,7 @@
 
         this.minecraft.debugRenderer.clear();
         this.minecraft.player.resetPos();
+        net.neoforged.neoforge.client.ClientHooks.firePlayerLogin(this.minecraft.gameMode, this.minecraft.player, this.minecraft.getConnection().connection);
         this.minecraft.player.setId(p_105030_.playerId());
         this.level.addEntity(this.minecraft.player);
         this.minecraft.player.input = new KeyboardInput(this.minecraft.options);
@@ -801,7 +_,8 @@
                         this.enabledFeatures,
                         this.serverBrand,
                         this.serverData,
-                        this.postDisconnectScreen
+                        this.postDisconnectScreen,
+                        this.connectionType
                     )
                 )
             );
@@ -1143,6 +_,7 @@
         }
 
         localplayer1.resetPos();
+        net.neoforged.neoforge.client.ClientHooks.firePlayerRespawn(this.minecraft.gameMode, localplayer, localplayer1, localplayer1.connection.connection);
         this.level.addEntity(localplayer1);
         localplayer1.setYRot(-180.0F);
         localplayer1.input = new KeyboardInput(this.minecraft.options);
@@ -1274,10 +_,7 @@
         PacketUtils.ensureRunningOnSameThread(p_104976_, this, this.minecraft);
         BlockPos blockpos = p_104976_.getPos();
         this.minecraft.level.getBlockEntity(blockpos, p_104976_.getType()).ifPresent(p_205557_ -> {
-            CompoundTag compoundtag = p_104976_.getTag();
-            if (compoundtag != null) {
-                p_205557_.load(compoundtag);
-            }
+            p_205557_.onDataPacket(connection, p_104976_);
 
             if (p_205557_ instanceof CommandBlockEntity && this.minecraft.screen instanceof CommandBlockEditScreen) {
                 ((CommandBlockEditScreen)this.minecraft.screen).updateGui();
@@ -1446,7 +_,9 @@
     @Override
     public void handleCommands(ClientboundCommandsPacket p_104990_) {
         PacketUtils.ensureRunningOnSameThread(p_104990_, this, this.minecraft);
-        this.commands = new CommandDispatcher<>(p_104990_.getRoot(CommandBuildContext.simple(this.registryAccess, this.enabledFeatures)));
+        var context = CommandBuildContext.simple(this.registryAccess, this.enabledFeatures);
+        this.commands = new CommandDispatcher<>(p_104990_.getRoot(context));
+        this.commands = net.neoforged.neoforge.client.ClientCommandHandler.mergeServerCommands(this.commands, context);
     }
 
     @Override
@@ -1468,6 +_,7 @@
         ClientRecipeBook clientrecipebook = this.minecraft.player.getRecipeBook();
         clientrecipebook.setupCollections(this.recipeManager.getRecipes(), this.minecraft.level.registryAccess());
         this.minecraft.populateSearchTree(SearchRegistry.RECIPE_COLLECTIONS, clientrecipebook.getCollections());
+        net.neoforged.neoforge.client.ClientHooks.onRecipesUpdated(this.recipeManager);
     }
 
     @Override
@@ -1574,7 +_,8 @@
             Blocks.rebuildCache();
         }
 
-        CreativeModeTabs.searchTab().rebuildSearchTree();
+        CreativeModeTabs.allTabs().stream().filter(net.minecraft.world.item.CreativeModeTab::hasSearchBar).forEach(net.minecraft.world.item.CreativeModeTab::rebuildSearchTree);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.TagsUpdatedEvent(this.registryAccess, true, connection.isMemoryConnection()));
     }
 
     @Override
@@ -1916,7 +_,21 @@
     }
 
     @Override
-    public void handleCustomPayload(CustomPacketPayload p_295851_) {
+    public void handleCustomPayload(net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket p_295727_, CustomPacketPayload p_295851_) {
+        if (p_295851_ instanceof net.neoforged.neoforge.network.payload.MinecraftRegisterPayload minecraftRegisterPayload) {
+            this.connectionType = this.connectionType.withMinecraftRegisterPayload();
+            net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onMinecraftRegister(this, minecraftRegisterPayload.newChannels());
+            return;
+        }
+        if (p_295851_  instanceof net.neoforged.neoforge.network.payload.MinecraftUnregisterPayload minecraftUnregisterPayload) {
+            this.connectionType = this.connectionType.withMinecraftRegisterPayload();
+            net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onMinecraftUnregister(this, minecraftUnregisterPayload.forgottenChannels());
+            return;
+        }
+        if (this.connectionType.isNotVanilla() && net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onModdedPacketAtClient(this, p_295727_)) {
+            return;
+        }
+        PacketUtils.ensureRunningOnSameThread(p_295727_, this, this.minecraft); //Neo: We move this here to ensure that only vanilla packets are handled on the main thread.
         if (p_295851_ instanceof PathfindingDebugPayload pathfindingdebugpayload) {
             this.minecraft
                 .debugRenderer
@@ -2267,7 +_,7 @@
     public void handleBundlePacket(ClientboundBundlePacket p_265195_) {
         PacketUtils.ensureRunningOnSameThread(p_265195_, this, this.minecraft);
 
-        for(Packet<ClientGamePacketListener> packet : p_265195_.subPackets()) {
+        for(Packet<? super ClientGamePacketListener> packet : p_265195_.subPackets()) {
             packet.handle(this);
         }
     }
@@ -2389,6 +_,8 @@
     }
 
     public void sendChat(String p_249888_) {
+        p_249888_ = net.neoforged.neoforge.client.ClientHooks.onClientSendMessage(p_249888_);
+        if (p_249888_.isEmpty()) return;
         Instant instant = Instant.now();
         long i = Crypt.SaltSupplier.getLong();
         LastSeenMessagesTracker.Update lastseenmessagestracker$update = this.lastSeenMessages.generateAndApplyUpdate();
@@ -2398,6 +_,7 @@
     }
 
     public void sendCommand(String p_250092_) {
+        if (net.neoforged.neoforge.client.ClientCommandHandler.runCommand(p_250092_)) return;
         Instant instant = Instant.now();
         long i = Crypt.SaltSupplier.getLong();
         LastSeenMessagesTracker.Update lastseenmessagestracker$update = this.lastSeenMessages.generateAndApplyUpdate();
@@ -2463,5 +_,9 @@
 
     public boolean isFeatureEnabled(FeatureFlagSet p_250605_) {
         return p_250605_.isSubsetOf(this.enabledFeatures());
+    }
+
+    public net.neoforged.neoforge.network.connection.ConnectionType getConnectionType() {
+        return connectionType;
     }
 }
