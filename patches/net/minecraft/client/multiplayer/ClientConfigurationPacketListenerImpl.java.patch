--- a/net/minecraft/client/multiplayer/ClientConfigurationPacketListenerImpl.java
+++ b/net/minecraft/client/multiplayer/ClientConfigurationPacketListenerImpl.java
@@ -44,6 +_,9 @@
     private KnownPacksManager knownPacks;
     @Nullable
     protected ChatComponent.State chatState;
+    private net.neoforged.neoforge.network.connection.ConnectionType connectionType = net.neoforged.neoforge.network.connection.ConnectionType.OTHER;
+    private boolean initializedConnection = false;
+    private java.util.Map<net.minecraft.resources.ResourceLocation, net.minecraft.network.chat.Component> failureReasons = new java.util.HashMap<>();
 
     public ClientConfigurationPacketListenerImpl(Minecraft minecraft, Connection connection, CommonListenerCookie commonListenerCookie) {
         super(minecraft, connection, commonListenerCookie);
@@ -82,6 +_,11 @@
     @Override
     public void handleEnabledFeatures(ClientboundUpdateEnabledFeaturesPacket packet) {
         this.enabledFeatures = FeatureFlags.REGISTRY.fromNames(packet.features());
+        // Neo: Fallback detection layer for vanilla servers
+        if (this.connectionType.isOther()) {
+            this.initializedConnection = true;
+            net.neoforged.neoforge.network.registration.NetworkRegistry.initializeOtherConnection(this);
+        }
     }
 
     @Override
@@ -121,7 +_,7 @@
         );
         this.connection
             .setupInboundProtocol(
-                GameProtocols.CLIENTBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(registryaccess$frozen)),
+                GameProtocols.CLIENTBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(registryaccess$frozen, this.connectionType)),
                 new ClientPacketListener(
                     this.minecraft,
                     this.connection,
@@ -137,12 +_,19 @@
                         this.chatState,
                         this.strictErrorHandling,
                         this.customReportDetails,
-                        this.serverLinks
+                        this.serverLinks,
+                        this.connectionType
                     )
                 )
             );
+        // Packets can only be sent after the outbound protocol is set up again
+        if (!this.initializedConnection && this.connectionType.isOther()) {
+            // Neo: Fallback detection for servers with a delayed brand payload (BungeeCord)
+            net.neoforged.neoforge.network.registration.NetworkRegistry.initializeOtherConnection(this);
+        }
+        net.neoforged.neoforge.network.registration.NetworkRegistry.onConfigurationFinished(this);
         this.connection.send(ServerboundFinishConfigurationPacket.INSTANCE);
-        this.connection.setupOutboundProtocol(GameProtocols.SERVERBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(registryaccess$frozen)));
+        this.connection.setupOutboundProtocol(GameProtocols.SERVERBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(registryaccess$frozen, this.connectionType)));
     }
 
     @Override
@@ -154,5 +_,51 @@
     public void onDisconnect(DisconnectionDetails details) {
         super.onDisconnect(details);
         this.minecraft.clearDownloadedResourcePacks();
+    }
+
+    @Override
+    public void handleCustomPayload(net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket packet) {
+        // Handle the query payload by responding with the client's network channels. Update the connection type accordingly.
+        if (packet.payload() instanceof net.neoforged.neoforge.network.payload.ModdedNetworkQueryPayload) {
+            this.connectionType = net.neoforged.neoforge.network.connection.ConnectionType.NEOFORGE;
+            net.neoforged.neoforge.network.registration.NetworkRegistry.onNetworkQuery(this);
+            return;
+        }
+
+        // Receiving a modded network payload implies a successful negotiation by the server.
+        if (packet.payload() instanceof net.neoforged.neoforge.network.payload.ModdedNetworkPayload moddedNetworkPayload) {
+            this.initializedConnection = true;
+            net.neoforged.neoforge.network.registration.NetworkRegistry.initializeNeoForgeConnection(this, moddedNetworkPayload.setup());
+            return;
+        }
+
+        // Receiving a setup failed payload will be followed by a disconnect from the server, so we don't need to disconnect manually here.
+        if (packet.payload() instanceof net.neoforged.neoforge.network.payload.ModdedNetworkSetupFailedPayload setupFailedPayload) {
+            failureReasons = setupFailedPayload.failureReasons();
+            return;
+        }
+
+        // Receiving a brand payload without having transitioned to a Neo connection implies a non-modded connection has begun.
+        if (this.connectionType.isOther() && packet.payload() instanceof net.minecraft.network.protocol.common.custom.BrandPayload) {
+            this.initializedConnection = true;
+            net.neoforged.neoforge.network.registration.NetworkRegistry.initializeOtherConnection(this);
+            // Continue processing the brand payload
+        }
+
+        // Fallback to super for un/register, modded, and vanilla payloads.
+        super.handleCustomPayload(packet);
+    }
+
+    @Override
+    protected net.minecraft.client.gui.screens.Screen createDisconnectScreen(DisconnectionDetails details) {
+        final net.minecraft.client.gui.screens.Screen superScreen = super.createDisconnectScreen(details);
+        if (failureReasons.isEmpty())
+            return superScreen;
+
+        return new net.neoforged.neoforge.client.gui.ModMismatchDisconnectedScreen(superScreen, net.minecraft.network.chat.Component.translatable("disconnect.lost"), failureReasons);
+    }
+
+    public net.neoforged.neoforge.network.connection.ConnectionType getConnectionType() {
+        return connectionType;
     }
 }
