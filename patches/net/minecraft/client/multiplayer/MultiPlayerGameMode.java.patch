--- a/net/minecraft/client/multiplayer/MultiPlayerGameMode.java
+++ b/net/minecraft/client/multiplayer/MultiPlayerGameMode.java
@@ -119,11 +_,12 @@
                 } else if (blockstate.isAir()) {
                     return false;
                 } else {
+                    BlockState removedBlockState =
                     block.playerWillDestroy(level, pos, blockstate, this.minecraft.player);
                     FluidState fluidstate = level.getFluidState(pos);
-                    boolean flag = level.setBlock(pos, fluidstate.createLegacyBlock(), 11);
+                    boolean flag = blockstate.onDestroyedByPlayer(level, pos, minecraft.player, false, fluidstate);
                     if (flag) {
-                        block.destroy(level, pos, blockstate);
+                        block.destroy(level, pos, removedBlockState);
                     }
 
                     return flag;
@@ -142,6 +_,7 @@
                 BlockState blockstate = this.minecraft.level.getBlockState(loc);
                 this.minecraft.getTutorial().onDestroyBlock(this.minecraft.level, loc, blockstate, 1.0F);
                 this.startPrediction(this.minecraft.level, p_233757_ -> {
+                    if (!net.neoforged.neoforge.common.CommonHooks.onLeftClickBlock(this.minecraft.player, loc, face, ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK).isCanceled())
                     this.destroyBlock(loc);
                     return new ServerboundPlayerActionPacket(ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK, loc, face, p_233757_);
                 });
@@ -151,15 +_,19 @@
                     this.connection
                         .send(new ServerboundPlayerActionPacket(ServerboundPlayerActionPacket.Action.ABORT_DESTROY_BLOCK, this.destroyBlockPos, face));
                 }
+                net.neoforged.neoforge.event.entity.player.PlayerInteractEvent.LeftClickBlock event = net.neoforged.neoforge.common.CommonHooks.onLeftClickBlock(this.minecraft.player, loc, face, ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK);
 
                 BlockState blockstate1 = this.minecraft.level.getBlockState(loc);
                 this.minecraft.getTutorial().onDestroyBlock(this.minecraft.level, loc, blockstate1, 0.0F);
                 this.startPrediction(this.minecraft.level, p_233728_ -> {
                     boolean flag = !blockstate1.isAir();
                     if (flag && this.destroyProgress == 0.0F) {
+                        if (event.getUseBlock() != net.neoforged.neoforge.common.util.TriState.FALSE)
                         blockstate1.attack(this.minecraft.level, loc, this.minecraft.player);
                     }
 
+                    ServerboundPlayerActionPacket packet = new ServerboundPlayerActionPacket(ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK, loc, face, p_233728_);
+                    if (event.getUseItem().isFalse()) return packet;
                     if (flag && blockstate1.getDestroyProgress(this.minecraft.player, this.minecraft.player.level(), loc) >= 1.0F) {
                         this.destroyBlock(loc);
                     } else {
@@ -171,7 +_,7 @@
                         this.minecraft.level.destroyBlockProgress(this.minecraft.player.getId(), this.destroyBlockPos, this.getDestroyStage());
                     }
 
-                    return new ServerboundPlayerActionPacket(ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK, loc, face, p_233728_);
+                    return packet;
                 });
             }
 
@@ -202,6 +_,7 @@
             BlockState blockstate1 = this.minecraft.level.getBlockState(posBlock);
             this.minecraft.getTutorial().onDestroyBlock(this.minecraft.level, posBlock, blockstate1, 1.0F);
             this.startPrediction(this.minecraft.level, p_233753_ -> {
+                if (!net.neoforged.neoforge.common.CommonHooks.onLeftClickBlock(this.minecraft.player, posBlock, directionFacing, ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK).isCanceled())
                 this.destroyBlock(posBlock);
                 return new ServerboundPlayerActionPacket(ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK, posBlock, directionFacing, p_233753_);
             });
@@ -214,7 +_,7 @@
             } else {
                 this.destroyProgress = this.destroyProgress + blockstate.getDestroyProgress(this.minecraft.player, this.minecraft.player.level(), posBlock);
                 if (this.destroyTicks % 4.0F == 0.0F) {
-                    SoundType soundtype = blockstate.getSoundType();
+                    SoundType soundtype = blockstate.getSoundType(this.minecraft.level, posBlock, this.minecraft.player);
                     this.minecraft
                         .getSoundManager()
                         .play(
@@ -231,6 +_,7 @@
 
                 this.destroyTicks++;
                 this.minecraft.getTutorial().onDestroyBlock(this.minecraft.level, posBlock, blockstate, Mth.clamp(this.destroyProgress, 0.0F, 1.0F));
+                if (net.neoforged.neoforge.common.CommonHooks.onClientMineHold(this.minecraft.player, posBlock, directionFacing).getUseItem().isFalse()) return true;
                 if (this.destroyProgress >= 1.0F) {
                     this.isDestroying = false;
                     this.startPrediction(this.minecraft.level, p_233739_ -> {
@@ -269,7 +_,7 @@
 
     private boolean sameDestroyTarget(BlockPos pos) {
         ItemStack itemstack = this.minecraft.player.getMainHandItem();
-        return pos.equals(this.destroyBlockPos) && ItemStack.isSameItemSameComponents(itemstack, this.destroyingItem);
+        return pos.equals(this.destroyBlockPos) && !destroyingItem.shouldCauseBlockBreakReset(itemstack);
     }
 
     private void ensureHasSentCarriedItem() {
@@ -297,12 +_,23 @@
     private InteractionResult performUseItemOn(LocalPlayer player, InteractionHand hand, BlockHitResult result) {
         BlockPos blockpos = result.getBlockPos();
         ItemStack itemstack = player.getItemInHand(hand);
+        net.neoforged.neoforge.event.entity.player.PlayerInteractEvent.RightClickBlock event = net.neoforged.neoforge.common.CommonHooks.onRightClickBlock(player, hand, blockpos, result);
+        if (event.isCanceled()) {
+            return event.getCancellationResult();
+        }
         if (this.localPlayerMode == GameType.SPECTATOR) {
             return InteractionResult.SUCCESS;
         } else {
-            boolean flag = !player.getMainHandItem().isEmpty() || !player.getOffhandItem().isEmpty();
+            UseOnContext useoncontext = new UseOnContext(player, hand, result);
+            if (event.getUseItem() != net.neoforged.neoforge.common.util.TriState.FALSE) {
+                InteractionResult res = itemstack.onItemUseFirst(useoncontext);
+                if (res != InteractionResult.PASS) {
+                    return res;
+                }
+            }
+            boolean flag = !player.getMainHandItem().doesSneakBypassUse(player.level(), blockpos, player) || !player.getOffhandItem().doesSneakBypassUse(player.level(), blockpos, player);
             boolean flag1 = player.isSecondaryUseActive() && flag;
-            if (!flag1) {
+            if (event.getUseBlock().isTrue() || (event.getUseBlock().isDefault() && !flag1)) {
                 BlockState blockstate = this.minecraft.level.getBlockState(blockpos);
                 if (!this.connection.isFeatureEnabled(blockstate.getBlock().requiredFeatures())) {
                     return InteractionResult.FAIL;
@@ -323,8 +_,10 @@
                 }
             }
 
-            if (!itemstack.isEmpty() && !player.getCooldowns().isOnCooldown(itemstack.getItem())) {
-                UseOnContext useoncontext = new UseOnContext(player, hand, result);
+            if (event.getUseItem().isFalse()) {
+                return InteractionResult.PASS;
+            }
+            if (event.getUseItem().isTrue() || (!itemstack.isEmpty() && !player.getCooldowns().isOnCooldown(itemstack.getItem()))) {
                 InteractionResult interactionresult1;
                 if (this.localPlayerMode.isCreative()) {
                     int i = itemstack.getCount();
@@ -358,10 +_,17 @@
                         mutableobject.setValue(InteractionResult.PASS);
                         return serverbounduseitempacket;
                     } else {
+                        InteractionResult cancelResult = net.neoforged.neoforge.common.CommonHooks.onItemRightClick(player, hand);
+                        if (cancelResult != null) {
+                            mutableobject.setValue(cancelResult);
+                            return serverbounduseitempacket;
+                        }
                         InteractionResultHolder<ItemStack> interactionresultholder = itemstack.use(this.minecraft.level, player, hand);
                         ItemStack itemstack1 = interactionresultholder.getObject();
                         if (itemstack1 != itemstack) {
                             player.setItemInHand(hand, itemstack1);
+                            if (itemstack1.isEmpty())
+                                net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(player, itemstack, hand);
                         }
 
                         mutableobject.setValue(interactionresultholder.getResult());
@@ -400,6 +_,9 @@
         this.ensureHasSentCarriedItem();
         Vec3 vec3 = ray.getLocation().subtract(target.getX(), target.getY(), target.getZ());
         this.connection.send(ServerboundInteractPacket.createInteractionPacket(target, player.isShiftKeyDown(), hand, vec3));
+        if (this.localPlayerMode == GameType.SPECTATOR) return InteractionResult.PASS; // don't fire for spectators to match non-specific EntityInteract
+        InteractionResult cancelResult = net.neoforged.neoforge.common.CommonHooks.onInteractEntityAt(player, target, ray, hand);
+        if(cancelResult != null) return cancelResult;
         return this.localPlayerMode == GameType.SPECTATOR ? InteractionResult.PASS : target.interactAt(player, vec3, hand);
     }
 
