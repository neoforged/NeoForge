--- a/net/minecraft/client/multiplayer/ClientCommonPacketListenerImpl.java
+++ b/net/minecraft/client/multiplayer/ClientCommonPacketListenerImpl.java
@@ -84,6 +_,10 @@
     protected final Map<ResourceLocation, byte[]> serverCookies;
     protected Map<String, String> customReportDetails;
     protected ServerLinks serverLinks;
+    /**
+     * Holds the current connection type, based on the types of payloads that have been received so far.
+     */
+    protected net.neoforged.neoforge.network.connection.ConnectionType connectionType = net.neoforged.neoforge.network.connection.ConnectionType.OTHER;
 
     protected ClientCommonPacketListenerImpl(Minecraft p_295454_, Connection p_294773_, CommonListenerCookie p_294647_) {
         this.minecraft = p_295454_;
@@ -95,6 +_,8 @@
         this.serverCookies = p_294647_.serverCookies();
         this.customReportDetails = p_294647_.customReportDetails();
         this.serverLinks = p_294647_.serverLinks();
+        // Neo: Set the connection type based on the cookie from the previous phase.
+        this.connectionType = p_294647_.connectionType();
     }
 
     @Override
@@ -142,6 +_,33 @@
 
     @Override
     public void handleCustomPayload(ClientboundCustomPayloadPacket p_295727_) {
+        // Neo: Unconditionally handle register/unregister payloads.
+        if (p_295727_.payload() instanceof net.neoforged.neoforge.network.payload.MinecraftRegisterPayload minecraftRegisterPayload) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.onMinecraftRegister(this.getConnection(), minecraftRegisterPayload.newChannels());
+            return;
+        }
+
+        if (p_295727_.payload() instanceof net.neoforged.neoforge.network.payload.MinecraftUnregisterPayload minecraftUnregisterPayload) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.onMinecraftUnregister(this.getConnection(), minecraftUnregisterPayload.forgottenChannels());
+            return;
+        }
+
+        if (p_295727_.payload() instanceof net.neoforged.neoforge.network.payload.CommonVersionPayload commonVersionPayload) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.checkCommonVersion(this, commonVersionPayload);
+            return;
+        }
+
+        if (p_295727_.payload() instanceof net.neoforged.neoforge.network.payload.CommonRegisterPayload commonRegisterPayload) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.onCommonRegister(this, commonRegisterPayload);
+            return;
+        }
+
+        // Neo: Handle modded payloads. Vanilla payloads do not get sent to the modded handling pass. Additional payloads cannot be registered in the minecraft domain.
+        if (net.neoforged.neoforge.network.registration.NetworkRegistry.isModdedPayload(p_295727_.payload())) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.handleModdedPayload(this, p_295727_);
+            return;
+        }
+
         CustomPacketPayload custompacketpayload = p_295727_.payload();
         if (!(custompacketpayload instanceof DiscardedPayload)) {
             PacketUtils.ensureRunningOnSameThread(p_295727_, this, this.minecraft);
@@ -278,6 +_,8 @@
     }
 
     public void send(Packet<?> p_295097_) {
+        // Neo: Validate modded payloads before sending.
+        net.neoforged.neoforge.network.registration.NetworkRegistry.checkPacket(p_295097_, this);
         this.connection.send(p_295097_);
     }
 
@@ -285,6 +_,9 @@
     public void onDisconnect(DisconnectionDetails p_350760_) {
         this.telemetryManager.onDisconnect();
         this.minecraft.disconnect(this.createDisconnectScreen(p_350760_), this.isTransferring);
+        if (!this.connection.isMemoryConnection()) {
+            net.neoforged.neoforge.registries.RegistryManager.revertToFrozen();
+        }
         LOGGER.warn("Client disconnected with reason: {}", p_350760_.reason().getString());
     }
 
@@ -409,5 +_,10 @@
         @OnlyIn(Dist.CLIENT)
         static record PendingRequest(UUID id, URL url, String hash) {
         }
+    }
+
+    @Override
+    public Connection getConnection() {
+        return connection;
     }
 }
