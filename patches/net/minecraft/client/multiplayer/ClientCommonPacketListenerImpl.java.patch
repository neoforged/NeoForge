--- a/net/minecraft/client/multiplayer/ClientCommonPacketListenerImpl.java
+++ b/net/minecraft/client/multiplayer/ClientCommonPacketListenerImpl.java
@@ -98,17 +_,17 @@
     public void handleCustomPayload(ClientboundCustomPayloadPacket p_295727_) {
         CustomPacketPayload custompacketpayload = p_295727_.payload();
         if (!(custompacketpayload instanceof DiscardedPayload)) {
-            PacketUtils.ensureRunningOnSameThread(p_295727_, this, this.minecraft);
             if (custompacketpayload instanceof BrandPayload brandpayload) {
+                PacketUtils.ensureRunningOnSameThread(p_295727_, this, this.minecraft);
                 this.serverBrand = brandpayload.brand();
                 this.telemetryManager.onServerBrandReceived(brandpayload.brand());
             } else {
-                this.handleCustomPayload(custompacketpayload);
+                this.handleCustomPayload(p_295727_, custompacketpayload);
             }
         }
     }
 
-    protected abstract void handleCustomPayload(CustomPacketPayload p_295776_);
+    protected abstract void handleCustomPayload(ClientboundCustomPayloadPacket p_295727_, CustomPacketPayload p_295776_);
 
     @Override
     public void handleResourcePackPush(ClientboundResourcePackPushPacket p_314606_) {
@@ -212,6 +_,10 @@
     }
 
     public void send(Packet<?> p_295097_) {
+        if (!net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().canSendPacket(p_295097_, this)) {
+            return;
+        }
+
         this.connection.send(p_295097_);
     }
 
@@ -219,6 +_,9 @@
     public void onDisconnect(Component p_295485_) {
         this.telemetryManager.onDisconnect();
         this.minecraft.disconnect(this.createDisconnectScreen(p_295485_), this.keepResourcePacks);
+        if (!this.connection.isMemoryConnection()) {
+            net.neoforged.neoforge.registries.RegistryManager.revertToFrozen();
+        }
         LOGGER.warn("Client disconnected with reason: {}", p_295485_.getString());
     }
 
@@ -338,5 +_,15 @@
         @OnlyIn(Dist.CLIENT)
         static record PendingRequest(UUID id, URL url, String hash) {
         }
+    }
+
+    @Override
+    public Connection getConnection() {
+        return connection;
+    }
+
+    @Override
+    public Minecraft getMinecraft() {
+        return minecraft;
     }
 }
