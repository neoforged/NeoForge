--- a/net/minecraft/client/multiplayer/ClientLevel.java
+++ b/net/minecraft/client/multiplayer/ClientLevel.java
@@ -121,6 +_,7 @@
             p_194170_.put(
                 BiomeColors.WATER_COLOR_RESOLVER, new BlockTintCache(p_194168_ -> this.calculateBlockTint(p_194168_, BiomeColors.WATER_COLOR_RESOLVER))
             );
+            net.neoforged.neoforge.client.ColorResolverManager.registerBlockTintCaches(ClientLevel.this, p_194170_);
         }
     );
     private final ClientChunkCache chunkSource;
@@ -128,6 +_,8 @@
     private int serverSimulationDistance;
     private final BlockStatePredictionHandler blockStatePredictionHandler = new BlockStatePredictionHandler();
     private static final Set<Item> MARKER_PARTICLE_ITEMS = Set.of(Items.BARRIER, Items.LIGHT);
+    private final it.unimi.dsi.fastutil.ints.Int2ObjectMap<net.neoforged.neoforge.entity.PartEntity<?>> partEntities = new it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap<>();
+    private final net.neoforged.neoforge.client.model.data.ModelDataManager modelDataManager = new net.neoforged.neoforge.client.model.data.ModelDataManager(this);
 
     public void handleBlockChangedAck(int sequence) {
         this.blockStatePredictionHandler.endPredictionsUpTo(sequence, this);
@@ -157,10 +_,15 @@
     @Override
     public boolean setBlock(BlockPos pos, BlockState state, int flags, int recursionLeft) {
         if (this.blockStatePredictionHandler.isPredicting()) {
+            // Neo: Record and store a snapshot in the prediction so that BE data can be restored if the break is denied.
+            // Fixes MC-36093 and permits correct server-side only cancellation of block changes.
+            var snapshot = net.neoforged.neoforge.common.util.BlockSnapshot.create(this.dimension(), this, pos, flags);
+
             BlockState blockstate = this.getBlockState(pos);
             boolean flag = super.setBlock(pos, state, flags, recursionLeft);
             if (flag) {
                 this.blockStatePredictionHandler.retainKnownServerState(pos, blockstate, this.minecraft.player);
+                this.blockStatePredictionHandler.retainSnapshot(pos, snapshot);
             }
 
             return flag;
@@ -192,6 +_,7 @@
         this.serverSimulationDistance = serverSimulationDistance;
         this.updateSkyBrightness();
         this.prepareWeather();
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Load(this));
     }
 
     public void queueLightUpdate(Runnable task) {
@@ -282,7 +_,11 @@
         p_entity.setOldPosAndRot();
         p_entity.tickCount++;
         this.getProfiler().push(() -> BuiltInRegistries.ENTITY_TYPE.getKey(p_entity.getType()).toString());
-        p_entity.tick();
+        // Neo: Permit cancellation of Entity#tick via EntityTickEvent.Pre
+        if (!net.neoforged.neoforge.event.EventHooks.fireEntityTickPre(p_entity).isCanceled()) {
+            p_entity.tick();
+            net.neoforged.neoforge.event.EventHooks.fireEntityTickPost(p_entity);
+        }
         this.getProfiler().pop();
 
         for (Entity entity : p_entity.getPassengers()) {
@@ -330,8 +_,10 @@
     }
 
     public void addEntity(Entity entity) {
+        if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityJoinLevelEvent(entity, this)).isCanceled()) return;
         this.removeEntity(entity.getId(), Entity.RemovalReason.DISCARDED);
         this.entityStorage.addEntity(entity);
+        entity.onAddedToLevel();
     }
 
     public void removeEntity(int entityId, Entity.RemovalReason reason) {
@@ -502,6 +_,13 @@
         float pitch,
         long seed
     ) {
+        net.neoforged.neoforge.event.PlayLevelSoundEvent.AtPosition event = net.neoforged.neoforge.event.EventHooks.onPlaySoundAtPosition(this, x, y, z, sound, category, volume, pitch);
+        if (event.isCanceled() || event.getSound() == null) return;
+        sound = event.getSound();
+        category = event.getSource();
+        volume = event.getNewVolume();
+        pitch = event.getNewPitch();
+
         if (player == this.minecraft.player) {
             this.playSound(x, y, z, sound.value(), category, volume, pitch, false, seed);
         }
@@ -511,6 +_,12 @@
     public void playSeededSound(
         @Nullable Player player, Entity entity, Holder<SoundEvent> sound, SoundSource category, float volume, float pitch, long seed
     ) {
+        net.neoforged.neoforge.event.PlayLevelSoundEvent.AtEntity event = net.neoforged.neoforge.event.EventHooks.onPlaySoundAtEntity(entity, sound, category, volume, pitch);
+        if (event.isCanceled() || event.getSound() == null) return;
+        sound = event.getSound();
+        category = event.getSource();
+        volume = event.getNewVolume();
+        pitch = event.getNewPitch();
         if (player == this.minecraft.player) {
             this.minecraft.getSoundManager().play(new EntityBoundSoundInstance(sound.value(), category, volume, pitch, entity, seed));
         }
@@ -1033,6 +_,7 @@
         }
 
         public void setDifficulty(Difficulty difficulty) {
+            net.neoforged.neoforge.common.CommonHooks.onDifficultyChange(difficulty, this.difficulty);
             this.difficulty = difficulty;
         }
 
@@ -1069,14 +_,51 @@
             if (p_171712_ instanceof AbstractClientPlayer) {
                 ClientLevel.this.players.add((AbstractClientPlayer)p_171712_);
             }
+            if (p_171712_.isMultipartEntity()) {
+                for (net.neoforged.neoforge.entity.PartEntity<?> part : p_171712_.getParts()) {
+                    ClientLevel.this.partEntities.put(part.getId(), part);
+                }
+            }
         }
 
         public void onTrackingEnd(Entity p_171716_) {
             p_171716_.unRide();
             ClientLevel.this.players.remove(p_171716_);
+
+            p_171716_.onRemovedFromLevel();
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityLeaveLevelEvent(p_171716_, ClientLevel.this));
+
+            if (p_171716_.isMultipartEntity()) {
+                for (net.neoforged.neoforge.entity.PartEntity<?> part : p_171716_.getParts()) {
+                    ClientLevel.this.partEntities.remove(part.getId());
+                }
+            }
         }
 
         public void onSectionChange(Entity p_233660_) {
         }
+    }
+
+    @Override
+    public java.util.Collection<net.neoforged.neoforge.entity.PartEntity<?>> getPartEntities() {
+        return this.partEntities.values();
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.model.data.ModelDataManager getModelDataManager() {
+        return modelDataManager;
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.model.data.ModelData getModelData(BlockPos pos) {
+        return modelDataManager.getAt(pos);
+    }
+
+    @Override
+    public float getShade(float normalX, float normalY, float normalZ, boolean shade) {
+        boolean constantAmbientLight = this.effects().constantAmbientLight();
+        if (!shade)
+            return constantAmbientLight ? 0.9F : 1.0F;
+        return net.neoforged.neoforge.client.model.lighting.QuadLighter.calculateShade(normalX, normalY, normalZ, constantAmbientLight);
     }
 }
