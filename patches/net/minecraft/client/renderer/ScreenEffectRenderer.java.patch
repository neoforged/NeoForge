--- a/net/minecraft/client/renderer/ScreenEffectRenderer.java
+++ b/net/minecraft/client/renderer/ScreenEffectRenderer.java
@@ -30,18 +_,22 @@
     public static void renderScreenEffect(Minecraft minecraft, PoseStack poseStack) {
         Player player = minecraft.player;
         if (!player.noPhysics) {
-            BlockState blockstate = getViewBlockingState(player);
-            if (blockstate != null) {
-                renderTex(minecraft.getBlockRenderer().getBlockModelShaper().getParticleIcon(blockstate), poseStack);
+            org.apache.commons.lang3.tuple.Pair<BlockState, BlockPos> overlay = getOverlayBlock(player);
+            if (overlay != null) {
+                if (!net.neoforged.neoforge.client.ClientHooks.renderBlockOverlay(player, poseStack, net.neoforged.neoforge.client.event.RenderBlockScreenEffectEvent.OverlayType.BLOCK, overlay.getLeft(), overlay.getRight()))
+                    renderTex(minecraft.getBlockRenderer().getBlockModelShaper().getTexture(overlay.getLeft(), minecraft.level, overlay.getRight()), poseStack);
             }
         }
 
         if (!minecraft.player.isSpectator()) {
             if (minecraft.player.isEyeInFluid(FluidTags.WATER)) {
+                if (!net.neoforged.neoforge.client.ClientHooks.renderWaterOverlay(player, poseStack))
                 renderWater(minecraft, poseStack);
             }
+            else if (!player.getEyeInFluidType().isAir()) net.neoforged.neoforge.client.extensions.common.IClientFluidTypeExtensions.of(player.getEyeInFluidType()).renderOverlay(minecraft, poseStack);
 
             if (minecraft.player.isOnFire()) {
+                if (!net.neoforged.neoforge.client.ClientHooks.renderFireOverlay(player, poseStack))
                 renderFire(minecraft, poseStack);
             }
         }
@@ -49,6 +_,11 @@
 
     @Nullable
     private static BlockState getViewBlockingState(Player player) {
+        return getOverlayBlock(player).getLeft();
+    }
+
+    @Nullable
+    private static org.apache.commons.lang3.tuple.Pair<BlockState, BlockPos> getOverlayBlock(Player player) {
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
         for (int i = 0; i < 8; i++) {
@@ -58,7 +_,7 @@
             blockpos$mutableblockpos.set(d0, d1, d2);
             BlockState blockstate = player.level().getBlockState(blockpos$mutableblockpos);
             if (blockstate.getRenderShape() != RenderShape.INVISIBLE && blockstate.isViewBlocking(player.level(), blockpos$mutableblockpos)) {
-                return blockstate;
+                return org.apache.commons.lang3.tuple.Pair.of(blockstate, blockpos$mutableblockpos.immutable());
             }
         }
 
@@ -88,8 +_,12 @@
     }
 
     private static void renderWater(Minecraft minecraft, PoseStack poseStack) {
+        renderFluid(minecraft, poseStack, UNDERWATER_LOCATION);
+    }
+
+    public static void renderFluid(Minecraft minecraft, PoseStack poseStack, ResourceLocation texture) {
         RenderSystem.setShader(GameRenderer::getPositionTexShader);
-        RenderSystem.setShaderTexture(0, UNDERWATER_LOCATION);
+        RenderSystem.setShaderTexture(0, texture);
         BlockPos blockpos = BlockPos.containing(minecraft.player.getX(), minecraft.player.getEyeY(), minecraft.player.getZ());
         float f = LightTexture.getBrightness(minecraft.player.level().dimensionType(), minecraft.player.level().getMaxLocalRawBrightness(blockpos));
         RenderSystem.enableBlend();
