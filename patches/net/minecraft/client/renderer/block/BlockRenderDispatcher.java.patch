--- a/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
+++ b/net/minecraft/client/renderer/block/BlockRenderDispatcher.java
@@ -37,7 +_,7 @@
         this.blockModelShaper = blockModelShaper;
         this.blockEntityRenderer = blockEntityRenderer;
         this.blockColors = blockColors;
-        this.modelRenderer = new ModelBlockRenderer(this.blockColors);
+        this.modelRenderer = new net.neoforged.neoforge.client.model.lighting.LightPipelineAwareModelBlockRenderer(this.blockColors);
         this.liquidBlockRenderer = new LiquidBlockRenderer();
     }
 
@@ -45,13 +_,30 @@
         return this.blockModelShaper;
     }
 
+    @Deprecated //Forge: Model data parameter
     public void renderBreakingTexture(BlockState state, BlockPos pos, BlockAndTintGetter level, PoseStack poseStack, VertexConsumer consumer) {
+         renderBreakingTexture(state, pos, level, poseStack, consumer, net.neoforged.neoforge.client.model.data.ModelData.EMPTY);
+    }
+    public void renderBreakingTexture(BlockState state, BlockPos pos, BlockAndTintGetter level, PoseStack poseStack, VertexConsumer consumer, net.neoforged.neoforge.client.model.data.ModelData modelData) {
         if (state.getRenderShape() == RenderShape.MODEL) {
             BakedModel bakedmodel = this.blockModelShaper.getBlockModel(state);
             long i = state.getSeed(pos);
+            modelData = bakedmodel.getModelData(level, pos, state, modelData);
             this.modelRenderer
-                .tesselateBlock(level, bakedmodel, state, pos, poseStack, consumer, true, this.random, i, OverlayTexture.NO_OVERLAY);
+                .tesselateBlock(level, bakedmodel, state, pos, poseStack, consumer, true, this.random, i, OverlayTexture.NO_OVERLAY, modelData, null);
         }
+    }
+
+    public void renderBatched(
+            BlockState state,
+            BlockPos pos,
+            BlockAndTintGetter level,
+            PoseStack poseStack,
+            VertexConsumer consumer,
+            boolean checkSides,
+            RandomSource random
+    ) {
+        renderBatched(state, pos, level, poseStack, consumer, checkSides, random, net.neoforged.neoforge.client.model.data.ModelData.EMPTY, null);
     }
 
     public void renderBatched(
@@ -61,7 +_,9 @@
         PoseStack poseStack,
         VertexConsumer consumer,
         boolean checkSides,
-        RandomSource random
+        RandomSource random,
+        net.neoforged.neoforge.client.model.data.ModelData modelData,
+        net.minecraft.client.renderer.RenderType renderType
     ) {
         try {
             this.modelRenderer
@@ -75,7 +_,9 @@
                     checkSides,
                     random,
                     state.getSeed(pos),
-                    OverlayTexture.NO_OVERLAY
+                    OverlayTexture.NO_OVERLAY,
+                    modelData,
+                    renderType
                 );
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Tesselating block in world");
@@ -87,6 +_,7 @@
 
     public void renderLiquid(BlockPos pos, BlockAndTintGetter level, VertexConsumer consumer, BlockState blockState, FluidState fluidState) {
         try {
+            if (net.neoforged.neoforge.client.extensions.common.IClientFluidTypeExtensions.of(fluidState).renderFluid(fluidState, level, pos, consumer, blockState)) return;
             this.liquidBlockRenderer.tesselate(level, pos, consumer, blockState, fluidState);
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Tesselating liquid in world");
@@ -104,7 +_,11 @@
         return this.blockModelShaper.getBlockModel(state);
     }
 
+    @Deprecated //Forge: Model data and render type parameter
     public void renderSingleBlock(BlockState state, PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, int packedOverlay) {
+        renderSingleBlock(state, poseStack, bufferSource, packedLight, packedOverlay, net.neoforged.neoforge.client.model.data.ModelData.EMPTY, null);
+    }
+    public void renderSingleBlock(BlockState state, PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, int packedOverlay, net.neoforged.neoforge.client.model.data.ModelData modelData, net.minecraft.client.renderer.RenderType renderType) {
         RenderShape rendershape = state.getRenderShape();
         if (rendershape != RenderShape.INVISIBLE) {
             switch (rendershape) {
@@ -114,22 +_,25 @@
                     float f = (float)(i >> 16 & 0xFF) / 255.0F;
                     float f1 = (float)(i >> 8 & 0xFF) / 255.0F;
                     float f2 = (float)(i & 0xFF) / 255.0F;
+                    for (net.minecraft.client.renderer.RenderType rt : bakedmodel.getRenderTypes(state, RandomSource.create(42), modelData))
                     this.modelRenderer
                         .renderModel(
                             poseStack.last(),
-                            bufferSource.getBuffer(ItemBlockRenderTypes.getRenderType(state, false)),
+                            bufferSource.getBuffer(renderType != null ? renderType : net.neoforged.neoforge.client.RenderTypeHelper.getEntityRenderType(rt, false)),
                             state,
                             bakedmodel,
                             f,
                             f1,
                             f2,
                             packedLight,
-                            packedOverlay
+                            packedOverlay,
+                            modelData,
+                            rt
                         );
                     break;
                 case ENTITYBLOCK_ANIMATED:
-                    this.blockEntityRenderer
-                        .renderByItem(new ItemStack(state.getBlock()), ItemDisplayContext.NONE, poseStack, bufferSource, packedLight, packedOverlay);
+                    ItemStack stack = new ItemStack(state.getBlock());
+                    net.neoforged.neoforge.client.extensions.common.IClientItemExtensions.of(stack).getCustomRenderer().renderByItem(stack, ItemDisplayContext.NONE, poseStack, bufferSource, packedLight, packedOverlay);
             }
         }
     }
@@ -137,5 +_,9 @@
     @Override
     public void onResourceManagerReload(ResourceManager resourceManager) {
         this.liquidBlockRenderer.setupSprites();
+    }
+
+    public LiquidBlockRenderer getLiquidBlockRenderer() {
+        return this.liquidBlockRenderer;
     }
 }
