--- a/net/minecraft/client/renderer/block/model/BakedOverrides.java
+++ b/net/minecraft/client/renderer/block/model/BakedOverrides.java
@@ -29,7 +_,15 @@
         this.properties = new ResourceLocation[0];
     }
 
+    /**
+     * @deprecated Neo: Use {@link #BakedOverrides(ModelBaker, List, java.util.function.Function)}
+     */
+    @Deprecated
     public BakedOverrides(ModelBaker p_371950_, List<ItemOverride> p_371198_) {
+        this(p_371950_, p_371198_, p_371950_.getModelTextureGetter());
+    }
+
+    public BakedOverrides(ModelBaker p_371950_, List<ItemOverride> p_371198_, java.util.function.Function<net.minecraft.client.resources.model.Material, net.minecraft.client.renderer.texture.TextureAtlasSprite> spriteGetter) {
         this.properties = p_371198_.stream()
             .flatMap(p_371945_ -> p_371945_.predicates().stream())
             .map(ItemOverride.Predicate::property)
@@ -45,7 +_,7 @@
 
         for (int j = p_371198_.size() - 1; j >= 0; j--) {
             ItemOverride itemoverride = p_371198_.get(j);
-            BakedModel bakedmodel = p_371950_.bake(itemoverride.model(), BlockModelRotation.X0_Y0);
+            BakedModel bakedmodel = p_371950_.bake(itemoverride.model(), BlockModelRotation.X0_Y0, spriteGetter);
             BakedOverrides.PropertyMatcher[] abakedoverrides$propertymatcher = itemoverride.predicates().stream().map(p_371644_ -> {
                 int k = object2intmap.getInt(p_371644_.property());
                 return new BakedOverrides.PropertyMatcher(k, p_371644_.value());
@@ -80,6 +_,10 @@
         }
 
         return null;
+    }
+
+    public com.google.common.collect.ImmutableList<BakedOverride> getOverrides() {
+        return com.google.common.collect.ImmutableList.copyOf(overrides);
     }
 
     @OnlyIn(Dist.CLIENT)
