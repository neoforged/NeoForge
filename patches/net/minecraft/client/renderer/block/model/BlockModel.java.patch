--- a/net/minecraft/client/renderer/block/model/BlockModel.java
+++ b/net/minecraft/client/renderer/block/model/BlockModel.java
@@ -72,9 +_,10 @@
     public BlockModel parent;
     @Nullable
     protected ResourceLocation parentLocation;
+    public final net.neoforged.neoforge.client.model.geometry.BlockGeometryBakingContext customData = new net.neoforged.neoforge.client.model.geometry.BlockGeometryBakingContext(this);
 
     public static BlockModel fromStream(Reader p_111462_) {
-        return GsonHelper.fromJson(GSON, p_111462_, BlockModel.class);
+        return GsonHelper.fromJson(net.neoforged.neoforge.client.model.ExtendedBlockModelDeserializer.INSTANCE, p_111462_, BlockModel.class);
     }
 
     public BlockModel(
@@ -95,10 +_,15 @@
         this.overrides = p_273099_;
     }
 
+    @Deprecated
     public List<BlockElement> getElements() {
+        if (customData.hasCustomGeometry()) return java.util.Collections.emptyList();
         return this.elements.isEmpty() && this.parent != null ? this.parent.getElements() : this.elements;
     }
 
+    @Nullable
+    public ResourceLocation getParentLocation() { return parentLocation; }
+
     public boolean hasAmbientOcclusion() {
         if (this.hasAmbientOcclusion != null) {
             return this.hasAmbientOcclusion;
@@ -132,10 +_,18 @@
 
             this.parent = blockmodel;
         }
+
+        if (customData.hasCustomGeometry()) {
+            customData.getCustomGeometry().resolveDependencies(p_361203_, customData);
+        }
     }
 
     @Override
     public BakedModel bake(ModelBaker p_252120_, Function<Material, TextureAtlasSprite> p_250023_, ModelState p_251130_) {
+        var customGeometry = this.customData.getCustomGeometry();
+        if (customGeometry != null) {
+            return customGeometry.bake(this.customData, p_252120_, p_250023_, p_251130_, this.overrides);
+        }
         return this.bake(p_250023_, p_251130_, true);
     }
 
@@ -146,6 +_,10 @@
         } else {
             SimpleBakedModel.Builder simplebakedmodel$builder = new SimpleBakedModel.Builder(this, p_111455_).particle(textureatlassprite);
 
+            if (!this.customData.getRootTransform().isIdentity()) {
+                p_111453_ = net.neoforged.neoforge.client.model.geometry.UnbakedGeometryHelper.composeRootTransformIntoModelState(p_111453_, this.customData.getRootTransform());
+            }
+
             for (BlockElement blockelement : this.getElements()) {
                 for (Direction direction : blockelement.faces.keySet()) {
                     BlockElementFace blockelementface = blockelement.faces.get(direction);
@@ -161,7 +_,11 @@
                 }
             }
 
-            return simplebakedmodel$builder.build();
+            var renderTypes = net.neoforged.neoforge.client.RenderTypeGroup.EMPTY;
+            if (this.customData.getRenderTypeHint() != null) {
+                renderTypes = this.customData.getRenderType(this.customData.getRenderTypeHint());
+            }
+            return simplebakedmodel$builder.build(renderTypes);
         }
     }
 
@@ -229,7 +_,18 @@
         ItemTransform itemtransform5 = this.getTransform(ItemDisplayContext.GUI);
         ItemTransform itemtransform6 = this.getTransform(ItemDisplayContext.GROUND);
         ItemTransform itemtransform7 = this.getTransform(ItemDisplayContext.FIXED);
-        return new ItemTransforms(itemtransform, itemtransform1, itemtransform2, itemtransform3, itemtransform4, itemtransform5, itemtransform6, itemtransform7);
+
+        var builder = com.google.common.collect.ImmutableMap.<ItemDisplayContext, ItemTransform>builder();
+        for(ItemDisplayContext type : ItemDisplayContext.values()) {
+            if (type.isModded()) {
+                var transform = this.getTransform(type);
+                if (transform != ItemTransform.NO_TRANSFORM) {
+                    builder.put(type, transform);
+                }
+            }
+        }
+
+        return new ItemTransforms(itemtransform, itemtransform1, itemtransform2, itemtransform3, itemtransform4, itemtransform5, itemtransform6, itemtransform7, builder.build());
     }
 
     private ItemTransform getTransform(ItemDisplayContext p_270662_) {
@@ -347,6 +_,10 @@
 
         public boolean lightLikeBlock() {
             return this == SIDE;
+        }
+
+        public String getSerializedName() {
+            return name;
         }
     }
 }
