--- a/net/minecraft/client/renderer/block/model/BlockModel.java
+++ b/net/minecraft/client/renderer/block/model/BlockModel.java
@@ -47,7 +_,8 @@
 import org.slf4j.Logger;
 
 @OnlyIn(Dist.CLIENT)
-public class BlockModel implements UnbakedModel {
+public class BlockModel implements UnbakedModel, net.neoforged.neoforge.client.resource.model.TopLevelUnbakedModel
+{
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final FaceBakery FACE_BAKERY = new FaceBakery();
     @VisibleForTesting
@@ -74,12 +_,12 @@
     @VisibleForTesting
     public final Map<String, Either<Material, String>> textureMap;
     @Nullable
-    public BlockModel parent;
+    public net.neoforged.neoforge.client.resource.model.TopLevelUnbakedModel parent;
     @Nullable
     protected ResourceLocation parentLocation;
 
     public static BlockModel fromStream(Reader p_111462_) {
-        return GsonHelper.fromJson(GSON, p_111462_, BlockModel.class);
+        return GsonHelper.fromJson(net.neoforged.neoforge.client.model.ExtendedBlockModelDeserializer.INSTANCE, p_111462_, BlockModel.class);
     }
 
     public static BlockModel fromString(String p_111464_) {
@@ -104,15 +_,69 @@
         this.overrides = p_273099_;
     }
 
+    @Override
+    public com.mojang.serialization.MapCodec<? extends net.neoforged.neoforge.client.resource.model.TopLevelUnbakedModel> codec() {
+        return net.neoforged.neoforge.client.resource.model.ModelCodecs.BLOCK_MODEL;
+    }
+
+    @Override
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.resource.model.TopLevelUnbakedModel getParent() {
+        return parent;
+    }
+
+    @Override
+    public void setParent(net.neoforged.neoforge.client.resource.model.TopLevelUnbakedModel parent) {
+        this.parent = parent;
+    }
+
+    @Override
+    public Map<String, Either<Material, String>> getOwnTextureMap() {
+        return this.textureMap;
+    }
+
+    @Override
+    public Boolean getOwnAmbientOcclusion() {
+        return this.hasAmbientOcclusion;
+    }
+
+    @Override
+    public BlockModel.GuiLight getOwnGuiLight() {
+        return this.guiLight;
+    }
+
+    @Override
+    public ItemTransforms getOwnTransforms() {
+        return this.transforms;
+    }
+
+    @Override
+    public List<ItemOverride> getOwnOverrides() {
+        return this.overrides;
+    }
+
+    @Deprecated
     public List<BlockElement> getElements() {
-        return this.elements.isEmpty() && this.parent != null ? this.parent.getElements() : this.elements;
+        return this.elements.isEmpty() && this.parent instanceof BlockModel blockModel ? blockModel.getElements() : this.elements;
+    }
+
+    @Nullable
+    public ResourceLocation getParentLocation() { return parentLocation; }
+
+    @Override
+    public void setParentLocation(@Nullable ResourceLocation parentLocation) {
+        this.parentLocation = parentLocation;
     }
 
     public boolean hasAmbientOcclusion() {
         if (this.hasAmbientOcclusion != null) {
             return this.hasAmbientOcclusion;
         } else {
-            return this.parent != null ? this.parent.hasAmbientOcclusion() : true;
+            return this.parent instanceof BlockModel blockModel ? blockModel.hasAmbientOcclusion() : true;
         }
     }
 
@@ -120,12 +_,12 @@
         if (this.guiLight != null) {
             return this.guiLight;
         } else {
-            return this.parent != null ? this.parent.getGuiLight() : BlockModel.GuiLight.SIDE;
+            return this.parent instanceof BlockModel blockModel ? blockModel.getGuiLight() : BlockModel.GuiLight.SIDE;
         }
     }
 
     public boolean isResolved() {
-        return this.parentLocation == null || this.parent != null && this.parent.isResolved();
+        return net.neoforged.neoforge.client.resource.model.TopLevelUnbakedModel.super.isResolved();
     }
 
     public List<ItemOverride> getOverrides() {
@@ -136,6 +_,10 @@
         return this.overrides.isEmpty() ? ItemOverrides.EMPTY : new ItemOverrides(p_250138_, p_251800_, this.overrides);
     }
 
+    public ItemOverrides getOverrides(ModelBaker p_250138_, BlockModel p_251800_, Function<Material, TextureAtlasSprite> spriteGetter) {
+        return this.overrides.isEmpty() ? ItemOverrides.EMPTY : new ItemOverrides(p_250138_, p_251800_, this.overrides, spriteGetter);
+    }
+
     @Override
     public Collection<ResourceLocation> getDependencies() {
         Set<ResourceLocation> set = Sets.newHashSet();
@@ -155,9 +_,9 @@
     public void resolveParents(Function<ResourceLocation, UnbakedModel> p_249059_) {
         Set<UnbakedModel> set = Sets.newLinkedHashSet();
 
-        for (BlockModel blockmodel = this; blockmodel.parentLocation != null && blockmodel.parent == null; blockmodel = blockmodel.parent) {
+        for (net.neoforged.neoforge.client.resource.model.TopLevelUnbakedModel blockmodel = this; blockmodel.getParentLocation() != null && blockmodel.getParent() == null; blockmodel = blockmodel.getParent()) {
             set.add(blockmodel);
-            UnbakedModel unbakedmodel = p_249059_.apply(blockmodel.parentLocation);
+            UnbakedModel unbakedmodel = p_249059_.apply(blockmodel.getParentLocation());
             if (unbakedmodel == null) {
                 LOGGER.warn("No parent '{}' while loading model '{}'", this.parentLocation, blockmodel);
             }
@@ -173,15 +_,15 @@
             }
 
             if (unbakedmodel == null) {
-                blockmodel.parentLocation = ModelBakery.MISSING_MODEL_LOCATION;
-                unbakedmodel = p_249059_.apply(blockmodel.parentLocation);
+                blockmodel.setParentLocation(ModelBakery.MISSING_MODEL_LOCATION);
+                unbakedmodel = p_249059_.apply(blockmodel.getParentLocation());
             }
 
-            if (!(unbakedmodel instanceof BlockModel)) {
+            if (!(unbakedmodel instanceof net.neoforged.neoforge.client.resource.model.TopLevelUnbakedModel)) {
                 throw new IllegalStateException("BlockModel parent has to be a block model.");
             }
 
-            blockmodel.parent = (BlockModel)unbakedmodel;
+            blockmodel.setParent((net.neoforged.neoforge.client.resource.model.TopLevelUnbakedModel)unbakedmodel);
         }
 
         this.overrides.forEach(p_247932_ -> {
@@ -198,7 +_,7 @@
     }
 
     public BakedModel bake(
-        ModelBaker p_249720_, BlockModel p_111451_, Function<Material, TextureAtlasSprite> p_111452_, ModelState p_111453_, boolean p_111455_
+            ModelBaker p_249720_, BlockModel p_111451_, Function<Material, TextureAtlasSprite> p_111452_, ModelState p_111453_, boolean p_111455_
     ) {
         TextureAtlasSprite textureatlassprite = p_111452_.apply(this.getMaterial("particle"));
         if (this.getRootModel() == ModelBakery.BLOCK_ENTITY_MARKER) {
@@ -261,8 +_,8 @@
     }
 
     private Either<Material, String> findTextureEntry(String p_111486_) {
-        for (BlockModel blockmodel = this; blockmodel != null; blockmodel = blockmodel.parent) {
-            Either<Material, String> either = blockmodel.textureMap.get(p_111486_);
+        for (net.neoforged.neoforge.client.resource.model.TopLevelUnbakedModel blockmodel = this; blockmodel != null; blockmodel = blockmodel.getParent()) {
+            Either<Material, String> either = blockmodel.getOwnTextureMap().get(p_111486_);
             if (either != null) {
                 return either;
             }
@@ -276,7 +_,7 @@
     }
 
     public BlockModel getRootModel() {
-        return this.parent == null ? this : this.parent.getRootModel();
+        return this.parent instanceof BlockModel blockModel ? blockModel.getRootModel() : this;
     }
 
     public ItemTransforms getTransforms() {
@@ -288,11 +_,22 @@
         ItemTransform itemtransform5 = this.getTransform(ItemDisplayContext.GUI);
         ItemTransform itemtransform6 = this.getTransform(ItemDisplayContext.GROUND);
         ItemTransform itemtransform7 = this.getTransform(ItemDisplayContext.FIXED);
-        return new ItemTransforms(itemtransform, itemtransform1, itemtransform2, itemtransform3, itemtransform4, itemtransform5, itemtransform6, itemtransform7);
+
+        var builder = com.google.common.collect.ImmutableMap.<ItemDisplayContext, ItemTransform>builder();
+        for(ItemDisplayContext type : ItemDisplayContext.values()) {
+            if (type.isModded()) {
+                var transform = this.getTransform(type);
+                if (transform != ItemTransform.NO_TRANSFORM) {
+                    builder.put(type, transform);
+                }
+            }
+        }
+
+        return new ItemTransforms(itemtransform, itemtransform1, itemtransform2, itemtransform3, itemtransform4, itemtransform5, itemtransform6, itemtransform7, builder.build());
     }
 
     private ItemTransform getTransform(ItemDisplayContext p_270662_) {
-        return this.parent != null && !this.transforms.hasTransform(p_270662_) ? this.parent.getTransform(p_270662_) : this.transforms.getTransform(p_270662_);
+        return this.parent instanceof BlockModel blockModel && !this.transforms.hasTransform(p_270662_) ? blockModel.getTransform(p_270662_) : this.transforms.getTransform(p_270662_);
     }
 
     @Override
@@ -407,6 +_,8 @@
         public boolean lightLikeBlock() {
             return this == SIDE;
         }
+
+        public String getSerializedName() { return name; }
     }
 
     @OnlyIn(Dist.CLIENT)
