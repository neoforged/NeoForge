--- a/net/minecraft/client/renderer/block/model/ItemOverrides.java
+++ b/net/minecraft/client/renderer/block/model/ItemOverrides.java
@@ -31,7 +_,15 @@
         this.properties = new ResourceLocation[0];
     }
 
+    /**
+     * @deprecated Forge: Use {@link #ItemOverrides(ModelBaker, UnbakedModel, List, java.util.function.Function)}
+     */
+    @Deprecated
     public ItemOverrides(ModelBaker baker, BlockModel model, List<ItemOverride> overrides) {
+        this(baker, model, overrides, baker.getModelTextureGetter());
+    }
+
+    public ItemOverrides(ModelBaker baker, UnbakedModel model, List<ItemOverride> overrides, java.util.function.Function<net.minecraft.client.resources.model.Material, net.minecraft.client.renderer.texture.TextureAtlasSprite> spriteGetter) {
         this.properties = overrides.stream()
             .flatMap(ItemOverride::getPredicates)
             .map(ItemOverride.Predicate::getProperty)
@@ -47,7 +_,7 @@
 
         for (int j = overrides.size() - 1; j >= 0; j--) {
             ItemOverride itemoverride = overrides.get(j);
-            BakedModel bakedmodel = this.bakeModel(baker, model, itemoverride);
+            BakedModel bakedmodel = this.bakeModel(baker, model, itemoverride, spriteGetter);
             ItemOverrides.PropertyMatcher[] aitemoverrides$propertymatcher = itemoverride.getPredicates().map(p_173477_ -> {
                 int k = object2intmap.getInt(p_173477_.getProperty());
                 return new ItemOverrides.PropertyMatcher(k, p_173477_.getValue());
@@ -59,9 +_,9 @@
     }
 
     @Nullable
-    private BakedModel bakeModel(ModelBaker baker, BlockModel model, ItemOverride override) {
+    private BakedModel bakeModel(ModelBaker baker, UnbakedModel model, ItemOverride override, java.util.function.Function<net.minecraft.client.resources.model.Material, net.minecraft.client.renderer.texture.TextureAtlasSprite> spriteGetter) {
         UnbakedModel unbakedmodel = baker.getModel(override.getModel());
-        return Objects.equals(unbakedmodel, model) ? null : baker.bake(override.getModel(), BlockModelRotation.X0_Y0);
+        return Objects.equals(unbakedmodel, model) ? null : baker.bake(override.getModel(), BlockModelRotation.X0_Y0, spriteGetter);
     }
 
     @Nullable
@@ -93,6 +_,10 @@
         }
 
         return model;
+    }
+
+    public com.google.common.collect.ImmutableList<BakedOverride> getOverrides() {
+        return com.google.common.collect.ImmutableList.copyOf(overrides);
     }
 
     @OnlyIn(Dist.CLIENT)
