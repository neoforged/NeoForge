--- a/net/minecraft/client/renderer/block/ModelBlockRenderer.java
+++ b/net/minecraft/client/renderer/block/ModelBlockRenderer.java
@@ -40,6 +_,7 @@
         this.blockColors = blockColors;
     }
 
+    @Deprecated //Forge: Model data and render type parameter
     public void tesselateBlock(
         BlockAndTintGetter level,
         BakedModel model,
@@ -52,15 +_,35 @@
         long seed,
         int packedOverlay
     ) {
-        boolean flag = Minecraft.useAmbientOcclusion() && state.getLightEmission() == 0 && model.useAmbientOcclusion();
+        tesselateBlock(level, model, state, pos, poseStack, consumer, checkSides, random, seed, packedOverlay, net.neoforged.neoforge.client.model.data.ModelData.EMPTY, null);
+    }
+    public void tesselateBlock(
+        BlockAndTintGetter level,
+        BakedModel model,
+        BlockState state,
+        BlockPos pos,
+        PoseStack poseStack,
+        VertexConsumer consumer,
+        boolean checkSides,
+        RandomSource random,
+        long seed,
+        int packedOverlay,
+        net.neoforged.neoforge.client.model.data.ModelData modelData,
+        net.minecraft.client.renderer.RenderType renderType
+    ) {
+        boolean flag = Minecraft.useAmbientOcclusion() && switch(model.useAmbientOcclusion(state, modelData, renderType)) {
+            case TRUE -> true;
+            case DEFAULT -> state.getLightEmission(level, pos) == 0;
+            case FALSE -> false;
+        };
         Vec3 vec3 = state.getOffset(level, pos);
         poseStack.translate(vec3.x, vec3.y, vec3.z);
 
         try {
             if (flag) {
-                this.tesselateWithAO(level, model, state, pos, poseStack, consumer, checkSides, random, seed, packedOverlay);
+                this.tesselateWithAO(level, model, state, pos, poseStack, consumer, checkSides, random, seed, packedOverlay, modelData, renderType);
             } else {
-                this.tesselateWithoutAO(level, model, state, pos, poseStack, consumer, checkSides, random, seed, packedOverlay);
+                this.tesselateWithoutAO(level, model, state, pos, poseStack, consumer, checkSides, random, seed, packedOverlay, modelData, renderType);
             }
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Tesselating block model");
@@ -71,6 +_,7 @@
         }
     }
 
+    @Deprecated //Forge: Model data and render type parameter
     public void tesselateWithAO(
         BlockAndTintGetter level,
         BakedModel model,
@@ -82,6 +_,22 @@
         RandomSource random,
         long seed,
         int packedOverlay
+    ) {
+         tesselateWithAO(level, model, state, pos, poseStack, consumer, checkSides, random, seed, packedOverlay, net.neoforged.neoforge.client.model.data.ModelData.EMPTY, null);
+    }
+    public void tesselateWithAO(
+        BlockAndTintGetter level,
+        BakedModel model,
+        BlockState state,
+        BlockPos pos,
+        PoseStack poseStack,
+        VertexConsumer consumer,
+        boolean checkSides,
+        RandomSource random,
+        long seed,
+        int packedOverlay,
+        net.neoforged.neoforge.client.model.data.ModelData modelData,
+        net.minecraft.client.renderer.RenderType renderType
     ) {
         float[] afloat = new float[DIRECTIONS.length * 2];
         BitSet bitset = new BitSet(3);
@@ -90,7 +_,7 @@
 
         for (Direction direction : DIRECTIONS) {
             random.setSeed(seed);
-            List<BakedQuad> list = model.getQuads(state, direction, random);
+            List<BakedQuad> list = model.getQuads(state, direction, random, modelData, renderType);
             if (!list.isEmpty()) {
                 blockpos$mutableblockpos.setWithOffset(pos, direction);
                 if (!checkSides || Block.shouldRenderFace(state, level, pos, direction, blockpos$mutableblockpos)) {
@@ -102,7 +_,7 @@
         }
 
         random.setSeed(seed);
-        List<BakedQuad> list1 = model.getQuads(state, null, random);
+        List<BakedQuad> list1 = model.getQuads(state, (Direction)null, random, modelData, renderType);
         if (!list1.isEmpty()) {
             this.renderModelFaceAO(
                 level, state, pos, poseStack, consumer, list1, afloat, bitset, modelblockrenderer$ambientocclusionface, packedOverlay
@@ -110,6 +_,7 @@
         }
     }
 
+    @Deprecated //Forge: Model data and render type parameter
     public void tesselateWithoutAO(
         BlockAndTintGetter level,
         BakedModel model,
@@ -122,12 +_,28 @@
         long seed,
         int packedOverlay
     ) {
+        tesselateWithoutAO(level, model, state, pos, poseStack, consumer, checkSides, random, seed, packedOverlay, net.neoforged.neoforge.client.model.data.ModelData.EMPTY, null);
+    }
+    public void tesselateWithoutAO(
+        BlockAndTintGetter level,
+        BakedModel model,
+        BlockState state,
+        BlockPos pos,
+        PoseStack poseStack,
+        VertexConsumer consumer,
+        boolean checkSides,
+        RandomSource random,
+        long seed,
+        int packedOverlay,
+        net.neoforged.neoforge.client.model.data.ModelData modelData,
+        net.minecraft.client.renderer.RenderType renderType
+    ) {
         BitSet bitset = new BitSet(3);
         BlockPos.MutableBlockPos blockpos$mutableblockpos = pos.mutable();
 
         for (Direction direction : DIRECTIONS) {
             random.setSeed(seed);
-            List<BakedQuad> list = model.getQuads(state, direction, random);
+            List<BakedQuad> list = model.getQuads(state, direction, random, modelData, renderType);
             if (!list.isEmpty()) {
                 blockpos$mutableblockpos.setWithOffset(pos, direction);
                 if (!checkSides || Block.shouldRenderFace(state, level, pos, direction, blockpos$mutableblockpos)) {
@@ -138,7 +_,7 @@
         }
 
         random.setSeed(seed);
-        List<BakedQuad> list1 = model.getQuads(state, null, random);
+        List<BakedQuad> list1 = model.getQuads(state, null, random, modelData, renderType);
         if (!list1.isEmpty()) {
             this.renderModelFaceFlat(level, state, pos, -1, packedOverlay, true, poseStack, consumer, list1, bitset);
         }
@@ -158,6 +_,7 @@
     ) {
         for (BakedQuad bakedquad : quads) {
             this.calculateShape(level, state, pos, bakedquad.getVertices(), bakedquad.getDirection(), shape, shapeFlags);
+            if (!net.neoforged.neoforge.client.ClientHooks.calculateFaceWithoutAO(level, state, pos, bakedquad, shapeFlags.get(0), aoFace.brightness, aoFace.lightmap))
             aoFace.calculate(level, state, pos, bakedquad.getDirection(), shape, shapeFlags, bakedquad.isShade());
             this.putQuadData(
                 level,
@@ -323,6 +_,7 @@
         }
     }
 
+    @Deprecated //Forge: Model data and render type parameter
     public void renderModel(
         PoseStack.Pose pose,
         VertexConsumer consumer,
@@ -333,17 +_,33 @@
         float blue,
         int packedLight,
         int packedOverlay
+    ) {
+        renderModel(pose, consumer, state, model, red, green, blue, packedLight, packedOverlay, net.neoforged.neoforge.client.model.data.ModelData.EMPTY, null);
+    }
+
+    public void renderModel(
+        PoseStack.Pose pose,
+        VertexConsumer consumer,
+        @Nullable BlockState state,
+        BakedModel model,
+        float red,
+        float green,
+        float blue,
+        int packedLight,
+        int packedOverlay,
+        net.neoforged.neoforge.client.model.data.ModelData modelData,
+        net.minecraft.client.renderer.RenderType renderType
     ) {
         RandomSource randomsource = RandomSource.create();
         long i = 42L;
 
         for (Direction direction : DIRECTIONS) {
             randomsource.setSeed(42L);
-            renderQuadList(pose, consumer, red, green, blue, model.getQuads(state, direction, randomsource), packedLight, packedOverlay);
+            renderQuadList(pose, consumer, red, green, blue, model.getQuads(state, direction, randomsource, modelData, renderType), packedLight, packedOverlay);
         }
 
         randomsource.setSeed(42L);
-        renderQuadList(pose, consumer, red, green, blue, model.getQuads(state, null, randomsource), packedLight, packedOverlay);
+        renderQuadList(pose, consumer, red, green, blue, model.getQuads(state, null, randomsource, modelData, renderType), packedLight, packedOverlay);
     }
 
     private static void renderQuadList(
