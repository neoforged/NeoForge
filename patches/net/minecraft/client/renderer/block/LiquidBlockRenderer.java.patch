--- a/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -37,6 +_,7 @@
         this.waterIcons[0] = Minecraft.getInstance().getModelManager().getBlockModelShaper().getBlockModel(Blocks.WATER.defaultBlockState()).getParticleIcon();
         this.waterIcons[1] = ModelBakery.WATER_FLOW.sprite();
         this.waterOverlay = ModelBakery.WATER_OVERLAY.sprite();
+        net.neoforged.neoforge.client.textures.FluidSpriteCache.reload();
     }
 
     private static boolean isNeighborSameFluid(FluidState p_203186_, FluidState p_203187_) {
@@ -70,8 +_,9 @@
 
     public void tesselate(BlockAndTintGetter p_234370_, BlockPos p_234371_, VertexConsumer p_234372_, BlockState p_234373_, FluidState p_234374_) {
         boolean flag = p_234374_.is(FluidTags.LAVA);
-        TextureAtlasSprite[] atextureatlassprite = flag ? this.lavaIcons : this.waterIcons;
-        int i = flag ? 16777215 : BiomeColors.getAverageWaterColor(p_234370_, p_234371_);
+        TextureAtlasSprite[] atextureatlassprite = net.neoforged.neoforge.client.textures.FluidSpriteCache.getFluidSprites(p_234370_, p_234371_, p_234374_);
+        int i = net.neoforged.neoforge.client.extensions.common.IClientFluidTypeExtensions.of(p_234374_).getTintColor(p_234374_, p_234370_, p_234371_);
+        float alpha = (float)(i >> 24 & 255) / 255.0F;
         float f = (float)(i >> 16 & 0xFF) / 255.0F;
         float f1 = (float)(i >> 8 & 0xFF) / 255.0F;
         float f2 = (float)(i & 0xFF) / 255.0F;
@@ -180,15 +_,15 @@
                 float f57 = f4 * f;
                 float f29 = f4 * f1;
                 float f30 = f4 * f2;
-                this.vertex(p_234372_, f36 + 0.0F, f37 + f8, f38 + 0.0F, f57, f29, f30, f17, f21, l);
-                this.vertex(p_234372_, f36 + 0.0F, f37 + f10, f38 + 1.0F, f57, f29, f30, f18, f22, l);
-                this.vertex(p_234372_, f36 + 1.0F, f37 + f9, f38 + 1.0F, f57, f29, f30, f19, f23, l);
-                this.vertex(p_234372_, f36 + 1.0F, f37 + f7, f38 + 0.0F, f57, f29, f30, f20, f24, l);
+                this.vertex(p_234372_, f36 + 0.0F, f37 + f8, f38 + 0.0F, f57, f29, f30, alpha, f17, f21, l);
+                this.vertex(p_234372_, f36 + 0.0F, f37 + f10, f38 + 1.0F, f57, f29, f30, alpha, f18, f22, l);
+                this.vertex(p_234372_, f36 + 1.0F, f37 + f9, f38 + 1.0F, f57, f29, f30, alpha, f19, f23, l);
+                this.vertex(p_234372_, f36 + 1.0F, f37 + f7, f38 + 0.0F, f57, f29, f30, alpha, f20, f24, l);
                 if (p_234374_.shouldRenderBackwardUpFace(p_234370_, p_234371_.above())) {
-                    this.vertex(p_234372_, f36 + 0.0F, f37 + f8, f38 + 0.0F, f57, f29, f30, f17, f21, l);
-                    this.vertex(p_234372_, f36 + 1.0F, f37 + f7, f38 + 0.0F, f57, f29, f30, f20, f24, l);
-                    this.vertex(p_234372_, f36 + 1.0F, f37 + f9, f38 + 1.0F, f57, f29, f30, f19, f23, l);
-                    this.vertex(p_234372_, f36 + 0.0F, f37 + f10, f38 + 1.0F, f57, f29, f30, f18, f22, l);
+                    this.vertex(p_234372_, f36 + 0.0F, f37 + f8, f38 + 0.0F, f57, f29, f30, alpha, f17, f21, l);
+                    this.vertex(p_234372_, f36 + 1.0F, f37 + f7, f38 + 0.0F, f57, f29, f30, alpha, f20, f24, l);
+                    this.vertex(p_234372_, f36 + 1.0F, f37 + f9, f38 + 1.0F, f57, f29, f30, alpha, f19, f23, l);
+                    this.vertex(p_234372_, f36 + 0.0F, f37 + f10, f38 + 1.0F, f57, f29, f30, alpha, f18, f22, l);
                 }
             }
 
@@ -201,10 +_,10 @@
                 float f46 = f3 * f;
                 float f48 = f3 * f1;
                 float f50 = f3 * f2;
-                this.vertex(p_234372_, f36, f37 + f16, f38 + 1.0F, f46, f48, f50, f40, f43, k);
-                this.vertex(p_234372_, f36, f37 + f16, f38, f46, f48, f50, f40, f42, k);
-                this.vertex(p_234372_, f36 + 1.0F, f37 + f16, f38, f46, f48, f50, f41, f42, k);
-                this.vertex(p_234372_, f36 + 1.0F, f37 + f16, f38 + 1.0F, f46, f48, f50, f41, f43, k);
+                this.vertex(p_234372_, f36, f37 + f16, f38 + 1.0F, f46, f48, f50, alpha, f40, f43, k);
+                this.vertex(p_234372_, f36, f37 + f16, f38, f46, f48, f50, alpha, f40, f42, k);
+                this.vertex(p_234372_, f36 + 1.0F, f37 + f16, f38, f46, f48, f50, alpha, f41, f42, k);
+                this.vertex(p_234372_, f36 + 1.0F, f37 + f16, f38 + 1.0F, f46, f48, f50, alpha, f41, f43, k);
             }
 
             int j = this.getLightColor(p_234370_, p_234371_);
@@ -258,10 +_,9 @@
                 if (flag7 && !isFaceOccludedByNeighbor(direction, Math.max(f44, f45), p_234370_.getBlockState(p_234371_.relative(direction)))) {
                     BlockPos blockpos = p_234371_.relative(direction);
                     TextureAtlasSprite textureatlassprite2 = atextureatlassprite[1];
-                    if (!flag) {
-                        Block block = p_234370_.getBlockState(blockpos).getBlock();
-                        if (block instanceof HalfTransparentBlock || block instanceof LeavesBlock) {
-                            textureatlassprite2 = this.waterOverlay;
+                    if (atextureatlassprite[2] != null) {
+                        if (p_234370_.getBlockState(blockpos).shouldDisplayFluidOverlay(p_234370_, blockpos, p_234374_)) {
+                            textureatlassprite2 = atextureatlassprite[2];
                         }
                     }
 
@@ -274,15 +_,15 @@
                     float f33 = f4 * f32 * f;
                     float f34 = f4 * f32 * f1;
                     float f35 = f4 * f32 * f2;
-                    this.vertex(p_234372_, f47, f37 + f44, f49, f33, f34, f35, f56, f59, j);
-                    this.vertex(p_234372_, f51, f37 + f45, f52, f33, f34, f35, f58, f60, j);
-                    this.vertex(p_234372_, f51, f37 + f16, f52, f33, f34, f35, f58, f31, j);
-                    this.vertex(p_234372_, f47, f37 + f16, f49, f33, f34, f35, f56, f31, j);
-                    if (textureatlassprite2 != this.waterOverlay) {
-                        this.vertex(p_234372_, f47, f37 + f16, f49, f33, f34, f35, f56, f31, j);
-                        this.vertex(p_234372_, f51, f37 + f16, f52, f33, f34, f35, f58, f31, j);
-                        this.vertex(p_234372_, f51, f37 + f45, f52, f33, f34, f35, f58, f60, j);
-                        this.vertex(p_234372_, f47, f37 + f44, f49, f33, f34, f35, f56, f59, j);
+                    this.vertex(p_234372_, f47, f37 + f44, f49, f33, f34, f35, alpha, f56, f59, j);
+                    this.vertex(p_234372_, f51, f37 + f45, f52, f33, f34, f35, alpha, f58, f60, j);
+                    this.vertex(p_234372_, f51, f37 + f16, f52, f33, f34, f35, alpha, f58, f31, j);
+                    this.vertex(p_234372_, f47, f37 + f16, f49, f33, f34, f35, alpha, f56, f31, j);
+                    if (textureatlassprite2 != atextureatlassprite[2]) { // Neo: use custom fluid's overlay texture
+                        this.vertex(p_234372_, f47, f37 + f16, f49, f33, f34, f35, alpha, f56, f31, j);
+                        this.vertex(p_234372_, f51, f37 + f16, f52, f33, f34, f35, alpha, f58, f31, j);
+                        this.vertex(p_234372_, f51, f37 + f45, f52, f33, f34, f35, alpha, f58, f60, j);
+                        this.vertex(p_234372_, f47, f37 + f44, f49, f33, f34, f35, alpha, f56, f59, j);
                     }
                 }
             }
@@ -323,6 +_,26 @@
     private float getHeight(BlockAndTintGetter p_203157_, Fluid p_203158_, BlockPos p_203159_) {
         BlockState blockstate = p_203157_.getBlockState(p_203159_);
         return this.getHeight(p_203157_, p_203158_, p_203159_, blockstate, blockstate.getFluidState());
+    }
+
+    private void vertex(
+            VertexConsumer p_110985_,
+            float p_110989_,
+            float p_110990_,
+            float p_110991_,
+            float p_110992_,
+            float p_110993_,
+            float p_350595_,
+            float alpha,
+            float p_350459_,
+            float p_350437_,
+            int p_110994_
+    ) {
+        p_110985_.addVertex(p_110989_, p_110990_, p_110991_)
+                .setColor(p_110992_, p_110993_, p_350595_, alpha)
+                .setUv(p_350459_, p_350437_)
+                .setLight(p_110994_)
+                .setNormal(0.0F, 1.0F, 0.0F);
     }
 
     private float getHeight(BlockAndTintGetter p_203161_, Fluid p_203162_, BlockPos p_203163_, BlockState p_203164_, FluidState p_203165_) {
