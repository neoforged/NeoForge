--- a/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -38,12 +_,17 @@
         this.waterIcons[0] = Minecraft.getInstance().getModelManager().getBlockModelShaper().getBlockModel(Blocks.WATER.defaultBlockState()).getParticleIcon();
         this.waterIcons[1] = ModelBakery.WATER_FLOW.sprite();
         this.waterOverlay = ModelBakery.WATER_OVERLAY.sprite();
+        net.neoforged.neoforge.client.textures.FluidSpriteCache.reload();
     }
 
     private static boolean isNeighborSameFluid(FluidState p_203186_, FluidState p_203187_) {
         return p_203187_.getType().isSame(p_203186_.getType());
     }
 
+    private static boolean isNeighborStateCompatibleWithFluid(FluidState selfState, BlockState otherState) {
+        return otherState.isCompatibleWithFluid(selfState);
+    }
+
     private static boolean isFaceOccludedByState(BlockGetter p_110979_, Direction p_110980_, float p_110981_, BlockPos p_110982_, BlockState p_110983_) {
         if (p_110983_.canOcclude()) {
             VoxelShape voxelshape = Shapes.box(0.0, 0.0, 0.0, 1.0, (double)p_110981_, 1.0);
@@ -62,16 +_,24 @@
         return isFaceOccludedByState(p_110960_, p_110963_.getOpposite(), 1.0F, p_110961_, p_110962_);
     }
 
+    @Deprecated // Neo: use overload that accepts BlockState
     public static boolean shouldRenderFace(
         BlockAndTintGetter p_203167_, BlockPos p_203168_, FluidState p_203169_, BlockState p_203170_, Direction p_203171_, FluidState p_203172_
     ) {
         return !isFaceOccludedBySelf(p_203167_, p_203168_, p_203170_, p_203171_) && !isNeighborSameFluid(p_203169_, p_203172_);
     }
 
+    public static boolean shouldRenderFace(
+            BlockAndTintGetter p_203167_, BlockPos p_203168_, FluidState p_203169_, BlockState p_203170_, Direction p_203171_, BlockState otherState
+    ) {
+        return !isFaceOccludedBySelf(p_203167_, p_203168_, p_203170_, p_203171_) && !isNeighborStateCompatibleWithFluid(p_203169_, otherState);
+    }
+
     public void tesselate(BlockAndTintGetter p_234370_, BlockPos p_234371_, VertexConsumer p_234372_, BlockState p_234373_, FluidState p_234374_) {
         boolean flag = p_234374_.is(FluidTags.LAVA);
-        TextureAtlasSprite[] atextureatlassprite = flag ? this.lavaIcons : this.waterIcons;
-        int i = flag ? 16777215 : BiomeColors.getAverageWaterColor(p_234370_, p_234371_);
+        TextureAtlasSprite[] atextureatlassprite = net.neoforged.neoforge.client.textures.FluidSpriteCache.getFluidSprites(p_234370_, p_234371_, p_234374_);
+        int i = net.neoforged.neoforge.client.extensions.common.IClientFluidTypeExtensions.of(p_234374_).getTintColor(p_234374_, p_234370_, p_234371_);
+        float alpha = (float)(i >> 24 & 255) / 255.0F;
         float f = (float)(i >> 16 & 0xFF) / 255.0F;
         float f1 = (float)(i >> 8 & 0xFF) / 255.0F;
         float f2 = (float)(i & 0xFF) / 255.0F;
@@ -87,13 +_,13 @@
         FluidState fluidstate4 = blockstate4.getFluidState();
         BlockState blockstate5 = p_234370_.getBlockState(p_234371_.relative(Direction.EAST));
         FluidState fluidstate5 = blockstate5.getFluidState();
-        boolean flag1 = !isNeighborSameFluid(p_234374_, fluidstate1);
-        boolean flag2 = shouldRenderFace(p_234370_, p_234371_, p_234374_, p_234373_, Direction.DOWN, fluidstate)
+        boolean flag1 = !isNeighborStateCompatibleWithFluid(p_234374_, blockstate1);
+        boolean flag2 = shouldRenderFace(p_234370_, p_234371_, p_234374_, p_234373_, Direction.DOWN, blockstate)
             && !isFaceOccludedByNeighbor(p_234370_, p_234371_, Direction.DOWN, 0.8888889F, blockstate);
-        boolean flag3 = shouldRenderFace(p_234370_, p_234371_, p_234374_, p_234373_, Direction.NORTH, fluidstate2);
-        boolean flag4 = shouldRenderFace(p_234370_, p_234371_, p_234374_, p_234373_, Direction.SOUTH, fluidstate3);
-        boolean flag5 = shouldRenderFace(p_234370_, p_234371_, p_234374_, p_234373_, Direction.WEST, fluidstate4);
-        boolean flag6 = shouldRenderFace(p_234370_, p_234371_, p_234374_, p_234373_, Direction.EAST, fluidstate5);
+        boolean flag3 = shouldRenderFace(p_234370_, p_234371_, p_234374_, p_234373_, Direction.NORTH, blockstate2);
+        boolean flag4 = shouldRenderFace(p_234370_, p_234371_, p_234374_, p_234373_, Direction.SOUTH, blockstate3);
+        boolean flag5 = shouldRenderFace(p_234370_, p_234371_, p_234374_, p_234373_, Direction.WEST, blockstate4);
+        boolean flag6 = shouldRenderFace(p_234370_, p_234371_, p_234374_, p_234373_, Direction.EAST, blockstate5);
         if (flag1 || flag2 || flag6 || flag5 || flag3 || flag4) {
             float f3 = p_234370_.getShade(Direction.DOWN, true);
             float f4 = p_234370_.getShade(Direction.UP, true);
@@ -181,15 +_,15 @@
                 float f52 = f4 * f;
                 float f30 = f4 * f1;
                 float f31 = f4 * f2;
-                this.vertex(p_234372_, d1 + 0.0, d2 + (double)f8, d0 + 0.0, f52, f30, f31, f18, f22, l);
-                this.vertex(p_234372_, d1 + 0.0, d2 + (double)f10, d0 + 1.0, f52, f30, f31, f19, f23, l);
-                this.vertex(p_234372_, d1 + 1.0, d2 + (double)f9, d0 + 1.0, f52, f30, f31, f20, f24, l);
-                this.vertex(p_234372_, d1 + 1.0, d2 + (double)f7, d0 + 0.0, f52, f30, f31, f21, f25, l);
+                this.vertex(p_234372_, d1 + 0.0D, d2 + (double)f8, d0 + 0.0D, f52, f30, f31, alpha, f18, f22, l);
+                this.vertex(p_234372_, d1 + 0.0D, d2 + (double)f10, d0 + 1.0D, f52, f30, f31, alpha, f19, f23, l);
+                this.vertex(p_234372_, d1 + 1.0D, d2 + (double)f9, d0 + 1.0D, f52, f30, f31, alpha, f20, f24, l);
+                this.vertex(p_234372_, d1 + 1.0D, d2 + (double)f7, d0 + 0.0D, f52, f30, f31, alpha, f21, f25, l);
                 if (p_234374_.shouldRenderBackwardUpFace(p_234370_, p_234371_.above())) {
-                    this.vertex(p_234372_, d1 + 0.0, d2 + (double)f8, d0 + 0.0, f52, f30, f31, f18, f22, l);
-                    this.vertex(p_234372_, d1 + 1.0, d2 + (double)f7, d0 + 0.0, f52, f30, f31, f21, f25, l);
-                    this.vertex(p_234372_, d1 + 1.0, d2 + (double)f9, d0 + 1.0, f52, f30, f31, f20, f24, l);
-                    this.vertex(p_234372_, d1 + 0.0, d2 + (double)f10, d0 + 1.0, f52, f30, f31, f19, f23, l);
+                    this.vertex(p_234372_, d1 + 0.0D, d2 + (double)f8, d0 + 0.0D, f52, f30, f31, alpha, f18, f22, l);
+                    this.vertex(p_234372_, d1 + 1.0D, d2 + (double)f7, d0 + 0.0D, f52, f30, f31, alpha, f21, f25, l);
+                    this.vertex(p_234372_, d1 + 1.0D, d2 + (double)f9, d0 + 1.0D, f52, f30, f31, alpha, f20, f24, l);
+                    this.vertex(p_234372_, d1 + 0.0D, d2 + (double)f10, d0 + 1.0D, f52, f30, f31, alpha, f19, f23, l);
                 }
             }
 
@@ -202,10 +_,10 @@
                 float f46 = f3 * f;
                 float f47 = f3 * f1;
                 float f48 = f3 * f2;
-                this.vertex(p_234372_, d1, d2 + (double)f17, d0 + 1.0, f46, f47, f48, f40, f43, k);
-                this.vertex(p_234372_, d1, d2 + (double)f17, d0, f46, f47, f48, f40, f42, k);
-                this.vertex(p_234372_, d1 + 1.0, d2 + (double)f17, d0, f46, f47, f48, f41, f42, k);
-                this.vertex(p_234372_, d1 + 1.0, d2 + (double)f17, d0 + 1.0, f46, f47, f48, f41, f43, k);
+                this.vertex(p_234372_, d1, d2 + (double)f17, d0 + 1.0D, f46, f47, f48, alpha, f40, f43, k);
+                this.vertex(p_234372_, d1, d2 + (double)f17, d0, f46, f47, f48, alpha, f40, f42, k);
+                this.vertex(p_234372_, d1 + 1.0D, d2 + (double)f17, d0, f46, f47, f48, alpha, f41, f42, k);
+                this.vertex(p_234372_, d1 + 1.0D, d2 + (double)f17, d0 + 1.0D, f46, f47, f48, alpha, f41, f43, k);
             }
 
             int j = this.getLightColor(p_234370_, p_234371_);
@@ -260,10 +_,9 @@
                     && !isFaceOccludedByNeighbor(p_234370_, p_234371_, direction, Math.max(f44, f45), p_234370_.getBlockState(p_234371_.relative(direction)))) {
                     BlockPos blockpos = p_234371_.relative(direction);
                     TextureAtlasSprite textureatlassprite2 = atextureatlassprite[1];
-                    if (!flag) {
-                        Block block = p_234370_.getBlockState(blockpos).getBlock();
-                        if (block instanceof HalfTransparentBlock || block instanceof LeavesBlock) {
-                            textureatlassprite2 = this.waterOverlay;
+                    if (atextureatlassprite[2] != null) {
+                        if (p_234370_.getBlockState(blockpos).shouldDisplayFluidOverlay(p_234370_, blockpos, p_234374_)) {
+                            textureatlassprite2 = atextureatlassprite[2];
                         }
                     }
 
@@ -276,15 +_,15 @@
                     float f37 = f4 * f36 * f;
                     float f38 = f4 * f36 * f1;
                     float f39 = f4 * f36 * f2;
-                    this.vertex(p_234372_, d3, d2 + (double)f44, d4, f37, f38, f39, f53, f33, j);
-                    this.vertex(p_234372_, d5, d2 + (double)f45, d6, f37, f38, f39, f32, f34, j);
-                    this.vertex(p_234372_, d5, d2 + (double)f17, d6, f37, f38, f39, f32, f35, j);
-                    this.vertex(p_234372_, d3, d2 + (double)f17, d4, f37, f38, f39, f53, f35, j);
-                    if (textureatlassprite2 != this.waterOverlay) {
-                        this.vertex(p_234372_, d3, d2 + (double)f17, d4, f37, f38, f39, f53, f35, j);
-                        this.vertex(p_234372_, d5, d2 + (double)f17, d6, f37, f38, f39, f32, f35, j);
-                        this.vertex(p_234372_, d5, d2 + (double)f45, d6, f37, f38, f39, f32, f34, j);
-                        this.vertex(p_234372_, d3, d2 + (double)f44, d4, f37, f38, f39, f53, f33, j);
+                    this.vertex(p_234372_, d3, d2 + (double)f44, d4, f37, f38, f39, alpha, f53, f33, j);
+                    this.vertex(p_234372_, d5, d2 + (double)f45, d6, f37, f38, f39, alpha, f32, f34, j);
+                    this.vertex(p_234372_, d5, d2 + (double)f17, d6, f37, f38, f39, alpha, f32, f35, j);
+                    this.vertex(p_234372_, d3, d2 + (double)f17, d4, f37, f38, f39, alpha, f53, f35, j);
+                    if (textureatlassprite2 != atextureatlassprite[2]) {
+                        this.vertex(p_234372_, d3, d2 + (double)f17, d4, f37, f38, f39, alpha, f53, f35, j);
+                        this.vertex(p_234372_, d5, d2 + (double)f17, d6, f37, f38, f39, alpha, f32, f35, j);
+                        this.vertex(p_234372_, d5, d2 + (double)f45, d6, f37, f38, f39, alpha, f32, f34, j);
+                        this.vertex(p_234372_, d3, d2 + (double)f44, d4, f37, f38, f39, alpha, f53, f33, j);
                     }
                 }
             }
@@ -325,6 +_,10 @@
     private float getHeight(BlockAndTintGetter p_203157_, Fluid p_203158_, BlockPos p_203159_) {
         BlockState blockstate = p_203157_.getBlockState(p_203159_);
         return this.getHeight(p_203157_, p_203158_, p_203159_, blockstate, blockstate.getFluidState());
+    }
+
+    private void vertex(VertexConsumer p_110985_, double p_110986_, double p_110987_, double p_110988_, float p_110989_, float p_110990_, float p_110991_, float alpha, float p_110992_, float p_110993_, int p_110994_) {
+        p_110985_.vertex(p_110986_, p_110987_, p_110988_).color(p_110989_, p_110990_, p_110991_, alpha).uv(p_110992_, p_110993_).uv2(p_110994_).normal(0.0F, 1.0F, 0.0F).endVertex();
     }
 
     private float getHeight(BlockAndTintGetter p_203161_, Fluid p_203162_, BlockPos p_203163_, BlockState p_203164_, FluidState p_203165_) {
