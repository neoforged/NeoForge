--- a/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -38,6 +_,7 @@
         this.waterIcons[0] = Minecraft.getInstance().getModelManager().getBlockModelShaper().getBlockModel(Blocks.WATER.defaultBlockState()).getParticleIcon();
         this.waterIcons[1] = ModelBakery.WATER_FLOW.sprite();
         this.waterOverlay = ModelBakery.WATER_OVERLAY.sprite();
+        net.neoforged.neoforge.client.textures.FluidSpriteCache.reload();
     }
 
     private static boolean isNeighborSameFluid(FluidState firstState, FluidState secondState) {
@@ -70,8 +_,9 @@
 
     public void tesselate(BlockAndTintGetter level, BlockPos pos, VertexConsumer buffer, BlockState blockState, FluidState fluidState) {
         boolean flag = fluidState.is(FluidTags.LAVA);
-        TextureAtlasSprite[] atextureatlassprite = flag ? this.lavaIcons : this.waterIcons;
-        int i = flag ? 16777215 : BiomeColors.getAverageWaterColor(level, pos);
+        TextureAtlasSprite[] atextureatlassprite = net.neoforged.neoforge.client.textures.FluidSpriteCache.getFluidSprites(level, pos, fluidState);
+        int i = net.neoforged.neoforge.client.extensions.common.IClientFluidTypeExtensions.of(fluidState).getTintColor(fluidState, level, pos);
+        float alpha = (float)(i >> 24 & 255) / 255.0F;
         float f = (float)(i >> 16 & 0xFF) / 255.0F;
         float f1 = (float)(i >> 8 & 0xFF) / 255.0F;
         float f2 = (float)(i & 0xFF) / 255.0F;
@@ -181,15 +_,15 @@
                 float f57 = f4 * f;
                 float f29 = f4 * f1;
                 float f30 = f4 * f2;
-                this.vertex(buffer, f36 + 0.0F, f37 + f8, f38 + 0.0F, f57, f29, f30, f17, f21, l);
-                this.vertex(buffer, f36 + 0.0F, f37 + f10, f38 + 1.0F, f57, f29, f30, f18, f22, l);
-                this.vertex(buffer, f36 + 1.0F, f37 + f9, f38 + 1.0F, f57, f29, f30, f19, f23, l);
-                this.vertex(buffer, f36 + 1.0F, f37 + f7, f38 + 0.0F, f57, f29, f30, f20, f24, l);
+                this.vertex(buffer, f36 + 0.0F, f37 + f8, f38 + 0.0F, f57, f29, f30, alpha, f17, f21, l);
+                this.vertex(buffer, f36 + 0.0F, f37 + f10, f38 + 1.0F, f57, f29, f30, alpha, f18, f22, l);
+                this.vertex(buffer, f36 + 1.0F, f37 + f9, f38 + 1.0F, f57, f29, f30, alpha, f19, f23, l);
+                this.vertex(buffer, f36 + 1.0F, f37 + f7, f38 + 0.0F, f57, f29, f30, alpha, f20, f24, l);
                 if (fluidState.shouldRenderBackwardUpFace(level, pos.above())) {
-                    this.vertex(buffer, f36 + 0.0F, f37 + f8, f38 + 0.0F, f57, f29, f30, f17, f21, l);
-                    this.vertex(buffer, f36 + 1.0F, f37 + f7, f38 + 0.0F, f57, f29, f30, f20, f24, l);
-                    this.vertex(buffer, f36 + 1.0F, f37 + f9, f38 + 1.0F, f57, f29, f30, f19, f23, l);
-                    this.vertex(buffer, f36 + 0.0F, f37 + f10, f38 + 1.0F, f57, f29, f30, f18, f22, l);
+                    this.vertex(buffer, f36 + 0.0F, f37 + f8, f38 + 0.0F, f57, f29, f30, alpha, f17, f21, l);
+                    this.vertex(buffer, f36 + 1.0F, f37 + f7, f38 + 0.0F, f57, f29, f30, alpha, f20, f24, l);
+                    this.vertex(buffer, f36 + 1.0F, f37 + f9, f38 + 1.0F, f57, f29, f30, alpha, f19, f23, l);
+                    this.vertex(buffer, f36 + 0.0F, f37 + f10, f38 + 1.0F, f57, f29, f30, alpha, f18, f22, l);
                 }
             }
 
@@ -202,10 +_,10 @@
                 float f46 = f3 * f;
                 float f48 = f3 * f1;
                 float f50 = f3 * f2;
-                this.vertex(buffer, f36, f37 + f16, f38 + 1.0F, f46, f48, f50, f40, f43, k);
-                this.vertex(buffer, f36, f37 + f16, f38, f46, f48, f50, f40, f42, k);
-                this.vertex(buffer, f36 + 1.0F, f37 + f16, f38, f46, f48, f50, f41, f42, k);
-                this.vertex(buffer, f36 + 1.0F, f37 + f16, f38 + 1.0F, f46, f48, f50, f41, f43, k);
+                this.vertex(buffer, f36, f37 + f16, f38 + 1.0F, f46, f48, f50, alpha, f40, f43, k);
+                this.vertex(buffer, f36, f37 + f16, f38, f46, f48, f50, alpha, f40, f42, k);
+                this.vertex(buffer, f36 + 1.0F, f37 + f16, f38, f46, f48, f50, alpha, f41, f42, k);
+                this.vertex(buffer, f36 + 1.0F, f37 + f16, f38 + 1.0F, f46, f48, f50, alpha, f41, f43, k);
             }
 
             int j = this.getLightColor(level, pos);
@@ -260,10 +_,9 @@
                     && !isFaceOccludedByNeighbor(level, pos, direction, Math.max(f44, f45), level.getBlockState(pos.relative(direction)))) {
                     BlockPos blockpos = pos.relative(direction);
                     TextureAtlasSprite textureatlassprite2 = atextureatlassprite[1];
-                    if (!flag) {
-                        Block block = level.getBlockState(blockpos).getBlock();
-                        if (block instanceof HalfTransparentBlock || block instanceof LeavesBlock) {
-                            textureatlassprite2 = this.waterOverlay;
+                    if (atextureatlassprite[2] != null) {
+                        if (level.getBlockState(blockpos).shouldDisplayFluidOverlay(level, blockpos, fluidState)) {
+                            textureatlassprite2 = atextureatlassprite[2];
                         }
                     }
 
@@ -276,15 +_,15 @@
                     float f33 = f4 * f32 * f;
                     float f34 = f4 * f32 * f1;
                     float f35 = f4 * f32 * f2;
-                    this.vertex(buffer, f47, f37 + f44, f49, f33, f34, f35, f56, f59, j);
-                    this.vertex(buffer, f51, f37 + f45, f52, f33, f34, f35, f58, f60, j);
-                    this.vertex(buffer, f51, f37 + f16, f52, f33, f34, f35, f58, f31, j);
-                    this.vertex(buffer, f47, f37 + f16, f49, f33, f34, f35, f56, f31, j);
-                    if (textureatlassprite2 != this.waterOverlay) {
-                        this.vertex(buffer, f47, f37 + f16, f49, f33, f34, f35, f56, f31, j);
-                        this.vertex(buffer, f51, f37 + f16, f52, f33, f34, f35, f58, f31, j);
-                        this.vertex(buffer, f51, f37 + f45, f52, f33, f34, f35, f58, f60, j);
-                        this.vertex(buffer, f47, f37 + f44, f49, f33, f34, f35, f56, f59, j);
+                    this.vertex(buffer, f47, f37 + f44, f49, f33, f34, f35, alpha, f56, f59, j);
+                    this.vertex(buffer, f51, f37 + f45, f52, f33, f34, f35, alpha, f58, f60, j);
+                    this.vertex(buffer, f51, f37 + f16, f52, f33, f34, f35, alpha, f58, f31, j);
+                    this.vertex(buffer, f47, f37 + f16, f49, f33, f34, f35, alpha, f56, f31, j);
+                    if (textureatlassprite2 != atextureatlassprite[2]) { // Neo: use custom fluid's overlay texture
+                        this.vertex(buffer, f47, f37 + f16, f49, f33, f34, f35, alpha, f56, f31, j);
+                        this.vertex(buffer, f51, f37 + f16, f52, f33, f34, f35, alpha, f58, f31, j);
+                        this.vertex(buffer, f51, f37 + f45, f52, f33, f34, f35, alpha, f58, f60, j);
+                        this.vertex(buffer, f47, f37 + f44, f49, f33, f34, f35, alpha, f56, f59, j);
                     }
                 }
             }
@@ -325,6 +_,26 @@
     private float getHeight(BlockAndTintGetter level, Fluid fluid, BlockPos pos) {
         BlockState blockstate = level.getBlockState(pos);
         return this.getHeight(level, fluid, pos, blockstate, blockstate.getFluidState());
+    }
+
+    private void vertex(
+            VertexConsumer buffer,
+            float x,
+            float y,
+            float z,
+            float red,
+            float green,
+            float blue,
+            float alpha,
+            float u,
+            float v,
+            int packedLight
+    ) {
+        buffer.addVertex(x, y, z)
+                .setColor(red, green, blue, alpha)
+                .setUv(u, v)
+                .setLight(packedLight)
+                .setNormal(0.0F, 1.0F, 0.0F);
     }
 
     private float getHeight(BlockAndTintGetter level, Fluid fluid, BlockPos pos, BlockState blockState, FluidState fluidState) {
