--- a/net/minecraft/client/renderer/entity/layers/HumanoidArmorLayer.java
+++ b/net/minecraft/client/renderer/entity/layers/HumanoidArmorLayer.java
@@ -66,22 +_,28 @@
             if (armoritem.getEquipmentSlot() == p_117122_) {
                 this.getParentModel().copyPropertiesTo(p_117124_);
                 this.setPartVisibility(p_117124_, p_117122_);
+                net.minecraft.client.model.Model model = getArmorModelHook(p_117121_, itemstack, p_117122_, p_117124_);
                 boolean flag = this.usesInnerModel(p_117122_);
                 ArmorMaterial armormaterial = armoritem.getMaterial().value();
-                int i = itemstack.is(ItemTags.DYEABLE) ? FastColor.ARGB32.opaque(DyedItemColor.getOrDefault(itemstack, -6265536)) : -1;
 
-                for (ArmorMaterial.Layer armormaterial$layer : armormaterial.layers()) {
-                    int j = armormaterial$layer.dyeable() ? i : -1;
-                    this.renderModel(p_117119_, p_117120_, p_117123_, p_117124_, j, armormaterial$layer.texture(flag));
+                net.neoforged.neoforge.client.extensions.common.IClientItemExtensions extensions = net.neoforged.neoforge.client.extensions.common.IClientItemExtensions.of(itemstack);
+                int fallbackColor = extensions.getDefaultDyeColor(itemstack);
+                for (int layerIdx = 0; layerIdx < armormaterial.layers().size(); layerIdx++) {
+                    ArmorMaterial.Layer armormaterial$layer = armormaterial.layers().get(layerIdx);
+                    int j = extensions.getArmorLayerTintColor(itemstack, p_117121_, armormaterial$layer, layerIdx, fallbackColor);
+                    if (j != 0) {
+                        var texture = net.neoforged.neoforge.client.ClientHooks.getArmorTexture(p_117121_, itemstack, armormaterial$layer, flag, p_117122_);
+                        this.renderModel(p_117119_, p_117120_, p_117123_, model, j, texture);
+                    }
                 }
 
                 ArmorTrim armortrim = itemstack.get(DataComponents.TRIM);
                 if (armortrim != null) {
-                    this.renderTrim(armoritem.getMaterial(), p_117119_, p_117120_, p_117123_, armortrim, p_117124_, flag);
+                    this.renderTrim(armoritem.getMaterial(), p_117119_, p_117120_, p_117123_, armortrim, model, flag);
                 }
 
                 if (itemstack.hasFoil()) {
-                    this.renderGlint(p_117119_, p_117120_, p_117123_, p_117124_);
+                    this.renderGlint(p_117119_, p_117120_, p_117123_, model);
                 }
             }
         }
@@ -111,6 +_,9 @@
     }
 
     private void renderModel(PoseStack p_289664_, MultiBufferSource p_289689_, int p_289681_, A p_289658_, int p_350798_, ResourceLocation p_324344_) {
+        renderModel(p_289664_, p_289689_, p_289681_, (net.minecraft.client.model.Model) p_289658_, p_350798_, p_324344_);
+    }
+    private void renderModel(PoseStack p_289664_, MultiBufferSource p_289689_, int p_289681_, net.minecraft.client.model.Model p_289658_, int p_350798_, ResourceLocation p_324344_) {
         VertexConsumer vertexconsumer = p_289689_.getBuffer(RenderType.armorCutoutNoCull(p_324344_));
         p_289658_.renderToBuffer(p_289664_, vertexconsumer, p_289681_, OverlayTexture.NO_OVERLAY, p_350798_);
     }
@@ -118,6 +_,11 @@
     private void renderTrim(
         Holder<ArmorMaterial> p_323506_, PoseStack p_289687_, MultiBufferSource p_289643_, int p_289683_, ArmorTrim p_289692_, A p_289663_, boolean p_289651_
     ) {
+        renderTrim(p_323506_, p_289687_, p_289643_, p_289683_, p_289692_, (net.minecraft.client.model.Model) p_289663_, p_289651_);
+    }
+    private void renderTrim(
+        Holder<ArmorMaterial> p_323506_, PoseStack p_289687_, MultiBufferSource p_289643_, int p_289683_, ArmorTrim p_289692_, net.minecraft.client.model.Model p_289663_, boolean p_289651_
+    ) {
         TextureAtlasSprite textureatlassprite = this.armorTrimAtlas
             .getSprite(p_289651_ ? p_289692_.innerTexture(p_323506_) : p_289692_.outerTexture(p_323506_));
         VertexConsumer vertexconsumer = textureatlassprite.wrap(p_289643_.getBuffer(Sheets.armorTrimsSheet(p_289692_.pattern().value().decal())));
@@ -125,6 +_,9 @@
     }
 
     private void renderGlint(PoseStack p_289673_, MultiBufferSource p_289654_, int p_289649_, A p_289659_) {
+        renderGlint(p_289673_, p_289654_, p_289649_, (net.minecraft.client.model.Model) p_289659_);
+    }
+    private void renderGlint(PoseStack p_289673_, MultiBufferSource p_289654_, int p_289649_, net.minecraft.client.model.Model p_289659_) {
         p_289659_.renderToBuffer(p_289673_, p_289654_.getBuffer(RenderType.armorEntityGlint()), p_289649_, OverlayTexture.NO_OVERLAY);
     }
 
@@ -134,5 +_,12 @@
 
     private boolean usesInnerModel(EquipmentSlot p_117129_) {
         return p_117129_ == EquipmentSlot.LEGS;
+    }
+
+    /**
+     * Hook to allow item-sensitive armor model. for HumanoidArmorLayer.
+     */
+    protected net.minecraft.client.model.Model getArmorModelHook(T entity, ItemStack itemStack, EquipmentSlot slot, A model) {
+        return net.neoforged.neoforge.client.ClientHooks.getArmorModel(entity, itemStack, slot, model);
     }
 }
