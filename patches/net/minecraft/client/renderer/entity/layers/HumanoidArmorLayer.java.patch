--- a/net/minecraft/client/renderer/entity/layers/HumanoidArmorLayer.java
+++ b/net/minecraft/client/renderer/entity/layers/HumanoidArmorLayer.java
@@ -66,22 +_,24 @@
             if (armoritem.getEquipmentSlot() == slot) {
                 this.getParentModel().copyPropertiesTo(model);
                 this.setPartVisibility(model, slot);
+                net.minecraft.client.model.Model armorModel = getArmorModelHook(livingEntity, itemstack, slot, model);
                 boolean flag = this.usesInnerModel(slot);
                 ArmorMaterial armormaterial = armoritem.getMaterial().value();
                 int i = itemstack.is(ItemTags.DYEABLE) ? FastColor.ARGB32.opaque(DyedItemColor.getOrDefault(itemstack, -6265536)) : -1;
 
                 for (ArmorMaterial.Layer armormaterial$layer : armormaterial.layers()) {
                     int j = armormaterial$layer.dyeable() ? i : -1;
-                    this.renderModel(poseStack, bufferSource, packedLight, model, j, armormaterial$layer.texture(flag));
+                    var texture = net.neoforged.neoforge.client.ClientHooks.getArmorTexture(livingEntity, itemstack, armormaterial$layer, flag, slot);
+                    this.renderModel(poseStack, bufferSource, packedLight, armorModel, j, texture);
                 }
 
                 ArmorTrim armortrim = itemstack.get(DataComponents.TRIM);
                 if (armortrim != null) {
-                    this.renderTrim(armoritem.getMaterial(), poseStack, bufferSource, packedLight, armortrim, model, flag);
+                    this.renderTrim(armoritem.getMaterial(), poseStack, bufferSource, packedLight, armortrim, armorModel, flag);
                 }
 
                 if (itemstack.hasFoil()) {
-                    this.renderGlint(poseStack, bufferSource, packedLight, model);
+                    this.renderGlint(poseStack, bufferSource, packedLight, armorModel);
                 }
             }
         }
@@ -111,6 +_,9 @@
     }
 
     private void renderModel(PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, A model, int dyeColor, ResourceLocation textureLocation) {
+        renderModel(poseStack, bufferSource, packedLight, (net.minecraft.client.model.Model) model, dyeColor, textureLocation);
+    }
+    private void renderModel(PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, net.minecraft.client.model.Model model, int dyeColor, ResourceLocation textureLocation) {
         VertexConsumer vertexconsumer = bufferSource.getBuffer(RenderType.armorCutoutNoCull(textureLocation));
         model.renderToBuffer(poseStack, vertexconsumer, packedLight, OverlayTexture.NO_OVERLAY, dyeColor);
     }
@@ -118,6 +_,11 @@
     private void renderTrim(
         Holder<ArmorMaterial> armorMaterial, PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, ArmorTrim trim, A model, boolean innerTexture
     ) {
+        renderTrim(armorMaterial, poseStack, bufferSource, packedLight, trim, (net.minecraft.client.model.Model) model, innerTexture);
+    }
+    private void renderTrim(
+        Holder<ArmorMaterial> armorMaterial, PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, ArmorTrim trim, net.minecraft.client.model.Model model, boolean innerTexture
+    ) {
         TextureAtlasSprite textureatlassprite = this.armorTrimAtlas
             .getSprite(innerTexture ? trim.innerTexture(armorMaterial) : trim.outerTexture(armorMaterial));
         VertexConsumer vertexconsumer = textureatlassprite.wrap(bufferSource.getBuffer(Sheets.armorTrimsSheet(trim.pattern().value().decal())));
@@ -125,6 +_,9 @@
     }
 
     private void renderGlint(PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, A model) {
+        renderGlint(poseStack, bufferSource, packedLight, (net.minecraft.client.model.Model) model);
+    }
+    private void renderGlint(PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, net.minecraft.client.model.Model model) {
         model.renderToBuffer(poseStack, bufferSource.getBuffer(RenderType.armorEntityGlint()), packedLight, OverlayTexture.NO_OVERLAY);
     }
 
@@ -134,5 +_,12 @@
 
     private boolean usesInnerModel(EquipmentSlot slot) {
         return slot == EquipmentSlot.LEGS;
+    }
+
+    /**
+     * Hook to allow item-sensitive armor model. for HumanoidArmorLayer.
+     */
+    protected net.minecraft.client.model.Model getArmorModelHook(T entity, ItemStack itemStack, EquipmentSlot slot, A model) {
+        return net.neoforged.neoforge.client.ClientHooks.getArmorModel(entity, itemStack, slot, model);
     }
 }
