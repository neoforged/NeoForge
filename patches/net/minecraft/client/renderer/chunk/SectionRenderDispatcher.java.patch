--- a/net/minecraft/client/renderer/chunk/SectionRenderDispatcher.java
+++ b/net/minecraft/client/renderer/chunk/SectionRenderDispatcher.java
@@ -78,6 +_,10 @@
    private Vec3 camera = Vec3.ZERO;
 
    public SectionRenderDispatcher(ClientLevel p_295274_, LevelRenderer p_295323_, Executor p_295234_, boolean p_294699_, SectionBufferBuilderPack p_294208_) {
+      this(p_295274_, p_295323_, p_295234_, p_294699_, p_294208_, -1);
+   }
+
+   public SectionRenderDispatcher(ClientLevel p_295274_, LevelRenderer p_295323_, Executor p_295234_, boolean p_294699_, SectionBufferBuilderPack p_294208_, int countRenderBuilders) {
       this.level = p_295274_;
       this.renderer = p_295323_;
       int i = Math.max(
@@ -85,7 +_,7 @@
       );
       int j = Runtime.getRuntime().availableProcessors();
       int k = p_294699_ ? j : Math.min(j, 4);
-      int l = Math.max(1, Math.min(k, i));
+      int l = countRenderBuilders < 0 ? Math.max(1, Math.min(k, i)) : countRenderBuilders;
       this.fixedBuffers = p_294208_;
       List<SectionBufferBuilderPack> list = Lists.newArrayListWithExpectedSize(l);
 
@@ -422,9 +_,7 @@
          if (!sectionrenderdispatcher$compiledsection.hasBlocks.contains(p_295679_)) {
             return false;
          } else {
-            this.lastResortTransparencyTask = new SectionRenderDispatcher.RenderSection.ResortTransparencyTask(
-               this.getDistToPlayerSqr(), sectionrenderdispatcher$compiledsection
-            );
+            this.lastResortTransparencyTask = new SectionRenderDispatcher.RenderSection.ResortTransparencyTask(SectionPos.of(getOrigin()), this.getDistToPlayerSqr(), sectionrenderdispatcher$compiledsection);
             p_294363_.schedule(this.lastResortTransparencyTask);
             return true;
          }
@@ -458,9 +_,7 @@
             this.initialCompilationCancelCount.incrementAndGet();
          }
 
-         this.lastRebuildTask = new SectionRenderDispatcher.RenderSection.RebuildTask(
-            this.getDistToPlayerSqr(), renderchunkregion, !flag1 || this.initialCompilationCancelCount.get() > 2
-         );
+         this.lastRebuildTask = new SectionRenderDispatcher.RenderSection.RebuildTask(SectionPos.of(getOrigin()), this.getDistToPlayerSqr(), renderchunkregion, !flag1 || this.initialCompilationCancelCount.get() > 2);
          return this.lastRebuildTask;
       }
 
@@ -500,10 +_,22 @@
          protected final double distAtCreation;
          protected final AtomicBoolean isCancelled = new AtomicBoolean(false);
          protected final boolean isHighPriority;
+         protected final java.util.Map<net.minecraft.core.BlockPos, net.neoforged.neoforge.client.model.data.ModelData> modelData;
 
+         @Deprecated
          public CompileTask(double p_294428_, boolean p_295051_) {
+            this(null, p_294428_, p_295051_);
+         }
+
+         public CompileTask(@Nullable SectionPos sectionPos, double p_294428_, boolean p_295051_) {
             this.distAtCreation = p_294428_;
             this.isHighPriority = p_295051_;
+
+            if (sectionPos == null || Minecraft.getInstance().level == null || Minecraft.getInstance().level.getModelDataManager() == null) {
+               this.modelData = java.util.Collections.emptyMap();
+            } else {
+               this.modelData = Minecraft.getInstance().level.getModelDataManager().getAt(sectionPos);
+            }
          }
 
          public abstract CompletableFuture<SectionRenderDispatcher.SectionTaskResult> doTask(SectionBufferBuilderPack p_294622_);
@@ -515,6 +_,10 @@
          public int compareTo(SectionRenderDispatcher.RenderSection.CompileTask p_296186_) {
             return Doubles.compare(this.distAtCreation, p_296186_.distAtCreation);
          }
+
+         public net.neoforged.neoforge.client.model.data.ModelData getModelData(BlockPos pos) {
+            return modelData.getOrDefault(pos, net.neoforged.neoforge.client.model.data.ModelData.EMPTY);
+         }
       }
 
       @OnlyIn(Dist.CLIENT)
@@ -522,8 +_,13 @@
          @Nullable
          protected RenderChunkRegion region;
 
+         @Deprecated
          public RebuildTask(double p_294400_, @Nullable RenderChunkRegion p_294382_, boolean p_295207_) {
-            super(p_294400_, p_295207_);
+            this(null, p_294400_, p_294382_, p_295207_);
+         }
+
+         public RebuildTask(@Nullable SectionPos pos, double p_294400_, @Nullable RenderChunkRegion p_294382_, boolean p_295207_) {
+            super(pos, p_294400_, p_295207_);
             this.region = p_294382_;
          }
 
@@ -628,16 +_,20 @@
                   }
 
                   if (blockstate.getRenderShape() != RenderShape.INVISIBLE) {
-                     RenderType rendertype2 = ItemBlockRenderTypes.getChunkRenderType(blockstate);
+                     var model = blockrenderdispatcher.getBlockModel(blockstate);
+                     var modelData = model.getModelData(renderchunkregion, blockpos2, blockstate, getModelData(blockpos2));
+                     randomsource.setSeed(blockstate.getSeed(blockpos2));
+                     for (RenderType rendertype2 : model.getRenderTypes(blockstate, randomsource, modelData)) {
                      BufferBuilder bufferbuilder2 = p_294319_.builder(rendertype2);
                      if (set.add(rendertype2)) {
                         RenderSection.this.beginLayer(bufferbuilder2);
                      }
 
                      posestack.pushPose();
-                     posestack.translate((float)(blockpos2.getX() & 15), (float)(blockpos2.getY() & 15), (float)(blockpos2.getZ() & 15));
-                     blockrenderdispatcher.renderBatched(blockstate, blockpos2, renderchunkregion, posestack, bufferbuilder2, true, randomsource);
+                     posestack.translate((float) (blockpos2.getX() & 15), (float) (blockpos2.getY() & 15), (float) (blockpos2.getZ() & 15));
+                     blockrenderdispatcher.renderBatched(blockstate, blockpos2, renderchunkregion, posestack, bufferbuilder2, true, randomsource, modelData, rendertype2);
                      posestack.popPose();
+                     }
                   }
                }
 
@@ -668,9 +_,10 @@
          private <E extends BlockEntity> void handleBlockEntity(SectionRenderDispatcher.RenderSection.RebuildTask.CompileResults p_294198_, E p_296214_) {
             BlockEntityRenderer<E> blockentityrenderer = Minecraft.getInstance().getBlockEntityRenderDispatcher().getRenderer(p_296214_);
             if (blockentityrenderer != null) {
-               p_294198_.blockEntities.add(p_296214_);
                if (blockentityrenderer.shouldRenderOffScreen(p_296214_)) {
                   p_294198_.globalBlockEntities.add(p_296214_);
+               } else {
+                  p_294198_.blockEntities.add(p_296214_);
                }
             }
          }
@@ -698,8 +_,13 @@
       class ResortTransparencyTask extends SectionRenderDispatcher.RenderSection.CompileTask {
          private final SectionRenderDispatcher.CompiledSection compiledSection;
 
+         @Deprecated
          public ResortTransparencyTask(double p_294102_, SectionRenderDispatcher.CompiledSection p_294601_) {
-            super(p_294102_, true);
+            this(null, p_294102_, p_294601_);
+         }
+
+         public ResortTransparencyTask(@Nullable SectionPos pos, double p_294102_, SectionRenderDispatcher.CompiledSection p_294601_) {
+            super(pos, p_294102_, true);
             this.compiledSection = p_294601_;
          }
 
