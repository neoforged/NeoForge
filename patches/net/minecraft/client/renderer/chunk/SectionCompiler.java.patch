--- a/net/minecraft/client/renderer/chunk/SectionCompiler.java
+++ b/net/minecraft/client/renderer/chunk/SectionCompiler.java
@@ -41,6 +_,10 @@
     }
 
     public SectionCompiler.Results compile(SectionPos sectionPos, RenderChunkRegion region, VertexSorting vertexSorting, SectionBufferBuilderPack sectionBufferBuilderPack) {
+        return compile(sectionPos, region, vertexSorting, sectionBufferBuilderPack, List.of());
+    }
+
+    public SectionCompiler.Results compile(SectionPos sectionPos, RenderChunkRegion region, VertexSorting vertexSorting, SectionBufferBuilderPack sectionBufferBuilderPack, List<net.neoforged.neoforge.client.event.AddSectionGeometryEvent.AdditionalSectionRenderer> additionalRenderers) {
         SectionCompiler.Results sectioncompiler$results = new SectionCompiler.Results();
         BlockPos blockpos = sectionPos.origin();
         BlockPos blockpos1 = blockpos.offset(15, 15, 15);
@@ -71,7 +_,11 @@
             }
 
             if (blockstate.getRenderShape() == RenderShape.MODEL) {
-                RenderType rendertype2 = ItemBlockRenderTypes.getChunkRenderType(blockstate);
+                var model = this.blockRenderer.getBlockModel(blockstate);
+                var modelData = region.getModelData(blockpos2);
+                modelData = model.getModelData(region, blockpos2, blockstate, modelData);
+                randomsource.setSeed(blockstate.getSeed(blockpos2));
+                for (RenderType rendertype2 : model.getRenderTypes(blockstate, randomsource, modelData)) {
                 BufferBuilder bufferbuilder1 = this.getOrBeginLayer(map, sectionBufferBuilderPack, rendertype2);
                 posestack.pushPose();
                 posestack.translate(
@@ -79,11 +_,17 @@
                     (float)SectionPos.sectionRelative(blockpos2.getY()),
                     (float)SectionPos.sectionRelative(blockpos2.getZ())
                 );
-                this.blockRenderer.renderBatched(blockstate, blockpos2, region, posestack, bufferbuilder1, true, randomsource);
+                this.blockRenderer.renderBatched(blockstate, blockpos2, region, posestack, bufferbuilder1, true, randomsource, modelData, rendertype2);
                 posestack.popPose();
+                }
             }
         }
-
+        net.neoforged.neoforge.client.ClientHooks.addAdditionalGeometry(
+                additionalRenderers,
+                type -> this.getOrBeginLayer(map, sectionBufferBuilderPack, type),
+                region,
+                posestack
+        );
         for (Entry<RenderType, BufferBuilder> entry : map.entrySet()) {
             RenderType rendertype1 = entry.getKey();
             MeshData meshdata = entry.getValue().build();
@@ -115,9 +_,10 @@
     private <E extends BlockEntity> void handleBlockEntity(SectionCompiler.Results results, E blockEntity) {
         BlockEntityRenderer<E> blockentityrenderer = this.blockEntityRenderer.getRenderer(blockEntity);
         if (blockentityrenderer != null) {
-            results.blockEntities.add(blockEntity);
             if (blockentityrenderer.shouldRenderOffScreen(blockEntity)) {
                 results.globalBlockEntities.add(blockEntity);
+            } else {
+                results.blockEntities.add(blockEntity); // Neo: Fix MC-112730
             }
         }
     }
