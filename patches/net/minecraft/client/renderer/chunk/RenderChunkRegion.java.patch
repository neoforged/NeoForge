--- a/net/minecraft/client/renderer/chunk/RenderChunkRegion.java
+++ b/net/minecraft/client/renderer/chunk/RenderChunkRegion.java
@@ -22,12 +_,18 @@
     private final int minChunkZ;
     protected final RenderChunk[] chunks;
     protected final Level level;
+    private final it.unimi.dsi.fastutil.longs.Long2ObjectFunction<net.neoforged.neoforge.client.model.data.ModelData> modelDataSnapshot;
 
+    @Deprecated
     RenderChunkRegion(Level level, int minChunkX, int minChunkZ, RenderChunk[] chunks) {
+        this(level, minChunkX, minChunkZ, chunks, net.neoforged.neoforge.client.model.data.ModelDataManager.EMPTY_SNAPSHOT);
+    }
+    RenderChunkRegion(Level level, int minChunkX, int minChunkZ, RenderChunk[] chunks, it.unimi.dsi.fastutil.longs.Long2ObjectFunction<net.neoforged.neoforge.client.model.data.ModelData> modelDataSnapshot) {
         this.level = level;
         this.minChunkX = minChunkX;
         this.minChunkZ = minChunkZ;
         this.chunks = chunks;
+        this.modelDataSnapshot = modelDataSnapshot;
     }
 
     @Override
@@ -75,6 +_,21 @@
     @Override
     public int getHeight() {
         return this.level.getHeight();
+    }
+
+    @Override
+    public float getShade(float normalX, float normalY, float normalZ, boolean shade) {
+        return this.level.getShade(normalX, normalY, normalZ, shade);
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.model.data.ModelData getModelData(BlockPos pos) {
+        return modelDataSnapshot.get(pos.asLong());
+    }
+
+    @Override
+    public net.neoforged.neoforge.common.world.AuxiliaryLightManager getAuxLightManager(net.minecraft.world.level.ChunkPos pos) {
+        return this.getChunk(pos.x, pos.z).wrapped.getAuxLightManager(pos);
     }
 
     public static int index(int minX, int minZ, int x, int z) {
