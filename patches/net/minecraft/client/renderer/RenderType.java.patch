--- a/net/minecraft/client/renderer/RenderType.java
+++ b/net/minecraft/client/renderer/RenderType.java
@@ -968,7 +_,7 @@
     }
 
     public static RenderType text(ResourceLocation location) {
-        return TEXT.apply(location);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getText(location);
     }
 
     public static RenderType textBackground() {
@@ -976,19 +_,19 @@
     }
 
     public static RenderType textIntensity(ResourceLocation id) {
-        return TEXT_INTENSITY.apply(id);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextIntensity(id);
     }
 
     public static RenderType textPolygonOffset(ResourceLocation id) {
-        return TEXT_POLYGON_OFFSET.apply(id);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextPolygonOffset(id);
     }
 
     public static RenderType textIntensityPolygonOffset(ResourceLocation id) {
-        return TEXT_INTENSITY_POLYGON_OFFSET.apply(id);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextIntensityPolygonOffset(id);
     }
 
     public static RenderType textSeeThrough(ResourceLocation location) {
-        return TEXT_SEE_THROUGH.apply(location);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextSeeThrough(location);
     }
 
     public static RenderType textBackgroundSeeThrough() {
@@ -996,7 +_,7 @@
     }
 
     public static RenderType textIntensitySeeThrough(ResourceLocation id) {
-        return TEXT_INTENSITY_SEE_THROUGH.apply(id);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextIntensitySeeThrough(id);
     }
 
     public static RenderType lightning() {
@@ -1453,5 +_,17 @@
         public String toString() {
             return this.name;
         }
+    }
+
+    // Neo: Assign internal IDs for RenderType to be used in rendering
+    private int chunkLayerId = -1;
+    /** {@return the unique ID of this {@link RenderType} for chunk rendering purposes, or {@literal -1} if this is not a chunk {@link RenderType}} */
+    public final int getChunkLayerId() {
+        return chunkLayerId;
+    }
+    static {
+        int i = 0;
+        for (var layer : chunkBufferLayers())
+            layer.chunkLayerId = i++;
     }
 }
