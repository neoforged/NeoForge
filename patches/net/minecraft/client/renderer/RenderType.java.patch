--- a/net/minecraft/client/renderer/RenderType.java
+++ b/net/minecraft/client/renderer/RenderType.java
@@ -873,6 +_,15 @@
             .createCompositeState(false)
     );
     public static final ImmutableList<RenderType> CHUNK_BUFFER_LAYERS = ImmutableList.of(solid(), cutoutMipped(), cutout(), translucent(), tripwire());
+    public static final ImmutableList<RenderType> NEOFORGE_CHUNK_BUFFER_LAYERS;
+    static {
+        net.neoforged.neoforge.client.buffer.chunk.ChunkBufferDefinitionManager.init();
+        ImmutableList.Builder<RenderType> builder = ImmutableList.builder();
+        builder.addAll(CHUNK_BUFFER_LAYERS);
+        builder.addAll(net.neoforged.neoforge.client.buffer.chunk.ChunkBufferDefinitionManager.getChunkBufferDefinitions().stream().map(net.neoforged.neoforge.client.buffer.VanillaBufferDefinitions::bakeVanillaRenderType).toList());
+        NEOFORGE_CHUNK_BUFFER_LAYERS = builder.build();
+    }
+
     public final VertexFormat format;
     public final VertexFormat.Mode mode;
     public final int bufferSize;
@@ -1098,7 +_,7 @@
     }
 
     public static RenderType text(ResourceLocation p_110498_) {
-        return TEXT.apply(p_110498_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getText(p_110498_);
     }
 
     public static RenderType textBackground() {
@@ -1106,19 +_,19 @@
     }
 
     public static RenderType textIntensity(ResourceLocation p_173238_) {
-        return TEXT_INTENSITY.apply(p_173238_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextIntensity(p_173238_);
     }
 
     public static RenderType textPolygonOffset(ResourceLocation p_181445_) {
-        return TEXT_POLYGON_OFFSET.apply(p_181445_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextPolygonOffset(p_181445_);
     }
 
     public static RenderType textIntensityPolygonOffset(ResourceLocation p_181447_) {
-        return TEXT_INTENSITY_POLYGON_OFFSET.apply(p_181447_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextIntensityPolygonOffset(p_181447_);
     }
 
     public static RenderType textSeeThrough(ResourceLocation p_110501_) {
-        return TEXT_SEE_THROUGH.apply(p_110501_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextSeeThrough(p_110501_);
     }
 
     public static RenderType textBackgroundSeeThrough() {
@@ -1126,7 +_,7 @@
     }
 
     public static RenderType textIntensitySeeThrough(ResourceLocation p_173241_) {
-        return TEXT_INTENSITY_SEE_THROUGH.apply(p_173241_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextIntensitySeeThrough(p_173241_);
     }
 
     public static RenderType lightning() {
@@ -1321,7 +_,7 @@
     }
 
     public static List<RenderType> chunkBufferLayers() {
-        return CHUNK_BUFFER_LAYERS;
+        return NEOFORGE_CHUNK_BUFFER_LAYERS;
     }
 
     public int bufferSize() {
@@ -1622,5 +_,17 @@
         public String toString() {
             return this.name;
         }
+    }
+
+    // Neo: Assign internal IDs for RenderType to be used in rendering
+    private int chunkLayerId = -1;
+    /** {@return the unique ID of this {@link RenderType} for chunk rendering purposes, or {@literal -1} if this is not a chunk {@link RenderType}} */
+    public final int getChunkLayerId() {
+        return chunkLayerId;
+    }
+    static {
+        int i = 0;
+        for (var layer : chunkBufferLayers())
+            layer.chunkLayerId = i++;
     }
 }
