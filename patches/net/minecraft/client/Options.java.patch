--- a/net/minecraft/client/Options.java
+++ b/net/minecraft/client/Options.java
@@ -727,9 +_,10 @@
             }
         },
         new OptionInstance.LazyEnum<>(
+            // FORGE: fix incorrect string comparison - PR #8767
             () -> Stream.concat(Stream.of(""), Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().stream()).toList(),
             p_232011_ -> Minecraft.getInstance().isRunning()
-                        && p_232011_ != ""
+                        && (p_232011_ == null || !p_232011_.isEmpty())
                         && !Minecraft.getInstance().getSoundManager().getAvailableSoundDevices().contains(p_232011_)
                     ? Optional.empty()
                     : Optional.of(p_232011_),
@@ -799,7 +_,7 @@
         this.incompatibleResourcePacks.clear();
 
         for (Pack pack : packRepository.getSelectedPacks()) {
-            if (!pack.isFixedPosition()) {
+            if (!pack.isFixedPosition() && !pack.isHidden()) {
                 this.resourcePacks.add(pack.getId());
                 if (!pack.getCompatibility().isCompatible()) {
                     this.incompatibleResourcePacks.add(pack.getId());
@@ -1099,6 +_,7 @@
     }
 
     public Options(Minecraft minecraft, File gameDirectory) {
+        setForgeKeybindProperties();
         this.minecraft = minecraft;
         this.optionsFile = new File(gameDirectory, "options.txt");
         boolean flag = Runtime.getRuntime().maxMemory() >= 1000000000L;
@@ -1236,11 +_,21 @@
         this.onboardAccessibility = accessor.process("onboardAccessibility", this.onboardAccessibility);
         accessor.process("menuBackgroundBlurriness", this.menuBackgroundBlurriness);
 
+        net.neoforged.neoforge.forge.snapshots.ForgeSnapshotsMod.processOptions(accessor);
+        processOptionsForge(accessor);
+    }
+    // FORGE: split off to allow reloading options after mod loading is done
+    private void processOptionsForge(Options.FieldAccess accessor)
+    {
         for (KeyMapping keymapping : this.keyMappings) {
-            String s = keymapping.saveString();
+            String s = keymapping.saveString() + (keymapping.getKeyModifier() != net.neoforged.neoforge.client.settings.KeyModifier.NONE ? ":" + keymapping.getKeyModifier() : "");
             String s1 = accessor.process("key_" + keymapping.getName(), s);
             if (!s.equals(s1)) {
-                keymapping.setKey(InputConstants.getKey(s1));
+                if (s1.indexOf(':') != -1) {
+                    String[] pts = s1.split(":");
+                    keymapping.setKeyModifierAndCode(net.neoforged.neoforge.client.settings.KeyModifier.valueFromString(pts[1]), InputConstants.getKey(pts[0]));
+                } else
+                    keymapping.setKeyModifierAndCode(net.neoforged.neoforge.client.settings.KeyModifier.NONE, InputConstants.getKey(s1));
             }
         }
 
@@ -1258,6 +_,9 @@
     }
 
     public void load() {
+        this.load(false);
+    }
+    public void load(boolean limited) {
         try {
             if (!this.optionsFile.exists()) {
                 return;
@@ -1285,7 +_,8 @@
                 }
             }
 
-            this.processOptions(
+            java.util.function.Consumer<FieldAccess> processor = limited ? this::processOptionsForge : this::processOptions;
+            processor.accept(
                 new Options.FieldAccess() {
                     @Nullable
                     private String getValueOrNull(String p_168459_) {
@@ -1460,6 +_,7 @@
     }
 
     public ClientInformation buildPlayerInformation() {
+        if (net.neoforged.neoforge.client.loading.ClientModLoader.isLoading()) return ClientInformation.createDefault(); //Don't save settings before mods add keybindigns and the like to prevent them from being deleted.
         int i = 0;
 
         for (PlayerModelPart playermodelpart : this.modelParts) {
@@ -1535,6 +_,23 @@
         }
 
         resourcePackList.setSelected(set);
+    }
+
+    private void setForgeKeybindProperties() {
+        net.neoforged.neoforge.client.settings.KeyConflictContext inGame = net.neoforged.neoforge.client.settings.KeyConflictContext.IN_GAME;
+        keyUp.setKeyConflictContext(inGame);
+        keyLeft.setKeyConflictContext(inGame);
+        keyDown.setKeyConflictContext(inGame);
+        keyRight.setKeyConflictContext(inGame);
+        keyJump.setKeyConflictContext(inGame);
+        keyShift.setKeyConflictContext(inGame);
+        keySprint.setKeyConflictContext(inGame);
+        keyAttack.setKeyConflictContext(inGame);
+        keyChat.setKeyConflictContext(inGame);
+        keyPlayerList.setKeyConflictContext(inGame);
+        keyCommand.setKeyConflictContext(inGame);
+        keyTogglePerspective.setKeyConflictContext(inGame);
+        keySmoothCamera.setKeyConflictContext(inGame);
     }
 
     public CameraType getCameraType() {
