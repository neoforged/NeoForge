--- a/net/minecraft/client/particle/ParticleEngine.java
+++ b/net/minecraft/client/particle/ParticleEngine.java
@@ -81,11 +_,11 @@
         ParticleRenderType.CUSTOM
     );
     protected ClientLevel level;
-    private final Map<ParticleRenderType, Queue<Particle>> particles = Maps.newIdentityHashMap();
+    private final Map<ParticleRenderType, Queue<Particle>> particles = Maps.newTreeMap(net.neoforged.neoforge.client.ClientHooks.makeParticleRenderTypeComparator(RENDER_ORDER));
     private final Queue<TrackingEmitter> trackingEmitters = Queues.newArrayDeque();
     private final TextureManager textureManager;
     private final RandomSource random = RandomSource.create();
-    private final Int2ObjectMap<ParticleProvider<?>> providers = new Int2ObjectOpenHashMap<>();
+    private final Map<ResourceLocation, ParticleProvider<?>> providers = new java.util.HashMap<>();
     private final Queue<Particle> particlesToAdd = Queues.newArrayDeque();
     private final Map<ResourceLocation, ParticleEngine.MutableSpriteSet> spriteSets = Maps.newHashMap();
     private final TextureAtlas textureAtlas;
@@ -216,10 +_,14 @@
         this.register(ParticleTypes.OMINOUS_SPAWNING, FlyStraightTowardsParticle.OminousSpawnProvider::new);
     }
 
+    /** @deprecated Register via {@link net.neoforged.neoforge.client.event.RegisterParticleProvidersEvent} */
+    @Deprecated
     public <T extends ParticleOptions> void register(ParticleType<T> particleType, ParticleProvider<T> particleFactory) {
-        this.providers.put(BuiltInRegistries.PARTICLE_TYPE.getId(particleType), particleFactory);
+        this.providers.put(BuiltInRegistries.PARTICLE_TYPE.getKey(particleType), particleFactory);
     }
 
+    /** @deprecated Register via {@link net.neoforged.neoforge.client.event.RegisterParticleProvidersEvent} */
+    @Deprecated
     public <T extends ParticleOptions> void register(ParticleType<T> particleType, ParticleProvider.Sprite<T> sprite) {
         this.register(
             particleType,
@@ -236,10 +_,12 @@
         );
     }
 
+    /** @deprecated Register via {@link net.neoforged.neoforge.client.event.RegisterParticleProvidersEvent} */
+    @Deprecated
     public <T extends ParticleOptions> void register(ParticleType<T> particleType, ParticleEngine.SpriteParticleRegistration<T> particleMetaFactory) {
         ParticleEngine.MutableSpriteSet particleengine$mutablespriteset = new ParticleEngine.MutableSpriteSet();
         this.spriteSets.put(BuiltInRegistries.PARTICLE_TYPE.getKey(particleType), particleengine$mutablespriteset);
-        this.providers.put(BuiltInRegistries.PARTICLE_TYPE.getId(particleType), particleMetaFactory.create(particleengine$mutablespriteset));
+        this.providers.put(BuiltInRegistries.PARTICLE_TYPE.getKey(particleType), particleMetaFactory.create(particleengine$mutablespriteset));
     }
 
     @Override
@@ -365,7 +_,7 @@
     private <T extends ParticleOptions> Particle makeParticle(
         T particleData, double x, double y, double z, double xSpeed, double ySpeed, double zSpeed
     ) {
-        ParticleProvider<T> particleprovider = (ParticleProvider<T>)this.providers.get(BuiltInRegistries.PARTICLE_TYPE.getId(particleData.getType()));
+        ParticleProvider<T> particleprovider = (ParticleProvider<T>) this.providers.get(BuiltInRegistries.PARTICLE_TYPE.getKey(particleData.getType()));
         return particleprovider == null
             ? null
             : particleprovider.createParticle(particleData, this.level, x, y, z, xSpeed, ySpeed, zSpeed);
@@ -441,11 +_,20 @@
         }
     }
 
+    @Deprecated
     public void render(LightTexture lightTexture, Camera camera, float partialTick) {
+        render(lightTexture, camera, partialTick, null, type -> true);
+    }
+
+    public void render(LightTexture lightTexture, Camera camera, float partialTick, @Nullable net.minecraft.client.renderer.culling.Frustum frustum, java.util.function.Predicate<ParticleRenderType> renderTypePredicate) {
         lightTexture.turnOnLightLayer();
         RenderSystem.enableDepthTest();
+        //TODO porting: is this even needed with the particle render order fix???
+        RenderSystem.activeTexture(org.lwjgl.opengl.GL13.GL_TEXTURE2);
+        RenderSystem.activeTexture(org.lwjgl.opengl.GL13.GL_TEXTURE0);
 
-        for (ParticleRenderType particlerendertype : RENDER_ORDER) {
+        for (ParticleRenderType particlerendertype : this.particles.keySet()) { // Neo: allow custom IParticleRenderType's
+            if (particlerendertype == ParticleRenderType.NO_RENDER || !renderTypePredicate.test(particlerendertype)) continue;
             Queue<Particle> queue = this.particles.get(particlerendertype);
             if (queue != null && !queue.isEmpty()) {
                 RenderSystem.setShader(GameRenderer::getParticleShader);
@@ -453,6 +_,7 @@
                 BufferBuilder bufferbuilder = particlerendertype.begin(tesselator, this.textureManager);
                 if (bufferbuilder != null) {
                     for (Particle particle : queue) {
+                        if (frustum != null && !frustum.isVisible(particle.getRenderBoundingBox(partialTick))) continue;
                         try {
                             particle.render(bufferbuilder, camera, partialTick);
                         } catch (Throwable throwable) {
@@ -484,7 +_,7 @@
     }
 
     public void destroy(BlockPos pos, BlockState state) {
-        if (!state.isAir() && state.shouldSpawnTerrainParticles()) {
+        if (!state.isAir() && !net.neoforged.neoforge.client.extensions.common.IClientBlockExtensions.of(state).addDestroyEffects(state, this.level, pos, this)) {
             VoxelShape voxelshape = state.getShape(this.level, pos);
             double d0 = 0.25;
             voxelshape.forAllBoxes(
@@ -516,7 +_,7 @@
                                         d6 - 0.5,
                                         state,
                                         pos
-                                    )
+                                    ).updateSprite(state, pos)
                                 );
                             }
                         }
@@ -561,12 +_,28 @@
                 d0 = (double)i + aabb.maxX + 0.1F;
             }
 
-            this.add(new TerrainParticle(this.level, d0, d1, d2, 0.0, 0.0, 0.0, blockstate, pos).setPower(0.2F).scale(0.6F));
+            this.add((new TerrainParticle(this.level, d0, d1, d2, 0.0D, 0.0D, 0.0D, blockstate, pos).updateSprite(blockstate, pos)).setPower(0.2F).scale(0.6F));
         }
     }
 
     public String countParticles() {
         return String.valueOf(this.particles.values().stream().mapToInt(Collection::size).sum());
+    }
+
+    public void iterateParticles(java.util.function.Consumer<Particle> consumer) {
+        for (ParticleRenderType particlerendertype : this.particles.keySet()) {
+            if (particlerendertype == ParticleRenderType.NO_RENDER) continue;
+            Iterable<Particle> iterable = this.particles.get(particlerendertype);
+            if (iterable != null) {
+                iterable.forEach(consumer);
+            }
+        }
+    }
+
+    public void addBlockHitEffects(BlockPos pos, net.minecraft.world.phys.BlockHitResult target) {
+        BlockState state = level.getBlockState(pos);
+        if (!net.neoforged.neoforge.client.extensions.common.IClientBlockExtensions.of(state).addHitEffects(state, level, target, this))
+            crack(pos, target.getDirection());
     }
 
     private boolean hasSpaceInParticleLimit(ParticleGroup group) {
