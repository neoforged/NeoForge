--- a/net/minecraft/client/KeyMapping.java
+++ b/net/minecraft/client/KeyMapping.java
@@ -14,9 +_,9 @@
 import net.neoforged.api.distmarker.OnlyIn;
 
 @OnlyIn(Dist.CLIENT)
-public class KeyMapping implements Comparable<KeyMapping> {
+public class KeyMapping implements Comparable<KeyMapping>, net.neoforged.neoforge.client.extensions.IKeyMappingExtension {
     private static final Map<String, KeyMapping> ALL = Maps.newHashMap();
-    private static final Map<InputConstants.Key, KeyMapping> MAP = Maps.newHashMap();
+    private static final net.neoforged.neoforge.client.settings.KeyMappingLookup MAP = new net.neoforged.neoforge.client.settings.KeyMappingLookup();
     private static final Set<String> CATEGORIES = Sets.newHashSet();
     public static final String CATEGORY_MOVEMENT = "key.categories.movement";
     public static final String CATEGORY_MISC = "key.categories.misc";
@@ -42,17 +_,17 @@
     private int clickCount;
 
     public static void click(InputConstants.Key key) {
-        KeyMapping keymapping = MAP.get(key);
+        for (KeyMapping keymapping : MAP.getAll(key))
         if (keymapping != null) {
             keymapping.clickCount++;
         }
     }
 
     public static void set(InputConstants.Key key, boolean held) {
-        KeyMapping keymapping = MAP.get(key);
-        if (keymapping != null) {
-            keymapping.setDown(held);
-        }
+        for (KeyMapping keymapping : MAP.getAll(key))
+            if (keymapping != null) {
+                keymapping.setDown(held);
+            }
     }
 
     public static void setAll() {
@@ -100,7 +_,7 @@
     }
 
     public boolean isDown() {
-        return this.isDown;
+        return this.isDown && isConflictContextAndModifierActive();
     }
 
     public String getCategory() {
@@ -134,9 +_,13 @@
     }
 
     public int compareTo(KeyMapping p_90841_) {
-        return this.category.equals(p_90841_.category)
-            ? I18n.get(this.name).compareTo(I18n.get(p_90841_.name))
-            : CATEGORY_SORT_ORDER.get(this.category).compareTo(CATEGORY_SORT_ORDER.get(p_90841_.category));
+        if (this.category.equals(p_90841_.category)) return I18n.get(this.name).compareTo(I18n.get(p_90841_.name));
+        Integer tCat = CATEGORY_SORT_ORDER.get(this.category);
+        Integer oCat = CATEGORY_SORT_ORDER.get(p_90841_.category);
+        if (tCat == null && oCat != null) return 1;
+        if (tCat != null && oCat == null) return -1;
+        if (tCat == null && oCat == null) return I18n.get(this.category).compareTo(I18n.get(p_90841_.category));
+        return  tCat.compareTo(oCat);
     }
 
     public static Supplier<Component> createNameSupplier(String key) {
@@ -145,6 +_,20 @@
     }
 
     public boolean same(KeyMapping binding) {
+        if (getKeyConflictContext().conflicts(binding.getKeyConflictContext()) || binding.getKeyConflictContext().conflicts(getKeyConflictContext())) {
+            net.neoforged.neoforge.client.settings.KeyModifier keyModifier = getKeyModifier();
+            net.neoforged.neoforge.client.settings.KeyModifier otherKeyModifier = binding.getKeyModifier();
+            if (keyModifier.matches(binding.getKey()) || otherKeyModifier.matches(getKey())) {
+                return true;
+            } else if (getKey().equals(binding.getKey())) {
+                // IN_GAME key contexts have a conflict when at least one modifier is NONE.
+                // For example: If you hold shift to crouch, you can still press E to open your inventory. This means that a Shift+E hotkey is in conflict with E.
+                // GUI and other key contexts do not have this limitation.
+                return keyModifier == otherKeyModifier ||
+                    (getKeyConflictContext().conflicts(net.neoforged.neoforge.client.settings.KeyConflictContext.IN_GAME) &&
+                    (keyModifier == net.neoforged.neoforge.client.settings.KeyModifier.NONE || otherKeyModifier == net.neoforged.neoforge.client.settings.KeyModifier.NONE));
+            }
+        }
         return this.key.equals(binding.key);
     }
 
@@ -163,11 +_,13 @@
     }
 
     public Component getTranslatedKeyMessage() {
+        return getKeyModifier().getCombinedName(key, () -> {
         return this.key.getDisplayName();
+        });
     }
 
     public boolean isDefault() {
-        return this.key.equals(this.defaultKey);
+        return this.key.equals(this.defaultKey) && getKeyModifier() == getDefaultKeyModifier();
     }
 
     public String saveString() {
@@ -176,5 +_,86 @@
 
     public void setDown(boolean value) {
         this.isDown = value;
+    }
+
+    // Neo: Injected Key Mapping controls
+    private net.neoforged.neoforge.client.settings.KeyModifier keyModifierDefault = net.neoforged.neoforge.client.settings.KeyModifier.NONE;
+    private net.neoforged.neoforge.client.settings.KeyModifier keyModifier = net.neoforged.neoforge.client.settings.KeyModifier.NONE;
+    private net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext = net.neoforged.neoforge.client.settings.KeyConflictContext.UNIVERSAL;
+
+    // Neo: Injected Key Mapping constructors to assist modders
+    /**
+     * Convenience constructor for creating KeyBindings with keyConflictContext set.
+     */
+    public KeyMapping(String description, net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext, final InputConstants.Type inputType, final int keyCode, String category) {
+         this(description, keyConflictContext, inputType.getOrCreate(keyCode), category);
+    }
+
+    /**
+     * Convenience constructor for creating KeyBindings with keyConflictContext set.
+     */
+    public KeyMapping(String description, net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext, InputConstants.Key keyCode, String category) {
+         this(description, keyConflictContext, net.neoforged.neoforge.client.settings.KeyModifier.NONE, keyCode, category);
+    }
+
+    /**
+     * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set.
+     */
+    public KeyMapping(String description, net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext, net.neoforged.neoforge.client.settings.KeyModifier keyModifier, final InputConstants.Type inputType, final int keyCode, String category) {
+         this(description, keyConflictContext, keyModifier, inputType.getOrCreate(keyCode), category);
+    }
+
+    /**
+     * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set.
+     */
+    public KeyMapping(String description, net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext, net.neoforged.neoforge.client.settings.KeyModifier keyModifier, InputConstants.Key keyCode, String category) {
+        this.name = description;
+        this.key = keyCode;
+        this.defaultKey = keyCode;
+        this.category = category;
+        this.keyConflictContext = keyConflictContext;
+        this.keyModifier = keyModifier;
+        this.keyModifierDefault = keyModifier;
+        if (this.keyModifier.matches(keyCode))
+            this.keyModifier = net.neoforged.neoforge.client.settings.KeyModifier.NONE;
+        ALL.put(description, this);
+        MAP.put(keyCode, this);
+        CATEGORIES.add(category);
+    }
+
+    // Neo: Implemented IKeyMappingExtension methods into vanilla
+    @Override
+    public InputConstants.Key getKey() {
+         return this.key;
+    }
+
+    @Override
+    public void setKeyConflictContext(net.neoforged.neoforge.client.settings.IKeyConflictContext keyConflictContext) {
+         this.keyConflictContext = keyConflictContext;
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.settings.IKeyConflictContext getKeyConflictContext() {
+         return keyConflictContext;
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.settings.KeyModifier getDefaultKeyModifier() {
+         return keyModifierDefault;
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.settings.KeyModifier getKeyModifier() {
+         return keyModifier;
+    }
+
+    @Override
+    public void setKeyModifierAndCode(net.neoforged.neoforge.client.settings.KeyModifier keyModifier, InputConstants.Key keyCode) {
+         this.key = keyCode;
+         if (keyModifier.matches(keyCode))
+              keyModifier = net.neoforged.neoforge.client.settings.KeyModifier.NONE;
+         MAP.remove(this);
+         this.keyModifier = keyModifier;
+         MAP.put(keyCode, this);
     }
 }
