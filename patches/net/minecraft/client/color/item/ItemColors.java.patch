--- a/net/minecraft/client/color/item/ItemColors.java
+++ b/net/minecraft/client/color/item/ItemColors.java
@@ -26,7 +_,8 @@
 @OnlyIn(Dist.CLIENT)
 public class ItemColors {
     private static final int DEFAULT = -1;
-    private final IdMapper<ItemColor> itemColors = new IdMapper<>(32);
+    // Neo: Use the item instance directly as non-Vanilla item ids are not constant
+    private final java.util.Map<Item, ItemColor> itemColors = new java.util.IdentityHashMap<>();
 
     public static ItemColors createDefault(BlockColors colors) {
         ItemColors itemcolors = new ItemColors();
@@ -105,17 +_,20 @@
                     : FastColor.ARGB32.opaque(p_329710_.getOrDefault(DataComponents.MAP_COLOR, MapItemColor.DEFAULT).rgb()),
             Items.FILLED_MAP
         );
+        net.neoforged.neoforge.client.ClientHooks.onItemColorsInit(itemcolors, colors);
         return itemcolors;
     }
 
     public int getColor(ItemStack stack, int tintIndex) {
-        ItemColor itemcolor = this.itemColors.byId(BuiltInRegistries.ITEM.getId(stack.getItem()));
+        ItemColor itemcolor = this.itemColors.get(stack.getItem());
         return itemcolor == null ? -1 : itemcolor.getColor(stack, tintIndex);
     }
 
+    /** @deprecated Register via {@link net.neoforged.neoforge.client.event.RegisterColorHandlersEvent.Item} */
+    @Deprecated
     public void register(ItemColor itemColor, ItemLike... items) {
         for (ItemLike itemlike : items) {
-            this.itemColors.addMapping(itemColor, Item.getId(itemlike.asItem()));
+            this.itemColors.put(itemlike.asItem(), itemColor);
         }
     }
 }
