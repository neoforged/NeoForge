--- a/net/minecraft/client/color/block/BlockColors.java
+++ b/net/minecraft/client/color/block/BlockColors.java
@@ -29,7 +_,8 @@
 @OnlyIn(Dist.CLIENT)
 public class BlockColors {
     private static final int DEFAULT = -1;
-    private final IdMapper<BlockColor> blockColors = new IdMapper<>(32);
+    // Neo: Use the block instance directly as non-Vanilla block ids are not constant
+    private final java.util.Map<Block, BlockColor> blockColors = new java.util.IdentityHashMap<>();
     private final Map<Block, Set<Property<?>>> coloringStates = Maps.newHashMap();
 
     public static BlockColors createDefault() {
@@ -94,11 +_,12 @@
         }, Blocks.MELON_STEM, Blocks.PUMPKIN_STEM);
         blockcolors.addColoringState(StemBlock.AGE, Blocks.MELON_STEM, Blocks.PUMPKIN_STEM);
         blockcolors.register((p_92596_, p_92597_, p_92598_, p_92599_) -> p_92597_ != null && p_92598_ != null ? -14647248 : -9321636, Blocks.LILY_PAD);
+        net.neoforged.neoforge.client.ClientHooks.onBlockColorsInit(blockcolors);
         return blockcolors;
     }
 
     public int getColor(BlockState state, Level level, BlockPos pos) {
-        BlockColor blockcolor = this.blockColors.byId(BuiltInRegistries.BLOCK.getId(state.getBlock()));
+        BlockColor blockcolor = this.blockColors.get(state.getBlock());
         if (blockcolor != null) {
             return blockcolor.getColor(state, null, null, 0);
         } else {
@@ -108,13 +_,15 @@
     }
 
     public int getColor(BlockState state, @Nullable BlockAndTintGetter level, @Nullable BlockPos pos, int tintIndex) {
-        BlockColor blockcolor = this.blockColors.byId(BuiltInRegistries.BLOCK.getId(state.getBlock()));
+        BlockColor blockcolor = this.blockColors.get(state.getBlock());
         return blockcolor == null ? -1 : blockcolor.getColor(state, level, pos, tintIndex);
     }
 
+    /** @deprecated Register via {@link net.neoforged.neoforge.client.event.RegisterColorHandlersEvent.Block} */
+    @Deprecated
     public void register(BlockColor blockColor, Block... blocks) {
         for (Block block : blocks) {
-            this.blockColors.addMapping(blockColor, BuiltInRegistries.BLOCK.getId(block));
+            this.blockColors.put(block, blockColor);
         }
     }
 
