--- a/net/minecraft/gametest/framework/GameTestRegistry.java
+++ b/net/minecraft/gametest/framework/GameTestRegistry.java
@@ -15,6 +_,7 @@
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.stream.Stream;
+
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.block.Rotation;
 
@@ -25,21 +_,33 @@
     private static final Map<String, Consumer<ServerLevel>> AFTER_BATCH_FUNCTIONS = Maps.newHashMap();
     private static final Set<TestFunction> LAST_FAILED_TESTS = Sets.newHashSet();
 
+    /** @deprecated Forge: Use {@link net.neoforged.neoforge.event.RegisterGameTestsEvent RegisterGameTestsEvent} to register game tests */
+    @Deprecated
     public static void register(Class<?> testClass) {
         Arrays.stream(testClass.getDeclaredMethods()).sorted(Comparator.comparing(Method::getName)).forEach(GameTestRegistry::register);
     }
 
+    /** @deprecated Forge: Use {@link net.neoforged.neoforge.event.RegisterGameTestsEvent RegisterGameTestsEvent} to register game tests */
+    @Deprecated
     public static void register(Method testMethod) {
+         register(testMethod, java.util.Set.of());
+    }
+    /** @deprecated Forge: Use {@link net.neoforged.neoforge.event.RegisterGameTestsEvent RegisterGameTestsEvent} to register game tests */
+    @Deprecated
+    public static void register(Method testMethod, java.util.Set<String> allowedNamespaces) {
         String s = testMethod.getDeclaringClass().getSimpleName();
         GameTest gametest = testMethod.getAnnotation(GameTest.class);
-        if (gametest != null) {
+        if (gametest != null && (allowedNamespaces.isEmpty() || allowedNamespaces.contains(net.neoforged.neoforge.gametest.GameTestHooks.getTemplateNamespace(testMethod)))) {
             TEST_FUNCTIONS.add(turnMethodIntoTestFunction(testMethod));
             TEST_CLASS_NAMES.add(s);
         }
 
         GameTestGenerator gametestgenerator = testMethod.getAnnotation(GameTestGenerator.class);
         if (gametestgenerator != null) {
-            TEST_FUNCTIONS.addAll(useTestGeneratorMethod(testMethod));
+            Collection<TestFunction> testFunctions = new java.util.ArrayList<>(useTestGeneratorMethod(testMethod));
+            if (!allowedNamespaces.isEmpty())
+                 testFunctions.removeIf(t -> !allowedNamespaces.contains(net.minecraft.resources.ResourceLocation.parse(t.structureName()).getNamespace()));
+            TEST_FUNCTIONS.addAll(testFunctions);
             TEST_CLASS_NAMES.add(s);
         }
 
@@ -101,7 +_,9 @@
 
     private static Collection<TestFunction> useTestGeneratorMethod(Method testMethod) {
         try {
-            Object object = testMethod.getDeclaringClass().newInstance();
+            Object object = null;
+            if (!java.lang.reflect.Modifier.isStatic(testMethod.getModifiers()))
+                 object = testMethod.getDeclaringClass().newInstance();
             return (Collection<TestFunction>)testMethod.invoke(object);
         } catch (ReflectiveOperationException reflectiveoperationexception) {
             throw new RuntimeException(reflectiveoperationexception);
@@ -112,8 +_,9 @@
         GameTest gametest = testMethod.getAnnotation(GameTest.class);
         String s = testMethod.getDeclaringClass().getSimpleName();
         String s1 = s.toLowerCase();
-        String s2 = s1 + "." + testMethod.getName().toLowerCase();
-        String s3 = gametest.template().isEmpty() ? s2 : s1 + "." + gametest.template();
+        boolean prefixGameTestTemplate = net.neoforged.neoforge.gametest.GameTestHooks.prefixGameTestTemplate(testMethod);
+        String s2 = (prefixGameTestTemplate ? s1 + "." : "") + testMethod.getName().toLowerCase();
+        String s3 = net.neoforged.neoforge.gametest.GameTestHooks.getTemplateNamespace(testMethod) + ":" + (gametest.template().isEmpty() ? s2 : (prefixGameTestTemplate ? s1 + "." : "") + gametest.template());
         String s4 = gametest.batch();
         Rotation rotation = StructureUtils.getRotationForRotationSteps(gametest.rotationSteps());
         return new TestFunction(
@@ -135,7 +_,9 @@
     private static Consumer<?> turnMethodIntoConsumer(Method testMethod) {
         return p_177512_ -> {
             try {
-                Object object = testMethod.getDeclaringClass().newInstance();
+                Object object = null;
+                if (!java.lang.reflect.Modifier.isStatic(testMethod.getModifiers()))
+                     object = testMethod.getDeclaringClass().newInstance();
                 testMethod.invoke(object, p_177512_);
             } catch (InvocationTargetException invocationtargetexception) {
                 if (invocationtargetexception.getCause() instanceof RuntimeException) {
