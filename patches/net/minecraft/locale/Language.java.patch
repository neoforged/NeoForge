--- a/net/minecraft/locale/Language.java
+++ b/net/minecraft/locale/Language.java
@@ -36,9 +_,11 @@
         DeprecatedTranslationsInfo deprecatedtranslationsinfo = DeprecatedTranslationsInfo.loadFromDefaultResource();
         Map<String, String> map = new HashMap<>();
         BiConsumer<String, String> biconsumer = map::put;
-        parseTranslations(biconsumer, "/assets/minecraft/lang/en_us.json");
+        Map<String, net.minecraft.network.chat.Component> componentMap = new java.util.HashMap<>();
+        parseTranslations(biconsumer, componentMap::put, "/assets/minecraft/lang/en_us.json");
         deprecatedtranslationsinfo.applyToMap(map);
-        final Map<String, String> map1 = Map.copyOf(map);
+        final Map<String, String> map1 = map; // Neo keep the map mutable to make LanguageHook work
+        net.neoforged.neoforge.server.LanguageHook.captureLanguageMap(map, componentMap);
         return new Language() {
             @Override
             public String getOrDefault(String p_128127_, String p_265421_) {
@@ -65,21 +_,51 @@
                         )
                         .isPresent();
             }
+
+            @Override
+            public Map<String, String> getLanguageData() {
+                return map;
+            }
+
+            @Override
+            public @org.jetbrains.annotations.Nullable net.minecraft.network.chat.Component getComponent(String key) {
+                return componentMap.get(key);
+            }
         };
     }
 
+    @Deprecated
     private static void parseTranslations(BiConsumer<String, String> p_282031_, String p_283638_) {
+        parseTranslations(p_282031_, (key, value) -> {}, p_283638_);
+    }
+
+    private static void parseTranslations(BiConsumer<String, String> p_282031_, BiConsumer<String, net.minecraft.network.chat.Component> componentConsumer, String p_283638_) {
         try (InputStream inputstream = Language.class.getResourceAsStream(p_283638_)) {
-            loadFromJson(inputstream, p_282031_);
+            loadFromJson(inputstream, p_282031_, componentConsumer);
         } catch (JsonParseException | IOException ioexception) {
             LOGGER.error("Couldn't read strings from {}", p_283638_, ioexception);
         }
     }
 
     public static void loadFromJson(InputStream p_128109_, BiConsumer<String, String> p_128110_) {
+        loadFromJson(p_128109_, p_128110_, (key, value) -> {});
+    }
+
+    public static void loadFromJson(InputStream p_128109_, BiConsumer<String, String> p_128110_, BiConsumer<String, net.minecraft.network.chat.Component> componentConsumer) {
         JsonObject jsonobject = GSON.fromJson(new InputStreamReader(p_128109_, StandardCharsets.UTF_8), JsonObject.class);
 
         for (Entry<String, JsonElement> entry : jsonobject.entrySet()) {
+            if (entry.getValue().isJsonArray()) {
+                var component = net.minecraft.network.chat.ComponentSerialization.CODEC
+                    .parse(com.mojang.serialization.JsonOps.INSTANCE, entry.getValue())
+                    .getOrThrow(msg -> new com.google.gson.JsonParseException("Error parsing translation for " + entry.getKey() + ": " + msg));
+
+                p_128110_.accept(entry.getKey(), component.getString());
+                componentConsumer.accept(entry.getKey(), component);
+
+                continue;
+            }
+
             String s = UNSUPPORTED_FORMAT_PATTERN.matcher(GsonHelper.convertToString(entry.getValue(), entry.getKey())).replaceAll("%$1s");
             p_128110_.accept(entry.getKey(), s);
         }
@@ -91,6 +_,13 @@
 
     public static void inject(Language p_128115_) {
         instance = p_128115_;
+    }
+
+    // Neo: All helpers methods below are injected by Neo to ease modder's usage of Language
+    public Map<String, String> getLanguageData() { return com.google.common.collect.ImmutableMap.of(); }
+
+    public @org.jetbrains.annotations.Nullable net.minecraft.network.chat.Component getComponent(String key) {
+        return null;
     }
 
     public String getOrDefault(String p_128111_) {
