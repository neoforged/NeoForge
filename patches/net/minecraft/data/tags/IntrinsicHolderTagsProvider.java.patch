--- a/net/minecraft/data/tags/IntrinsicHolderTagsProvider.java
+++ b/net/minecraft/data/tags/IntrinsicHolderTagsProvider.java
@@ -13,37 +_,64 @@
 public abstract class IntrinsicHolderTagsProvider<T> extends TagsProvider<T> {
     private final Function<T, ResourceKey<T>> keyExtractor;
 
-    public IntrinsicHolderTagsProvider(
-        PackOutput output,
-        ResourceKey<? extends Registry<T>> registryKey,
-        CompletableFuture<HolderLookup.Provider> lookupProvider,
-        Function<T, ResourceKey<T>> keyExtractor
-    ) {
-        super(output, registryKey, lookupProvider);
-        this.keyExtractor = keyExtractor;
-    }
-
-    public IntrinsicHolderTagsProvider(
-        PackOutput output,
-        ResourceKey<? extends Registry<T>> registryKey,
-        CompletableFuture<HolderLookup.Provider> lookupProvider,
-        CompletableFuture<TagsProvider.TagLookup<T>> parentProvider,
-        Function<T, ResourceKey<T>> keyExtractor
-    ) {
-        super(output, registryKey, lookupProvider, parentProvider);
-        this.keyExtractor = keyExtractor;
-    }
+    @Deprecated
+    public IntrinsicHolderTagsProvider(
+        PackOutput output,
+        ResourceKey<? extends Registry<T>> registryKey,
+        CompletableFuture<HolderLookup.Provider> lookupProvider,
+        Function<T, ResourceKey<T>> keyExtractor
+    ) {
+        this(output, registryKey, lookupProvider, keyExtractor, "vanilla", null);
+    }
+
+    @Deprecated
+    public IntrinsicHolderTagsProvider(
+        PackOutput output,
+        ResourceKey<? extends Registry<T>> registryKey,
+        CompletableFuture<HolderLookup.Provider> lookupProvider,
+        CompletableFuture<TagsProvider.TagLookup<T>> parentProvider,
+        Function<T, ResourceKey<T>> keyExtractor
+    ) {
+        this(output, registryKey, lookupProvider, parentProvider, keyExtractor, "vanilla", null);
+    }
+
+    public IntrinsicHolderTagsProvider(
+        PackOutput output,
+        ResourceKey<? extends Registry<T>> registryKey,
+        CompletableFuture<HolderLookup.Provider> lookupProvider,
+        Function<T, ResourceKey<T>> keyExtractor,
+        String modId,
+        @org.jetbrains.annotations.Nullable net.neoforged.neoforge.common.data.ExistingFileHelper existingFileHelper
+    ) {
+        super(output, registryKey, lookupProvider, modId, existingFileHelper);
+        this.keyExtractor = keyExtractor;
+    }
+
+    public IntrinsicHolderTagsProvider(
+        PackOutput output,
+        ResourceKey<? extends Registry<T>> registryKey,
+        CompletableFuture<HolderLookup.Provider> lookupProvider,
+        CompletableFuture<TagsProvider.TagLookup<T>> parentProvider,
+        Function<T, ResourceKey<T>> keyExtractor,
+        String modId,
+        @org.jetbrains.annotations.Nullable net.neoforged.neoforge.common.data.ExistingFileHelper existingFileHelper
+    ) {
+        super(output, registryKey, lookupProvider, parentProvider, modId, existingFileHelper);
+        this.keyExtractor = keyExtractor;
+    }
+
+
 
     protected IntrinsicHolderTagsProvider.IntrinsicTagAppender<T> tag(TagKey<T> tag) {
         TagBuilder tagbuilder = this.getOrCreateRawBuilder(tag);
-        return new IntrinsicHolderTagsProvider.IntrinsicTagAppender<>(tagbuilder, this.keyExtractor);
+        return new IntrinsicHolderTagsProvider.IntrinsicTagAppender<>(tagbuilder, this.keyExtractor, this.modId);
     }
 
-    public static class IntrinsicTagAppender<T> extends TagsProvider.TagAppender<T> {
+    public static class IntrinsicTagAppender<T> extends TagsProvider.TagAppender<T> implements net.neoforged.neoforge.common.extensions.IIntrinsicHolderTagAppenderExtension<T> {
         private final Function<T, ResourceKey<T>> keyExtractor;
 
-        IntrinsicTagAppender(TagBuilder builder, Function<T, ResourceKey<T>> keyExtractor) {
-            super(builder);
+        IntrinsicTagAppender(TagBuilder builder, Function<T, ResourceKey<T>> keyExtractor, String modId) {
+            super(builder, modId);
             this.keyExtractor = keyExtractor;
         }
 
@@ -61,6 +_,11 @@
         public final IntrinsicHolderTagsProvider.IntrinsicTagAppender<T> add(T... values) {
             Stream.<T>of(values).map(this.keyExtractor).forEach(this::add);
             return this;
+        }
+
+        @Override
+        public final ResourceKey<T> getKey(T value) {
+            return this.keyExtractor.apply(value);
         }
     }
 }
