--- a/net/minecraft/data/tags/IntrinsicHolderTagsProvider.java
+++ b/net/minecraft/data/tags/IntrinsicHolderTagsProvider.java
@@ -13,37 +_,64 @@
 public abstract class IntrinsicHolderTagsProvider<T> extends TagsProvider<T> {
    private final Function<T, ResourceKey<T>> keyExtractor;
 
-   public IntrinsicHolderTagsProvider(
-      PackOutput p_256164_,
-      ResourceKey<? extends Registry<T>> p_256155_,
-      CompletableFuture<HolderLookup.Provider> p_256488_,
-      Function<T, ResourceKey<T>> p_256168_
-   ) {
-      super(p_256164_, p_256155_, p_256488_);
+   @Deprecated
+   public IntrinsicHolderTagsProvider(
+           PackOutput p_256164_,
+           ResourceKey<? extends Registry<T>> p_256155_,
+           CompletableFuture<HolderLookup.Provider> p_256488_,
+           Function<T, ResourceKey<T>> p_256168_
+   ) {
+      this(p_256164_, p_256155_, p_256488_, p_256168_, "vanilla", null);
+   }
+
+   @Deprecated
+   public IntrinsicHolderTagsProvider(
+           PackOutput p_275304_,
+           ResourceKey<? extends Registry<T>> p_275709_,
+           CompletableFuture<HolderLookup.Provider> p_275227_,
+           CompletableFuture<TagsProvider.TagLookup<T>> p_275311_,
+           Function<T, ResourceKey<T>> p_275566_
+   ) {
+      this(p_275304_, p_275709_, p_275227_, p_275311_, p_275566_, "vanilla", null);
+   }
+
+   public IntrinsicHolderTagsProvider(
+           PackOutput p_256164_,
+           ResourceKey<? extends Registry<T>> p_256155_,
+           CompletableFuture<HolderLookup.Provider> p_256488_,
+           Function<T, ResourceKey<T>> p_256168_,
+           String modId,
+           @javax.annotation.Nullable net.neoforged.neoforge.common.data.ExistingFileHelper existingFileHelper
+           ) {
+      super(p_256164_, p_256155_, p_256488_, modId, existingFileHelper);
       this.keyExtractor = p_256168_;
    }
 
    public IntrinsicHolderTagsProvider(
-      PackOutput p_275304_,
-      ResourceKey<? extends Registry<T>> p_275709_,
-      CompletableFuture<HolderLookup.Provider> p_275227_,
-      CompletableFuture<TagsProvider.TagLookup<T>> p_275311_,
-      Function<T, ResourceKey<T>> p_275566_
+           PackOutput p_275304_,
+           ResourceKey<? extends Registry<T>> p_275709_,
+           CompletableFuture<HolderLookup.Provider> p_275227_,
+           CompletableFuture<TagsProvider.TagLookup<T>> p_275311_,
+           Function<T, ResourceKey<T>> p_275566_,
+           String modId,
+           @javax.annotation.Nullable net.neoforged.neoforge.common.data.ExistingFileHelper existingFileHelper
    ) {
-      super(p_275304_, p_275709_, p_275227_, p_275311_);
+      super(p_275304_, p_275709_, p_275227_, p_275311_, modId, existingFileHelper);
       this.keyExtractor = p_275566_;
    }
 
+
+
    protected IntrinsicHolderTagsProvider.IntrinsicTagAppender<T> tag(TagKey<T> p_255730_) {
       TagBuilder tagbuilder = this.getOrCreateRawBuilder(p_255730_);
-      return new IntrinsicHolderTagsProvider.IntrinsicTagAppender<>(tagbuilder, this.keyExtractor);
+      return new IntrinsicHolderTagsProvider.IntrinsicTagAppender<>(tagbuilder, this.keyExtractor, this.modId);
    }
 
-   public static class IntrinsicTagAppender<T> extends TagsProvider.TagAppender<T> {
+   public static class IntrinsicTagAppender<T> extends TagsProvider.TagAppender<T> implements net.neoforged.neoforge.common.extensions.IIntrinsicHolderTagAppenderExtension<T> {
       private final Function<T, ResourceKey<T>> keyExtractor;
 
-      IntrinsicTagAppender(TagBuilder p_256108_, Function<T, ResourceKey<T>> p_256433_) {
-         super(p_256108_);
+      IntrinsicTagAppender(TagBuilder p_256108_, Function<T, ResourceKey<T>> p_256433_, String modId) {
+         super(p_256108_, modId);
          this.keyExtractor = p_256433_;
       }
 
@@ -61,6 +_,11 @@
       public final IntrinsicHolderTagsProvider.IntrinsicTagAppender<T> add(T... p_255868_) {
          Stream.<T>of(p_255868_).map(this.keyExtractor).forEach(this::add);
          return this;
+      }
+
+      @Override
+      public final ResourceKey<T> getKey(T value) {
+         return this.keyExtractor.apply(value);
       }
    }
 }
