--- a/net/minecraft/data/Main.java
+++ b/net/minecraft/data/Main.java
@@ -68,8 +_,15 @@
       OptionSpec<Void> optionspec6 = optionparser.accepts("all", "Include all generators");
       OptionSpec<String> optionspec7 = optionparser.accepts("output", "Output folder").withRequiredArg().defaultsTo("generated");
       OptionSpec<String> optionspec8 = optionparser.accepts("input", "Input folder").withRequiredArg();
+      OptionSpec<String> existing = optionparser.accepts("existing", "Existing resource packs that generated resources can reference").withRequiredArg();
+      OptionSpec<String> existingMod = optionparser.accepts("existing-mod", "Existing mods that generated resources can reference the resource packs of").withRequiredArg();
+      OptionSpec<java.io.File> gameDir = optionparser.accepts("gameDir").withRequiredArg().ofType(java.io.File.class).defaultsTo(new java.io.File(".")).required(); //Need by modlauncher, so lets just eat it
+      OptionSpec<String> mod = optionparser.accepts("mod", "A modid to dump").withRequiredArg().withValuesSeparatedBy(",");
+      OptionSpec<Void> flat = optionparser.accepts("flat", "Do not append modid prefix to output directory when generating for multiple mods");
+      OptionSpec<String> assetIndex = optionparser.accepts("assetIndex").withRequiredArg();
+      OptionSpec<java.io.File> assetsDir = optionparser.accepts("assetsDir").withRequiredArg().ofType(java.io.File.class);
       OptionSet optionset = optionparser.parse(p_129669_);
-      if (!optionset.has(optionspec) && optionset.hasOptions()) {
+      if (!optionset.has(optionspec) && optionset.hasOptions() && !(optionset.specs().size() == 1 && optionset.has(gameDir))) {
          Path path = Paths.get(optionspec7.value(optionset));
          boolean flag = optionset.has(optionspec6);
          boolean flag1 = flag || optionset.has(optionspec2);
@@ -77,9 +_,16 @@
          boolean flag3 = flag || optionset.has(optionspec3);
          boolean flag4 = flag || optionset.has(optionspec4);
          boolean flag5 = flag || optionset.has(optionspec5);
+         Collection<Path> inputs = optionset.valuesOf(optionspec8).stream().map(Paths::get).collect(Collectors.toList());
+         Collection<Path> existingPacks = optionset.valuesOf(existing).stream().map(Paths::get).collect(Collectors.toList());
+         java.util.Set<String> existingMods = new java.util.HashSet<>(optionset.valuesOf(existingMod));
+         java.util.Set<String> mods = new java.util.HashSet<>(optionset.valuesOf(mod));
+         boolean isFlat = mods.isEmpty() || optionset.has(flat);
+         net.neoforged.neoforge.data.loading.DatagenModLoader.begin(mods, path, inputs, existingPacks, existingMods, flag2, flag1, flag3, flag4, flag5, isFlat, optionset.valueOf(assetIndex), optionset.valueOf(assetsDir));
+         if (mods.contains("minecraft") || mods.isEmpty()) {
          DataGenerator datagenerator = createStandardGenerator(
-            path,
-            optionset.valuesOf(optionspec8).stream().map(p_129659_ -> Paths.get(p_129659_)).collect(Collectors.toList()),
+            isFlat ? path : path.resolve("minecraft"),
+            inputs,
             flag1,
             flag2,
             flag3,
@@ -89,6 +_,7 @@
             true
          );
          datagenerator.run();
+         }
       } else {
          optionparser.printHelpOn(System.out);
       }
@@ -121,7 +_,7 @@
       datagenerator$packgenerator2.addProvider(bindRegistries(RegistriesDatapackGenerator::new, completablefuture));
       datagenerator$packgenerator2.addProvider(bindRegistries(VanillaAdvancementProvider::create, completablefuture));
       datagenerator$packgenerator2.addProvider(VanillaLootTableProvider::create);
-      datagenerator$packgenerator2.addProvider(VanillaRecipeProvider::new);
+      datagenerator$packgenerator2.addProvider(bindRegistries(VanillaRecipeProvider::new, completablefuture));
       TagsProvider<Block> tagsprovider1 = datagenerator$packgenerator2.addProvider(bindRegistries(VanillaBlockTagsProvider::new, completablefuture));
       TagsProvider<Item> tagsprovider = datagenerator$packgenerator2.addProvider(
          p_274753_ -> new VanillaItemTagsProvider(p_274753_, completablefuture, tagsprovider1.contentsGetter())
@@ -147,7 +_,7 @@
       datagenerator$packgenerator2.addProvider(bindRegistries(CommandsReport::new, completablefuture));
       datagenerator$packgenerator2.addProvider(RegistryDumpReport::new);
       datagenerator$packgenerator2 = datagenerator.getBuiltinDatapack(p_236683_, "bundle");
-      datagenerator$packgenerator2.addProvider(BundleRecipeProvider::new);
+      datagenerator$packgenerator2.addProvider(bindRegistries(BundleRecipeProvider::new, completablefuture));
       datagenerator$packgenerator2.addProvider(
          p_253392_ -> PackMetadataGenerator.forFeaturePack(
                p_253392_, Component.translatable("dataPack.bundle.description"), FeatureFlagSet.of(FeatureFlags.BUNDLE)
