--- a/net/minecraft/data/recipes/ShapelessRecipeBuilder.java
+++ b/net/minecraft/data/recipes/ShapelessRecipeBuilder.java
@@ -22,15 +_,21 @@
     private final RecipeCategory category;
     private final Item result;
     private final int count;
+    private final ItemStack resultStack; // Neo: add stack result support
     private final NonNullList<Ingredient> ingredients = NonNullList.create();
     private final Map<String, Criterion<?>> criteria = new LinkedHashMap<>();
     @Nullable
     private String group;
 
     public ShapelessRecipeBuilder(RecipeCategory category, ItemLike result, int count) {
+        this(category, new ItemStack(result, count));
+    }
+
+    public ShapelessRecipeBuilder(RecipeCategory category, ItemStack result) {
         this.category = category;
-        this.result = result.asItem();
-        this.count = count;
+        this.result = result.getItem();
+        this.count = result.getCount();
+        this.resultStack = result;
     }
 
     public static ShapelessRecipeBuilder shapeless(RecipeCategory category, ItemLike result) {
@@ -41,6 +_,10 @@
         return new ShapelessRecipeBuilder(category, result, count);
     }
 
+    public static ShapelessRecipeBuilder shapeless(RecipeCategory category, ItemStack result) {
+        return new ShapelessRecipeBuilder(category, result);
+    }
+
     public ShapelessRecipeBuilder requires(TagKey<Item> tag) {
         return this.requires(Ingredient.of(tag));
     }
@@ -95,7 +_,7 @@
         ShapelessRecipe shapelessrecipe = new ShapelessRecipe(
             Objects.requireNonNullElse(this.group, ""),
             RecipeBuilder.determineBookCategory(this.category),
-            new ItemStack(this.result, this.count),
+            this.resultStack,
             this.ingredients
         );
         recipeOutput.accept(id, shapelessrecipe, advancement$builder.build(id.withPrefix("recipes/" + this.category.getFolderName() + "/")));
