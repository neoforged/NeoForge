--- a/net/minecraft/data/recipes/SimpleCookingRecipeBuilder.java
+++ b/net/minecraft/data/recipes/SimpleCookingRecipeBuilder.java
@@ -28,6 +_,7 @@
     private final RecipeCategory category;
     private final CookingBookCategory bookCategory;
     private final Item result;
+    private final ItemStack stackResult; // Neo: add stack result support
     private final Ingredient ingredient;
     private final float experience;
     private final int cookingTime;
@@ -45,9 +_,22 @@
         int cookingTime,
         AbstractCookingRecipe.Factory<?> factory
     ) {
+        this(category, bookCategory, new ItemStack(result), ingredient, experience, cookingTime, factory);
+    }
+
+    private SimpleCookingRecipeBuilder(
+            RecipeCategory category,
+            CookingBookCategory bookCategory,
+            ItemStack result,
+            Ingredient ingredient,
+            float experience,
+            int cookingTime,
+            AbstractCookingRecipe.Factory<?> factory
+    ) {
         this.category = category;
         this.bookCategory = bookCategory;
-        this.result = result.asItem();
+        this.result = result.getItem();
+        this.stackResult = result;
         this.ingredient = ingredient;
         this.experience = experience;
         this.cookingTime = cookingTime;
@@ -86,6 +_,38 @@
         return new SimpleCookingRecipeBuilder(category, CookingBookCategory.FOOD, result, ingredient, experience, cookingTime, SmokingRecipe::new);
     }
 
+    public static <T extends AbstractCookingRecipe> SimpleCookingRecipeBuilder generic(
+            Ingredient ingredient,
+            RecipeCategory category,
+            ItemStack result,
+            float experience,
+            int cookingTime,
+            RecipeSerializer<T> cookingSerializer,
+            AbstractCookingRecipe.Factory<T> factory
+    ) {
+        return new SimpleCookingRecipeBuilder(category, determineSmeltingRecipeCategory(result.getItem()), result, ingredient, experience, cookingTime, factory);
+    }
+
+    public static SimpleCookingRecipeBuilder campfireCooking(Ingredient ingredient, RecipeCategory category, ItemStack result, float experience, int cookingTime) {
+        return new SimpleCookingRecipeBuilder(category, CookingBookCategory.FOOD, result, ingredient, experience, cookingTime, CampfireCookingRecipe::new);
+    }
+
+    public static SimpleCookingRecipeBuilder blasting(Ingredient ingredient, RecipeCategory category, ItemStack result, float experience, int cookingTime) {
+        return new SimpleCookingRecipeBuilder(
+                category, determineBlastingRecipeCategory(result.getItem()), result, ingredient, experience, cookingTime, BlastingRecipe::new
+        );
+    }
+
+    public static SimpleCookingRecipeBuilder smelting(Ingredient ingredient, RecipeCategory category, ItemStack result, float experience, int cookingTime) {
+        return new SimpleCookingRecipeBuilder(
+                category, determineSmeltingRecipeCategory(result.getItem()), result, ingredient, experience, cookingTime, SmeltingRecipe::new
+        );
+    }
+
+    public static SimpleCookingRecipeBuilder smoking(Ingredient ingredient, RecipeCategory category, ItemStack result, float experience, int cookingTime) {
+        return new SimpleCookingRecipeBuilder(category, CookingBookCategory.FOOD, result, ingredient, experience, cookingTime, SmokingRecipe::new);
+    }
+
     public SimpleCookingRecipeBuilder unlockedBy(String name, Criterion<?> criterion) {
         this.criteria.put(name, criterion);
         return this;
@@ -111,7 +_,7 @@
         this.criteria.forEach(advancement$builder::addCriterion);
         AbstractCookingRecipe abstractcookingrecipe = this.factory
             .create(
-                Objects.requireNonNullElse(this.group, ""), this.bookCategory, this.ingredient, new ItemStack(this.result), this.experience, this.cookingTime
+                Objects.requireNonNullElse(this.group, ""), this.bookCategory, this.ingredient, this.stackResult, this.experience, this.cookingTime
             );
         recipeOutput.accept(id, abstractcookingrecipe, advancement$builder.build(id.withPrefix("recipes/" + this.category.getFolderName() + "/")));
     }
