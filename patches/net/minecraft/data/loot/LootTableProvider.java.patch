--- a/net/minecraft/data/loot/LootTableProvider.java
+++ b/net/minecraft/data/loot/LootTableProvider.java
@@ -45,7 +_,7 @@
    public CompletableFuture<?> run(CachedOutput p_254060_) {
       final Map<ResourceLocation, LootTable> map = Maps.newHashMap();
       Map<RandomSupport.Seed128bit, ResourceLocation> map1 = new Object2ObjectOpenHashMap<>();
-      this.subProviders.forEach(p_288263_ -> p_288263_.provider().get().generate((p_288259_, p_288260_) -> {
+      getTables().forEach(p_288263_ -> p_288263_.provider().get().generate((p_288259_, p_288260_) -> {
             ResourceLocation resourcelocation1 = map1.put(RandomSequence.seedForKey(p_288259_), p_288259_);
             if (resourcelocation1 != null) {
                Util.logAndPauseIfInIde("Loot table random sequence seed collision on " + resourcelocation1 + " and " + p_288259_);
@@ -64,15 +_,8 @@
          }
       });
 
-      for(ResourceLocation resourcelocation : Sets.difference(this.requiredTables, map.keySet())) {
-         validationcontext.reportProblem("Missing built-in table: " + resourcelocation);
-      }
+      validate(map, validationcontext);
 
-      map.forEach(
-         (p_278897_, p_278898_) -> p_278898_.validate(
-               validationcontext.setParams(p_278898_.getParamSet()).enterElement("{" + p_278897_ + "}", new LootDataId<>(LootDataType.TABLE, p_278897_))
-            )
-      );
       Multimap<String, String> multimap = validationcontext.getProblems();
       if (!multimap.isEmpty()) {
          multimap.forEach((p_124446_, p_124447_) -> LOGGER.warn("Found validation problem in {}: {}", p_124446_, p_124447_));
@@ -85,6 +_,20 @@
             return DataProvider.saveStable(p_254060_, LootTable.CODEC, loottable, path);
          }).toArray(p_253403_ -> new CompletableFuture[p_253403_]));
       }
+   }
+
+   public List<LootTableProvider.SubProviderEntry> getTables() {
+      return this.subProviders;
+   }
+
+   protected void validate(Map<ResourceLocation, LootTable> map, ValidationContext validationcontext) {
+      for(ResourceLocation resourcelocation : Sets.difference(this.requiredTables, map.keySet())) {
+         validationcontext.reportProblem("Missing built-in table: " + resourcelocation);
+      }
+
+      map.forEach((p_278897_, p_278898_) -> {
+         p_278898_.validate(validationcontext.setParams(p_278898_.getParamSet()).enterElement("{" + p_278897_ + "}", new LootDataId<>(LootDataType.TABLE, p_278897_)));
+      });
    }
 
    @Override
