--- a/net/minecraft/data/loot/LootTableProvider.java
+++ b/net/minecraft/data/loot/LootTableProvider.java
@@ -62,34 +_,24 @@
     private CompletableFuture<?> run(CachedOutput p_324447_, HolderLookup.Provider p_323978_) {
         WritableRegistry<LootTable> writableregistry = new MappedRegistry<>(Registries.LOOT_TABLE, Lifecycle.experimental());
         Map<RandomSupport.Seed128bit, ResourceLocation> map = new Object2ObjectOpenHashMap<>();
-        this.subProviders.forEach(p_344197_ -> p_344197_.provider().apply(p_323978_).generate((p_380827_, p_380828_) -> {
-                ResourceLocation resourcelocation = sequenceIdForLootTable(p_380827_);
+        getTables().forEach(p_329847_ -> p_329847_.provider().apply(p_323978_).generate((p_335199_, p_335200_) -> {
+                ResourceLocation resourcelocation = sequenceIdForLootTable(p_335199_);
                 ResourceLocation resourcelocation1 = map.put(RandomSequence.seedForKey(resourcelocation), resourcelocation);
                 if (resourcelocation1 != null) {
-                    Util.logAndPauseIfInIde("Loot table random sequence seed collision on " + resourcelocation1 + " and " + p_380827_.location());
+                    Util.logAndPauseIfInIde("Loot table random sequence seed collision on " + resourcelocation1 + " and " + p_335199_.location());
                 }
 
-                p_380828_.setRandomSequence(resourcelocation);
-                LootTable loottable = p_380828_.setParamSet(p_344197_.paramSet).build();
-                writableregistry.register(p_380827_, loottable, RegistrationInfo.BUILT_IN);
+                p_335200_.setRandomSequence(resourcelocation);
+                LootTable loottable = p_335200_.setParamSet(p_329847_.paramSet).build();
+                writableregistry.register(p_335199_, loottable, RegistrationInfo.BUILT_IN);
             }));
         writableregistry.freeze();
         ProblemReporter.Collector problemreporter$collector = new ProblemReporter.Collector();
         HolderGetter.Provider holdergetter$provider = new RegistryAccess.ImmutableRegistryAccess(List.of(writableregistry)).freeze();
         ValidationContext validationcontext = new ValidationContext(problemreporter$collector, LootContextParamSets.ALL_PARAMS, holdergetter$provider);
 
-        for (ResourceKey<LootTable> resourcekey : Sets.difference(this.requiredTables, writableregistry.registryKeySet())) {
-            problemreporter$collector.report("Missing built-in table: " + resourcekey.location());
-        }
+        validate(writableregistry, validationcontext, problemreporter$collector);
 
-        writableregistry.listElements()
-            .forEach(
-                p_380823_ -> p_380823_.value()
-                        .validate(
-                            validationcontext.setContextKeySet(p_380823_.value().getParamSet())
-                                .enterElement("{" + p_380823_.key().location() + "}", p_380823_.key())
-                        )
-            );
         Multimap<String, String> multimap = problemreporter$collector.get();
         if (!multimap.isEmpty()) {
             multimap.forEach((p_124446_, p_124447_) -> LOGGER.warn("Found validation problem in {}: {}", p_124446_, p_124447_));
@@ -102,6 +_,20 @@
                 return DataProvider.saveStable(p_324447_, p_323978_, LootTable.DIRECT_CODEC, loottable, path);
             }).toArray(CompletableFuture[]::new));
         }
+    }
+
+    public List<LootTableProvider.SubProviderEntry> getTables() {
+        return this.subProviders;
+    }
+
+    protected void validate(WritableRegistry<LootTable> writableregistry, ValidationContext validationcontext, ProblemReporter.Collector problemreporter$collector) {
+        for(ResourceKey<LootTable> resourcekey : Sets.difference(this.requiredTables, writableregistry.registryKeySet())) {
+            problemreporter$collector.report("Missing built-in table: " + resourcekey.location());
+        }
+
+        writableregistry.listElements().forEach(p_335195_ -> {
+            p_335195_.value().validate(validationcontext.setContextKeySet(p_335195_.value().getParamSet()).enterElement("{" + p_335195_.key().location() + "}", p_335195_.key()));
+        });
     }
 
     private static ResourceLocation sequenceIdForLootTable(ResourceKey<LootTable> p_336172_) {
