--- a/net/minecraft/data/registries/RegistriesDatapackGenerator.java
+++ b/net/minecraft/data/registries/RegistriesDatapackGenerator.java
@@ -19,16 +_,32 @@
 import net.minecraft.resources.ResourceKey;
 import org.slf4j.Logger;
 
+/**
+ * @deprecated Forge: Use {@link net.neoforged.neoforge.common.data.DatapackBuiltinEntriesProvider} instead
+ */
+@Deprecated
 public class RegistriesDatapackGenerator implements DataProvider {
    private static final Logger LOGGER = LogUtils.getLogger();
    private final PackOutput output;
    private final CompletableFuture<HolderLookup.Provider> registries;
+   private final java.util.function.Predicate<String> namespacePredicate;
 
+   @Deprecated
    public RegistriesDatapackGenerator(PackOutput p_256643_, CompletableFuture<HolderLookup.Provider> p_255780_) {
+      this(p_256643_, p_255780_, null);
+   }
+
+   public RegistriesDatapackGenerator(PackOutput p_256643_, CompletableFuture<HolderLookup.Provider> p_255780_, @org.jetbrains.annotations.Nullable java.util.Set<String> modIds) {
+      this.namespacePredicate = modIds == null ? namespace -> true : modIds::contains;
       this.registries = p_255780_;
       this.output = p_256643_;
    }
 
+   /** Forge: Call this to get the registry holder lookup provider that includes elements added via {@link net.neoforged.neoforge.common.data.DatapackBuiltinEntriesProvider} */
+   public CompletableFuture<HolderLookup.Provider> getRegistryProvider() {
+      return registries;
+   }
+
    @Override
    public CompletableFuture<?> run(CachedOutput p_255785_) {
       return this.registries
@@ -36,8 +_,7 @@
             p_256533_ -> {
                DynamicOps<JsonElement> dynamicops = RegistryOps.create(JsonOps.INSTANCE, p_256533_);
                return CompletableFuture.allOf(
-                  RegistryDataLoader.WORLDGEN_REGISTRIES
-                     .stream()
+                      net.neoforged.neoforge.registries.DataPackRegistriesHooks.getDataPackRegistriesWithDimensions()
                      .flatMap(p_256552_ -> this.dumpRegistryCap(p_255785_, p_256533_, dynamicops, p_256552_).stream())
                      .toArray(p_255809_ -> new CompletableFuture[p_255809_])
                );
@@ -52,9 +_,10 @@
       return p_256492_.lookup(resourcekey)
          .map(
             p_255847_ -> {
-               PackOutput.PathProvider packoutput$pathprovider = this.output.createPathProvider(PackOutput.Target.DATA_PACK, resourcekey.location().getPath());
+               PackOutput.PathProvider packoutput$pathprovider = this.output.createPathProvider(PackOutput.Target.DATA_PACK, net.neoforged.neoforge.common.CommonHooks.prefixNamespace(resourcekey.location()));
                return CompletableFuture.allOf(
                   p_255847_.listElements()
+                     .filter(holder -> this.namespacePredicate.test(holder.key().location().getNamespace()))
                      .map(
                         p_256105_ -> dumpValue(
                               packoutput$pathprovider.json(p_256105_.key().location()), p_256502_, p_256000_, p_256449_.elementCodec(), (T)p_256105_.value()
