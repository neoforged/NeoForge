--- a/net/minecraft/data/registries/RegistriesDatapackGenerator.java
+++ b/net/minecraft/data/registries/RegistriesDatapackGenerator.java
@@ -17,11 +_,22 @@
 import net.minecraft.resources.RegistryDataLoader;
 import net.minecraft.resources.ResourceKey;
 
+/**
+ * @deprecated Forge: Use {@link net.neoforged.neoforge.common.data.DatapackBuiltinEntriesProvider} instead
+ */
+@Deprecated
 public class RegistriesDatapackGenerator implements DataProvider {
     private final PackOutput output;
     private final CompletableFuture<HolderLookup.Provider> registries;
+    private final java.util.function.Predicate<String> namespacePredicate;
 
+    @Deprecated
     public RegistriesDatapackGenerator(PackOutput output, CompletableFuture<HolderLookup.Provider> registries) {
+        this(output, registries, null);
+    }
+
+    public RegistriesDatapackGenerator(PackOutput output, CompletableFuture<HolderLookup.Provider> registries, @org.jetbrains.annotations.Nullable java.util.Set<String> modIds) {
+        this.namespacePredicate = modIds == null ? namespace -> true : modIds::contains;
         this.registries = registries;
         this.output = output;
     }
@@ -33,8 +_,7 @@
                 p_326736_ -> {
                     DynamicOps<JsonElement> dynamicops = p_326736_.createSerializationContext(JsonOps.INSTANCE);
                     return CompletableFuture.allOf(
-                        RegistryDataLoader.WORLDGEN_REGISTRIES
-                            .stream()
+                        net.neoforged.neoforge.registries.DataPackRegistriesHooks.getDataPackRegistriesWithDimensions()
                             .flatMap(
                                 p_256552_ -> this.dumpRegistryCap(output, p_326736_, dynamicops, (RegistryDataLoader.RegistryData<?>)p_256552_).stream()
                             )
@@ -54,6 +_,7 @@
                     PackOutput.PathProvider packoutput$pathprovider = this.output.createRegistryElementsPathProvider(resourcekey);
                     return CompletableFuture.allOf(
                         p_349921_.listElements()
+                            .filter(holder -> this.namespacePredicate.test(holder.key().location().getNamespace()))
                             .map(
                                 p_256105_ -> dumpValue(
                                         packoutput$pathprovider.json(p_256105_.key().location()),
