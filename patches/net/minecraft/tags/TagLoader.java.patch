--- a/net/minecraft/tags/TagLoader.java
+++ b/net/minecraft/tags/TagLoader.java
@@ -57,6 +_,7 @@
 
                     String s = resource.sourcePackId();
                     tagfile.entries().forEach(p_215997_ -> list.add(new TagLoader.EntryWithSource(p_215997_, s)));
+                    tagfile.remove().forEach(e -> list.add(new TagLoader.EntryWithSource(e, s, true)));
                 } catch (Exception exception) {
                     LOGGER.error("Couldn't read tag list {} from {} in data pack {}", resourcelocation1, resourcelocation, resource.sourcePackId(), exception);
                 }
@@ -67,16 +_,17 @@
     }
 
     private Either<Collection<TagLoader.EntryWithSource>, Collection<T>> build(TagEntry.Lookup<T> lookup, List<TagLoader.EntryWithSource> entries) {
-        Builder<T> builder = ImmutableSet.builder();
+        var builder = new java.util.LinkedHashSet<T>(); // Set must retain insertion order, some tag consumers rely on this being the case (see NeoForge#256)
         List<TagLoader.EntryWithSource> list = new ArrayList<>();
 
         for (TagLoader.EntryWithSource tagloader$entrywithsource : entries) {
-            if (!tagloader$entrywithsource.entry().build(lookup, builder::add)) {
+            if (!tagloader$entrywithsource.entry().build(lookup, tagloader$entrywithsource.remove() ? builder::remove : builder::add)) {
+                if (!tagloader$entrywithsource.remove()) // Treat all removals as optional at runtime. If it was missing, then it could of never been added.
                 list.add(tagloader$entrywithsource);
             }
         }
 
-        return list.isEmpty() ? Either.right(builder.build()) : Either.left(list);
+        return list.isEmpty() ? Either.right(List.copyOf(builder)) : Either.left(list);
     }
 
     public Map<ResourceLocation, Collection<T>> build(Map<ResourceLocation, List<TagLoader.EntryWithSource>> builders) {
@@ -104,7 +_,7 @@
                         p_215977_ -> LOGGER.error(
                                 "Couldn't load tag {} as it is missing following references: {}",
                                 p_284682_,
-                                p_215977_.stream().map(Objects::toString).collect(Collectors.joining(", "))
+                                p_215977_.stream().map(Objects::toString).collect(Collectors.joining("\n\t", "\n\t", ""))
                             )
                     )
                     .ifRight(p_216001_ -> map.put(p_284682_, (Collection<T>)p_216001_))
@@ -116,7 +_,8 @@
         return this.build(this.load(resourceManager));
     }
 
-    public static record EntryWithSource(TagEntry entry, String source) {
+    public static record EntryWithSource(TagEntry entry, String source, boolean remove) {
+        public EntryWithSource(TagEntry entry, String source) { this(entry, source, false); }
         @Override
         public String toString() {
             return this.entry + " (from " + this.source + ")";
