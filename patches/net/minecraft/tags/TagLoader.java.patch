--- a/net/minecraft/tags/TagLoader.java
+++ b/net/minecraft/tags/TagLoader.java
@@ -64,6 +_,7 @@
 
                     String s = resource.sourcePackId();
                     tagfile.entries().forEach(p_215997_ -> list.add(new TagLoader.EntryWithSource(p_215997_, s)));
+                    tagfile.remove().forEach(e -> list.add(new TagLoader.EntryWithSource(e, s, true)));
                 } catch (Exception exception) {
                     LOGGER.error("Couldn't read tag list {} from {} in data pack {}", resourcelocation1, resourcelocation, resource.sourcePackId(), exception);
                 }
@@ -78,7 +_,8 @@
         List<TagLoader.EntryWithSource> list = new ArrayList<>();
 
         for (TagLoader.EntryWithSource tagloader$entrywithsource : p_215980_) {
-            if (!tagloader$entrywithsource.entry().build(p_215979_, sequencedset::add)) {
+            if (!tagloader$entrywithsource.entry().build(p_215979_, tagloader$entrywithsource.remove() ? sequencedset::remove : sequencedset::add)) {
+                if (!tagloader$entrywithsource.remove()) // Treat all removals as optional at runtime. If it was missing, then it could of never been added.
                 list.add(tagloader$entrywithsource);
             }
         }
@@ -111,7 +_,7 @@
                         p_359633_ -> LOGGER.error(
                                 "Couldn't load tag {} as it is missing following references: {}",
                                 p_359645_,
-                                p_359633_.stream().map(Objects::toString).collect(Collectors.joining(", "))
+                                p_359633_.stream().map(Objects::toString).collect(Collectors.joining("\n\t", "\n\t", ""))
                             )
                     )
                     .ifRight(p_364232_ -> map.put(p_359645_, (List<T>)p_364232_))
@@ -183,7 +_,11 @@
         }
     }
 
-    public static record EntryWithSource(TagEntry entry, String source) {
+    public static record EntryWithSource(TagEntry entry, String source, boolean remove) {
+        public EntryWithSource(TagEntry entry, String source) {
+            this(entry, source, false);
+        }
+
         @Override
         public String toString() {
             return this.entry + " (from " + this.source + ")";
