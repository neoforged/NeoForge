--- a/net/minecraft/network/syncher/EntityDataSerializers.java
+++ b/net/minecraft/network/syncher/EntityDataSerializers.java
@@ -124,17 +_,29 @@
     public static final EntityDataSerializer<Vector3f> VECTOR3 = EntityDataSerializer.forValueType(ByteBufCodecs.VECTOR3F);
     public static final EntityDataSerializer<Quaternionf> QUATERNION = EntityDataSerializer.forValueType(ByteBufCodecs.QUATERNIONF);
 
+    private static final org.slf4j.Logger LOGGER = com.mojang.logging.LogUtils.getLogger();
+    private static final StackWalker STACK_WALKER = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);
+    /**
+     * @deprecated NeoForge: Use {@link net.neoforged.neoforge.registries.NeoForgeRegistries#ENTITY_DATA_SERIALIZERS} instead
+     */
+    @Deprecated
     public static void registerSerializer(EntityDataSerializer<?> p_135051_) {
-        SERIALIZERS.add(p_135051_);
+        if (!STACK_WALKER.getCallerClass().equals(EntityDataSerializers.class)) {
+            LOGGER.error("Modded EntityDataSerializers must be registered to NeoForgeRegistries.ENTITY_DATA_SERIALIZERS instead to prevent ID mismatches between client and server!");
+            throw new UnsupportedOperationException("Modded EntityDataSerializers must be registered to NeoForgeRegistries.ENTITY_DATA_SERIALIZERS instead to prevent ID mismatches between client and server!");
+        }
+
+        if (SERIALIZERS.add(p_135051_) >= net.neoforged.neoforge.common.CommonHooks.VANILLA_SERIALIZER_LIMIT)
+            throw new RuntimeException("Vanilla EntityDataSerializer ID limit exceeded");
     }
 
     @Nullable
     public static EntityDataSerializer<?> getSerializer(int p_135049_) {
-        return SERIALIZERS.byId(p_135049_);
+        return net.neoforged.neoforge.common.CommonHooks.getSerializer(p_135049_, SERIALIZERS);
     }
 
     public static int getSerializedId(EntityDataSerializer<?> p_135053_) {
-        return SERIALIZERS.getId(p_135053_);
+        return net.neoforged.neoforge.common.CommonHooks.getSerializerId(p_135053_, SERIALIZERS);
     }
 
     private EntityDataSerializers() {
