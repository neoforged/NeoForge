--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -107,6 +_,8 @@
     private volatile DisconnectionDetails delayedDisconnect;
     @Nullable
     BandwidthDebugMonitor bandwidthDebugMonitor;
+    @Nullable
+    private ProtocolInfo<?> inboundProtocol;
 
     public Connection(PacketFlow p_129482_) {
         this.receiving = p_129482_;
@@ -120,11 +_,13 @@
         if (this.delayedDisconnect != null) {
             this.disconnect(this.delayedDisconnect);
         }
+        net.neoforged.neoforge.network.connection.ConnectionUtils.setConnection(p_129525_, this);
     }
 
     @Override
     public void channelInactive(ChannelHandlerContext p_129527_) {
         this.disconnect(Component.translatable("disconnect.endOfStream"));
+        net.neoforged.neoforge.network.connection.ConnectionUtils.removeConnection(p_129527_);
     }
 
     @Override
@@ -141,6 +_,13 @@
                 } else {
                     Component component = Component.translatable("disconnect.genericReason", "Internal Exception: " + p_129534_);
                     PacketListener packetlistener = this.packetListener;
+                    if (packetlistener != null) {
+                        ConnectionProtocol protocol = packetlistener.protocol();
+                        if (protocol == ConnectionProtocol.CONFIGURATION || protocol == ConnectionProtocol.PLAY) {
+                            // Neo: Always log critical network exceptions for config and play packets
+                            LOGGER.error("Exception caught in connection", p_129534_);
+                        }
+                    }
                     DisconnectionDetails disconnectiondetails;
                     if (packetlistener != null) {
                         disconnectiondetails = packetlistener.createDisconnectionInfo(component, p_129534_);
@@ -226,6 +_,7 @@
         if (p_320903_.flow() != this.getReceiving()) {
             throw new IllegalStateException("Invalid inbound protocol: " + p_320903_.id());
         } else {
+            this.inboundProtocol = p_320903_;
             this.packetListener = p_320940_;
             this.disconnectListener = null;
             UnconfiguredPipelineHandler.InboundConfigurationTask unconfiguredpipelinehandler$inboundconfigurationtask = UnconfiguredPipelineHandler.setupInboundProtocol(
@@ -254,7 +_,12 @@
             if (bundlerinfo != null) {
                 PacketBundleUnpacker packetbundleunpacker = new PacketBundleUnpacker(bundlerinfo);
                 unconfiguredpipelinehandler$outboundconfigurationtask = unconfiguredpipelinehandler$outboundconfigurationtask.andThen(
-                    p_319516_ -> p_319516_.pipeline().addAfter("encoder", "unbundler", packetbundleunpacker)
+                    p_319516_ -> {
+                        p_319516_.pipeline().addAfter("encoder", "unbundler", packetbundleunpacker);
+                        // Neo: our handlers must be between the encoder and the unbundler, so re-inject them
+                        // Note, this call must be inside the .andThen lambda, or it will actually run before the unbundler gets added.
+                        net.neoforged.neoforge.network.filters.NetworkFilters.injectIfNecessary(this);
+                    }
                 );
             }
 
@@ -427,7 +_,7 @@
         if (this.address == null) {
             return "local";
         } else {
-            return p_295875_ ? this.address.toString() : "IP hidden";
+            return p_295875_ ? net.neoforged.neoforge.network.DualStackUtils.getAddressString(this.address) : "IP hidden";
         }
     }
 
@@ -470,6 +_,7 @@
     }
 
     public static ChannelFuture connect(InetSocketAddress p_290034_, boolean p_290035_, final Connection p_290031_) {
+        net.neoforged.neoforge.network.DualStackUtils.checkIPv6(p_290034_.getAddress());
         Class<? extends SocketChannel> oclass;
         EventLoopGroup eventloopgroup;
         if (Epoll.isAvailable() && p_290035_) {
@@ -638,5 +_,17 @@
 
     public void setBandwidthLogger(LocalSampleLogger p_323799_) {
         this.bandwidthDebugMonitor = new BandwidthDebugMonitor(p_323799_);
+    }
+
+    public Channel channel() {
+        return this.channel;
+    }
+
+    public PacketFlow getDirection() {
+        return this.receiving;
+    }
+
+    public ProtocolInfo<?> getInboundProtocol() {
+        return Objects.requireNonNull(this.inboundProtocol, "Inbound protocol not set?");
     }
 }
