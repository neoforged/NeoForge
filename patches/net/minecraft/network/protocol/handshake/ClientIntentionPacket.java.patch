--- a/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java
+++ b/net/minecraft/network/protocol/handshake/ClientIntentionPacket.java
@@ -4,25 +_,29 @@
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientIntentionPacket(int protocolVersion, String hostName, int port, ClientIntent intention) implements Packet<ServerHandshakePacketListener> {
+public record ClientIntentionPacket(int protocolVersion, String hostName, int port, ClientIntent intention, String fmlVersion) implements Packet<ServerHandshakePacketListener> {
    private static final int MAX_HOST_LENGTH = 255;
 
+   public ClientIntentionPacket {
+      if (fmlVersion == null) {
+         fmlVersion = net.neoforged.neoforge.network.NetworkHooks.getFMLVersion(hostName);
+         hostName = hostName.split("\0")[0];
+      }
+   }
+
    @Deprecated
    public ClientIntentionPacket(int protocolVersion, String hostName, int port, ClientIntent intention) {
-      this.protocolVersion = protocolVersion;
-      this.hostName = hostName;
-      this.port = port;
-      this.intention = intention;
+      this(protocolVersion, hostName, port, intention, net.neoforged.neoforge.network.NetworkConstants.NETVERSION);
    }
 
    public ClientIntentionPacket(FriendlyByteBuf p_179801_) {
-      this(p_179801_.readVarInt(), p_179801_.readUtf(255), p_179801_.readUnsignedShort(), ClientIntent.byId(p_179801_.readVarInt()));
+      this(p_179801_.readVarInt(), p_179801_.readUtf(255), p_179801_.readUnsignedShort(), ClientIntent.byId(p_179801_.readVarInt()), null);
    }
 
    @Override
    public void write(FriendlyByteBuf p_134737_) {
       p_134737_.writeVarInt(this.protocolVersion);
-      p_134737_.writeUtf(this.hostName);
+      p_134737_.writeUtf(this.hostName + "\0" + this.fmlVersion + "\0");
       p_134737_.writeShort(this.port);
       p_134737_.writeVarInt(this.intention.id());
    }
@@ -34,5 +_,9 @@
    @Override
    public ConnectionProtocol nextProtocol() {
       return this.intention.protocol();
+   }
+
+   public String getFMLVersion() {
+      return this.fmlVersion;
    }
 }
