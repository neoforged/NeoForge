--- a/net/minecraft/server/ReloadableServerResources.java
+++ b/net/minecraft/server/ReloadableServerResources.java
@@ -49,6 +_,8 @@
         this.commands = new Commands(commandSelection, CommandBuildContext.simple(this.registryLookup, enabledFeatures));
         this.advancements = new ServerAdvancementManager(this.registryLookup);
         this.functionLibrary = new ServerFunctionLibrary(functionCompilationLevel, this.commands.getDispatcher());
+        // Neo: Create context object
+        this.context = new net.neoforged.neoforge.common.conditions.ConditionContext(this.tagManager);
     }
 
     public ServerFunctionLibrary getFunctionLibrary() {
@@ -75,6 +_,24 @@
         return List.of(this.tagManager, this.recipes, this.functionLibrary, this.advancements);
     }
 
+    private final net.neoforged.neoforge.common.conditions.ICondition.IContext context;
+
+    /**
+     * Exposes the current condition context for usage in other reload listeners.<br>
+     * This is not useful outside the reloading stage.
+     * @return The condition context for the currently active reload.
+     */
+    public net.neoforged.neoforge.common.conditions.ICondition.IContext getConditionContext() {
+        return this.context;
+    }
+
+    /**
+      * {@return the lookup provider access for the currently active reload}
+      */
+    public HolderLookup.Provider getRegistryLookup() {
+        return this.registryLookup;
+    }
+
     public static CompletableFuture<ReloadableServerResources> loadResources(
         ResourceManager resourceManager,
         LayeredRegistryAccess<RegistryLayer> registries,
@@ -90,14 +_,27 @@
                     ReloadableServerResources reloadableserverresources = new ReloadableServerResources(
                         p_335211_.compositeAccess(), enabledFeatures, commandSelection, functionCompilationLevel
                     );
+                    List<PreparableReloadListener> listeners = new java.util.ArrayList<>(reloadableserverresources.listeners());
+                    listeners.addAll(net.neoforged.neoforge.event.EventHooks.onResourceReload(reloadableserverresources, p_335211_.compositeAccess()));
+                    listeners.forEach(rl -> {
+                        if (rl instanceof net.neoforged.neoforge.resource.ContextAwareReloadListener srl) srl.injectContext(reloadableserverresources.context, reloadableserverresources.registryLookup);
+                    });
                     return SimpleReloadInstance.create(
-                            resourceManager, reloadableserverresources.listeners(), backgroundExecutor, gameExecutor, DATA_RELOAD_INITIAL_TASK, LOGGER.isDebugEnabled()
+                            resourceManager, listeners, backgroundExecutor, gameExecutor, DATA_RELOAD_INITIAL_TASK, LOGGER.isDebugEnabled()
                         )
                         .done()
                         .whenComplete(
                             (p_323178_, p_323179_) -> reloadableserverresources.registryLookup
                                     .missingTagAccessPolicy(ReloadableServerResources.MissingTagAccessPolicy.FAIL)
                         )
+                        .thenRun(() -> {
+                            // Clear context after reload completes
+                            listeners.forEach(rl -> {
+                                if (rl instanceof net.neoforged.neoforge.resource.ContextAwareReloadListener srl) {
+                                    srl.injectContext(net.neoforged.neoforge.common.conditions.ICondition.IContext.EMPTY, RegistryAccess.EMPTY);
+                                }
+                            });
+                        })
                         .thenApply(p_214306_ -> reloadableserverresources);
                 }
             );
@@ -107,6 +_,7 @@
         this.tagManager.getResult().forEach(p_335204_ -> updateRegistryTags(this.fullRegistryHolder.get(), (TagManager.LoadResult<?>)p_335204_));
         AbstractFurnaceBlockEntity.invalidateCache();
         Blocks.rebuildCache();
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.TagsUpdatedEvent(this.fullRegistryHolder.get(), false, false));
     }
 
     private static <T> void updateRegistryTags(RegistryAccess registryAccess, TagManager.LoadResult<T> loadResult) {
