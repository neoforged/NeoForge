--- a/net/minecraft/server/ReloadableServerResources.java
+++ b/net/minecraft/server/ReloadableServerResources.java
@@ -51,6 +_,8 @@
         this.lootData = new LootDataManager(this.registryLookup);
         this.advancements = new ServerAdvancementManager(this.registryLookup, this.lootData);
         this.functionLibrary = new ServerFunctionLibrary(p_206859_, this.commands.getDispatcher());
+        // Neo: Create context object
+        this.context = new net.neoforged.neoforge.common.conditions.ConditionContext(this.tagManager);
     }
 
     public ServerFunctionLibrary getFunctionLibrary() {
@@ -77,6 +_,24 @@
         return List.of(this.tagManager, this.lootData, this.recipes, this.functionLibrary, this.advancements);
     }
 
+    private final net.neoforged.neoforge.common.conditions.ICondition.IContext context;
+
+    /**
+     * Exposes the current condition context for usage in other reload listeners.<br>
+     * This is not useful outside the reloading stage.
+     * @return The condition context for the currently active reload.
+     */
+    public net.neoforged.neoforge.common.conditions.ICondition.IContext getConditionContext() {
+        return this.context;
+    }
+
+    /**
+      * {@return the lookup provider access for the currently active reload}
+      */
+    public HolderLookup.Provider getRegistryLookup() {
+        return this.registryLookup;
+    }
+
     public static CompletableFuture<ReloadableServerResources> loadResources(
         ResourceManager p_248588_,
         RegistryAccess.Frozen p_251163_,
@@ -87,14 +_,27 @@
         Executor p_249601_
     ) {
         ReloadableServerResources reloadableserverresources = new ReloadableServerResources(p_251163_, p_250212_, p_249301_, p_251126_);
+        List<PreparableReloadListener> listeners = new java.util.ArrayList<>(reloadableserverresources.listeners());
+        listeners.addAll(net.neoforged.neoforge.event.EventHooks.onResourceReload(reloadableserverresources, p_251163_));
+        listeners.forEach(rl -> {
+            if (rl instanceof net.neoforged.neoforge.resource.ContextAwareReloadListener srl) srl.injectContext(reloadableserverresources.context, reloadableserverresources.registryLookup);
+        });
         return SimpleReloadInstance.create(
-                p_248588_, reloadableserverresources.listeners(), p_249136_, p_249601_, DATA_RELOAD_INITIAL_TASK, LOGGER.isDebugEnabled()
+                p_248588_, listeners, p_249136_, p_249601_, DATA_RELOAD_INITIAL_TASK, LOGGER.isDebugEnabled()
             )
             .done()
             .whenComplete(
                 (p_323178_, p_323179_) -> reloadableserverresources.registryLookup
                         .missingTagAccessPolicy(ReloadableServerResources.MissingTagAccessPolicy.FAIL)
             )
+            .thenRun(() -> {
+                // Clear context after reload completes
+                listeners.forEach(rl -> {
+                    if (rl instanceof net.neoforged.neoforge.resource.ContextAwareReloadListener srl) {
+                        srl.injectContext(net.neoforged.neoforge.common.conditions.ICondition.IContext.EMPTY, RegistryAccess.EMPTY);
+                    }
+                });
+            })
             .thenApply(p_214306_ -> reloadableserverresources);
     }
 
@@ -102,6 +_,7 @@
         this.tagManager.getResult().forEach(p_214315_ -> updateRegistryTags(p_206869_, p_214315_));
         AbstractFurnaceBlockEntity.invalidateCache();
         Blocks.rebuildCache();
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.TagsUpdatedEvent(p_206869_, false, false));
     }
 
     private static <T> void updateRegistryTags(RegistryAccess p_206871_, TagManager.LoadResult<T> p_206872_) {
