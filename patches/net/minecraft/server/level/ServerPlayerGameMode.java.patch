--- a/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -72,7 +_,10 @@
     protected void setGameModeForPlayer(GameType gameModeForPlayer, @Nullable GameType previousGameModeForPlayer) {
         this.previousGameModeForPlayer = previousGameModeForPlayer;
         this.gameModeForPlayer = gameModeForPlayer;
+        // Neo: preserve flying state, removed on tick if Attribute or ability no longer applies
+        boolean wasFlying = this.player.getAbilities().flying;
         gameModeForPlayer.updatePlayerAbilities(this.player.getAbilities());
+        this.player.getAbilities().flying = wasFlying || this.player.getAbilities().flying;
     }
 
     public GameType getGameModeForPlayer() {
@@ -133,6 +_,10 @@
     }
 
     public void handleBlockBreakAction(BlockPos pos, ServerboundPlayerActionPacket.Action action, Direction face, int maxBuildHeight, int sequence) {
+        net.neoforged.neoforge.event.entity.player.PlayerInteractEvent.LeftClickBlock event = net.neoforged.neoforge.common.CommonHooks.onLeftClickBlock(player, pos, face, action);
+        if (event.isCanceled()) {
+            return;
+        }
         if (!this.player.canInteractWithBlock(pos, 1.0)) {
             this.debugLogging(pos, false, sequence, "too far");
         } else if (pos.getY() >= maxBuildHeight) {
@@ -171,6 +_,7 @@
                         blockstate,
                         p_348149_ -> this.player.onEquippedItemBroken(p_348149_, EquipmentSlot.MAINHAND)
                     );
+                    if (event.getUseBlock() != net.neoforged.neoforge.common.util.TriState.FALSE)
                     blockstate.attack(this.level, pos, this.player);
                     f = blockstate.getDestroyProgress(this.player, this.player.level(), pos);
                 }
@@ -238,7 +_,8 @@
 
     public boolean destroyBlock(BlockPos pos) {
         BlockState blockstate1 = this.level.getBlockState(pos);
-        if (!this.player.getMainHandItem().getItem().canAttackBlock(blockstate1, this.level, pos, this.player)) {
+        var event = net.neoforged.neoforge.common.CommonHooks.fireBlockBreak(level, gameModeForPlayer, player, pos, blockstate1);
+        if (event.isCanceled()) {
             return false;
         } else {
             BlockEntity blockentity = this.level.getBlockEntity(pos);
@@ -250,26 +_,45 @@
                 return false;
             } else {
                 BlockState blockstate = block.playerWillDestroy(this.level, pos, blockstate1, this.player);
-                boolean flag1 = this.level.removeBlock(pos, false);
-                if (flag1) {
-                    block.destroy(this.level, pos, blockstate);
-                }
 
                 if (this.isCreative()) {
+                    removeBlock(pos, blockstate, false);
                     return true;
                 } else {
                     ItemStack itemstack = this.player.getMainHandItem();
                     ItemStack itemstack1 = itemstack.copy();
-                    boolean flag = this.player.hasCorrectToolForDrops(blockstate);
+                    boolean flag1 = blockstate.canHarvestBlock(this.level, pos, this.player); // previously player.hasCorrectToolForDrops(blockstate)
                     itemstack.mineBlock(this.level, blockstate, pos, this.player);
+                    boolean flag = removeBlock(pos, blockstate, flag1);
+
                     if (flag1 && flag) {
                         block.playerDestroy(this.level, this.player, pos, blockstate, blockentity, itemstack1);
                     }
 
+                    // Neo: Fire the PlayerDestroyItemEvent if the tool was broken at any point during the break process
+                    if (itemstack.isEmpty() && !itemstack1.isEmpty()) {
+                        net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this.player, itemstack1, InteractionHand.MAIN_HAND);
+                    }
+
                     return true;
                 }
             }
         }
+    }
+
+    /**
+     * Patched-in method that handles actual removal of blocks for {@link #destroyBlock(BlockPos)}.
+     *
+     * @param pos The block pos of the destroyed block
+     * @param state The state of the destroyed block
+     * @param canHarvest If the player breaking the block can harvest the drops of the block
+     * @return If the block was removed, as reported by {@link BlockState#onDestroyedByPlayer}.
+     */
+    private boolean removeBlock(BlockPos pos, BlockState state, boolean canHarvest) {
+        boolean removed = state.onDestroyedByPlayer(this.level, pos, this.player, canHarvest, this.level.getFluidState(pos));
+        if (removed)
+            state.getBlock().destroy(this.level, pos, state);
+        return removed;
     }
 
     public InteractionResult useItem(ServerPlayer player, Level level, ItemStack stack, InteractionHand hand) {
@@ -278,6 +_,8 @@
         } else if (player.getCooldowns().isOnCooldown(stack.getItem())) {
             return InteractionResult.PASS;
         } else {
+            InteractionResult cancelResult = net.neoforged.neoforge.common.CommonHooks.onItemRightClick(player, hand);
+            if (cancelResult != null) return cancelResult;
             int i = stack.getCount();
             int j = stack.getDamageValue();
             InteractionResultHolder<ItemStack> interactionresultholder = stack.use(level, player, hand);
@@ -309,7 +_,10 @@
         BlockState blockstate = level.getBlockState(blockpos);
         if (!blockstate.getBlock().isEnabled(level.enabledFeatures())) {
             return InteractionResult.FAIL;
-        } else if (this.gameModeForPlayer == GameType.SPECTATOR) {
+        }
+        net.neoforged.neoforge.event.entity.player.PlayerInteractEvent.RightClickBlock event = net.neoforged.neoforge.common.CommonHooks.onRightClickBlock(player, hand, blockpos, hitResult);
+        if (event.isCanceled()) return event.getCancellationResult();
+        if (this.gameModeForPlayer == GameType.SPECTATOR) {
             MenuProvider menuprovider = blockstate.getMenuProvider(level, blockpos);
             if (menuprovider != null) {
                 player.openMenu(menuprovider);
@@ -318,10 +_,15 @@
                 return InteractionResult.PASS;
             }
         } else {
+            UseOnContext useoncontext = new UseOnContext(player, hand, hitResult);
+            if (event.getUseItem() != net.neoforged.neoforge.common.util.TriState.FALSE) {
+                InteractionResult result = stack.onItemUseFirst(useoncontext);
+                if (result != InteractionResult.PASS) return result;
+            }
             boolean flag = !player.getMainHandItem().isEmpty() || !player.getOffhandItem().isEmpty();
-            boolean flag1 = player.isSecondaryUseActive() && flag;
+            boolean flag1 = (player.isSecondaryUseActive() && flag) && !(player.getMainHandItem().doesSneakBypassUse(level, blockpos, player) && player.getOffhandItem().doesSneakBypassUse(level, blockpos, player));
             ItemStack itemstack = stack.copy();
-            if (!flag1) {
+            if (event.getUseBlock().isTrue() || (event.getUseBlock().isDefault() && !flag1)) {
                 ItemInteractionResult iteminteractionresult = blockstate.useItemOn(player.getItemInHand(hand), level, player, hand, hitResult);
                 if (iteminteractionresult.consumesAction()) {
                     CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(player, blockpos, itemstack);
@@ -337,8 +_,8 @@
                 }
             }
 
-            if (!stack.isEmpty() && !player.getCooldowns().isOnCooldown(stack.getItem())) {
-                UseOnContext useoncontext = new UseOnContext(player, hand, hitResult);
+            if (event.getUseItem().isTrue() || (!stack.isEmpty() && !player.getCooldowns().isOnCooldown(stack.getItem()))) {
+                if (event.getUseItem().isFalse()) return InteractionResult.PASS;
                 InteractionResult interactionresult1;
                 if (this.isCreative()) {
                     int i = stack.getCount();
