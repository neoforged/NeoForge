--- a/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -70,7 +_,10 @@
     protected void setGameModeForPlayer(GameType p_9274_, @Nullable GameType p_9275_) {
         this.previousGameModeForPlayer = p_9275_;
         this.gameModeForPlayer = p_9274_;
+        // Neo: preserve flying state, removed on tick if Attribute or ability no longer applies
+        boolean wasFlying = this.player.getAbilities().flying;
         p_9274_.updatePlayerAbilities(this.player.getAbilities());
+        this.player.getAbilities().flying = wasFlying || this.player.getAbilities().flying;
     }
 
     public GameType getGameModeForPlayer() {
@@ -131,6 +_,10 @@
     }
 
     public void handleBlockBreakAction(BlockPos p_215120_, ServerboundPlayerActionPacket.Action p_215121_, Direction p_215122_, int p_215123_, int p_215124_) {
+        net.neoforged.neoforge.event.entity.player.PlayerInteractEvent.LeftClickBlock event = net.neoforged.neoforge.common.CommonHooks.onLeftClickBlock(player, p_215120_, p_215122_, p_215121_);
+        if (event.isCanceled()) {
+            return;
+        }
         if (!this.player.canInteractWithBlock(p_215120_, 1.0)) {
             this.debugLogging(p_215120_, false, p_215124_, "too far");
         } else if (p_215120_.getY() > p_215123_) {
@@ -169,6 +_,7 @@
                         blockstate,
                         p_348149_ -> this.player.onEquippedItemBroken(p_348149_, EquipmentSlot.MAINHAND)
                     );
+                    if (event.getUseBlock() != net.neoforged.neoforge.common.util.TriState.FALSE)
                     blockstate.attack(this.level, p_215120_, this.player);
                     f = blockstate.getDestroyProgress(this.player, this.player.level(), p_215120_);
                 }
@@ -236,7 +_,8 @@
 
     public boolean destroyBlock(BlockPos p_9281_) {
         BlockState blockstate1 = this.level.getBlockState(p_9281_);
-        if (!this.player.getMainHandItem().getItem().canAttackBlock(blockstate1, this.level, p_9281_, this.player)) {
+        var event = net.neoforged.neoforge.common.CommonHooks.fireBlockBreak(level, gameModeForPlayer, player, p_9281_, blockstate1);
+        if (event.isCanceled()) {
             return false;
         } else {
             BlockEntity blockentity = this.level.getBlockEntity(p_9281_);
@@ -248,26 +_,45 @@
                 return false;
             } else {
                 BlockState blockstate = block.playerWillDestroy(this.level, p_9281_, blockstate1, this.player);
-                boolean flag1 = this.level.removeBlock(p_9281_, false);
-                if (flag1) {
-                    block.destroy(this.level, p_9281_, blockstate);
-                }
 
                 if (this.isCreative()) {
+                    removeBlock(p_9281_, blockstate, false);
                     return true;
                 } else {
                     ItemStack itemstack = this.player.getMainHandItem();
                     ItemStack itemstack1 = itemstack.copy();
-                    boolean flag = this.player.hasCorrectToolForDrops(blockstate);
+                    boolean flag1 = blockstate.canHarvestBlock(this.level, p_9281_, this.player); // previously player.hasCorrectToolForDrops(blockstate)
                     itemstack.mineBlock(this.level, blockstate, p_9281_, this.player);
+                    boolean flag = removeBlock(p_9281_, blockstate, flag1);
+
                     if (flag1 && flag) {
                         block.playerDestroy(this.level, this.player, p_9281_, blockstate, blockentity, itemstack1);
                     }
 
+                    // Neo: Fire the PlayerDestroyItemEvent if the tool was broken at any point during the break process
+                    if (itemstack.isEmpty() && !itemstack1.isEmpty()) {
+                        net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this.player, itemstack1, InteractionHand.MAIN_HAND);
+                    }
+
                     return true;
                 }
             }
         }
+    }
+
+    /**
+     * Patched-in method that handles actual removal of blocks for {@link #destroyBlock(BlockPos)}.
+     *
+     * @param pos The block pos of the destroyed block
+     * @param state The state of the destroyed block
+     * @param canHarvest If the player breaking the block can harvest the drops of the block
+     * @return If the block was removed, as reported by {@link BlockState#onDestroyedByPlayer}.
+     */
+    private boolean removeBlock(BlockPos pos, BlockState state, boolean canHarvest) {
+        boolean removed = state.onDestroyedByPlayer(this.level, pos, this.player, canHarvest, this.level.getFluidState(pos));
+        if (removed)
+            state.getBlock().destroy(this.level, pos, state);
+        return removed;
     }
 
     public InteractionResult useItem(ServerPlayer p_9262_, Level p_9263_, ItemStack p_9264_, InteractionHand p_9265_) {
@@ -276,6 +_,8 @@
         } else if (p_9262_.getCooldowns().isOnCooldown(p_9264_)) {
             return InteractionResult.PASS;
         } else {
+            InteractionResult cancelResult = net.neoforged.neoforge.common.CommonHooks.onItemRightClick(p_9262_, p_9265_);
+            if (cancelResult != null) return cancelResult;
             int i = p_9264_.getCount();
             int j = p_9264_.getDamageValue();
             InteractionResult interactionresult = p_9264_.use(p_9263_, p_9262_, p_9265_);
@@ -313,7 +_,10 @@
         BlockState blockstate = p_9267_.getBlockState(blockpos);
         if (!blockstate.getBlock().isEnabled(p_9267_.enabledFeatures())) {
             return InteractionResult.FAIL;
-        } else if (this.gameModeForPlayer == GameType.SPECTATOR) {
+        }
+        net.neoforged.neoforge.event.entity.player.PlayerInteractEvent.RightClickBlock event = net.neoforged.neoforge.common.CommonHooks.onRightClickBlock(p_9266_, p_9269_, blockpos, p_9270_);
+        if (event.isCanceled()) return event.getCancellationResult();
+        if (this.gameModeForPlayer == GameType.SPECTATOR) {
             MenuProvider menuprovider = blockstate.getMenuProvider(p_9267_, blockpos);
             if (menuprovider != null) {
                 p_9266_.openMenu(menuprovider);
@@ -322,10 +_,15 @@
                 return InteractionResult.PASS;
             }
         } else {
+            UseOnContext useoncontext = new UseOnContext(p_9266_, p_9269_, p_9270_);
+            if (event.getUseItem() != net.neoforged.neoforge.common.util.TriState.FALSE) {
+                InteractionResult result = p_9268_.onItemUseFirst(useoncontext);
+                if (result != InteractionResult.PASS) return result;
+            }
             boolean flag = !p_9266_.getMainHandItem().isEmpty() || !p_9266_.getOffhandItem().isEmpty();
-            boolean flag1 = p_9266_.isSecondaryUseActive() && flag;
+            boolean flag1 = (p_9266_.isSecondaryUseActive() && flag) && !(p_9266_.getMainHandItem().doesSneakBypassUse(p_9267_, blockpos, p_9266_) && p_9266_.getOffhandItem().doesSneakBypassUse(p_9267_, blockpos, p_9266_));
             ItemStack itemstack = p_9268_.copy();
-            if (!flag1) {
+            if (event.getUseBlock().isTrue() || (event.getUseBlock().isDefault() && !flag1)) {
                 InteractionResult interactionresult = blockstate.useItemOn(p_9266_.getItemInHand(p_9269_), p_9267_, p_9266_, p_9269_, p_9270_);
                 if (interactionresult.consumesAction()) {
                     CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(p_9266_, blockpos, itemstack);
@@ -341,8 +_,8 @@
                 }
             }
 
-            if (!p_9268_.isEmpty() && !p_9266_.getCooldowns().isOnCooldown(p_9268_)) {
-                UseOnContext useoncontext = new UseOnContext(p_9266_, p_9269_, p_9270_);
+            if (event.getUseItem().isTrue() || (!p_9268_.isEmpty() && !p_9266_.getCooldowns().isOnCooldown(p_9268_))) {
+                if (event.getUseItem().isFalse()) return InteractionResult.PASS;
                 InteractionResult interactionresult2;
                 if (this.isCreative()) {
                     int i = p_9268_.getCount();
