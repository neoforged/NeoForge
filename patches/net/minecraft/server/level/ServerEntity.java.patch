--- a/net/minecraft/server/level/ServerEntity.java
+++ b/net/minecraft/server/level/ServerEntity.java
@@ -101,9 +_,9 @@
 
         if (this.entity instanceof ItemFrame itemframe && this.tickCount % 10 == 0) {
             ItemStack itemstack = itemframe.getItem();
-            if (itemstack.getItem() instanceof MapItem) {
+            if (true) {
                 MapId mapid = itemstack.get(DataComponents.MAP_ID);
-                MapItemSavedData mapitemsaveddata = MapItem.getSavedData(mapid, this.level);
+                MapItemSavedData mapitemsaveddata = MapItem.getSavedData(itemstack, this.level);
                 if (mapitemsaveddata != null) {
                     for (ServerPlayer serverplayer : this.level.players()) {
                         mapitemsaveddata.tickCarriedBy(serverplayer, itemstack);
@@ -233,22 +_,25 @@
     public void removePairing(ServerPlayer player) {
         this.entity.stopSeenByPlayer(player);
         player.connection.send(new ClientboundRemoveEntitiesPacket(this.entity.getId()));
+        net.neoforged.neoforge.event.EventHooks.onStopEntityTracking(this.entity, player);
     }
 
     public void addPairing(ServerPlayer player) {
         List<Packet<? super ClientGamePacketListener>> list = new ArrayList<>();
-        this.sendPairingData(player, list::add);
+        this.sendPairingData(player, new net.neoforged.neoforge.network.bundle.PacketAndPayloadAcceptor<>(list::add));
         player.connection.send(new ClientboundBundlePacket(list));
         this.entity.startSeenByPlayer(player);
+        net.neoforged.neoforge.event.EventHooks.onStartEntityTracking(this.entity, player);
     }
 
-    public void sendPairingData(ServerPlayer player, Consumer<Packet<ClientGamePacketListener>> consumer) {
+    public void sendPairingData(ServerPlayer player, net.neoforged.neoforge.network.bundle.PacketAndPayloadAcceptor<net.minecraft.network.protocol.game.ClientGamePacketListener> consumer) {
         if (this.entity.isRemoved()) {
             LOGGER.warn("Fetching packet for removed entity {}", this.entity);
         }
 
         Packet<ClientGamePacketListener> packet = this.entity.getAddEntityPacket(this);
         consumer.accept(packet);
+        this.entity.sendPairingData(player, consumer::accept);
         if (this.trackedDataValues != null) {
             consumer.accept(new ClientboundSetEntityDataPacket(this.entity.getId(), this.trackedDataValues));
         }
