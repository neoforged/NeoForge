--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -202,7 +_,7 @@
     private final List<CustomSpawner> customSpawners;
     @Nullable
     private EndDragonFight dragonFight;
-    final Int2ObjectMap<EnderDragonPart> dragonParts = new Int2ObjectOpenHashMap<>();
+    final Int2ObjectMap<net.neoforged.neoforge.entity.PartEntity<?>> dragonParts = new Int2ObjectOpenHashMap<>();
     private final StructureManager structureManager;
     private final StructureCheck structureCheck;
     private final boolean tickTime;
@@ -225,7 +_,6 @@
         super(p_215002_, p_215003_, p_214999_.registryAccess(), p_215004_.type(), false, p_215006_, p_215007_, p_214999_.getMaxChainedNeighborUpdates());
         this.tickTime = p_215009_;
         this.server = p_214999_;
-        this.customSpawners = p_215008_;
         this.serverLevelData = p_215002_;
         ChunkGenerator chunkgenerator = p_215004_.generator();
         boolean flag = p_214999_.forceSynchronousWrites();
@@ -291,6 +_,11 @@
         this.randomSequences = Objects.requireNonNullElseGet(
             p_288977_, () -> this.getDataStorage().computeIfAbsent(RandomSequences.factory(i), "random_sequences")
         );
+
+        net.neoforged.neoforge.attachment.LevelAttachmentsSavedData.init(this);
+        // Neo: Move the initialization of customSpawners to the end of costructor
+        // Providing a fully initialized ServerLevel instance for the ServerLevelEvent.CustomSpawners
+        this.customSpawners = net.neoforged.neoforge.event.EventHooks.getCustomSpawners(this, p_215008_);
     }
 
     @Deprecated
@@ -336,7 +_,7 @@
         if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
             if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
                 long j = this.levelData.getDayTime() + 24000L;
-                this.setDayTime(j - j % 24000L);
+                this.setDayTime(net.neoforged.neoforge.event.EventHooks.onSleepFinished(this, j - j % 24000L, this.getDayTime()));
             }
 
             this.wakeUpAllPlayers();
@@ -374,7 +_,7 @@
 
         this.handlingTick = false;
         profilerfiller.pop();
-        boolean flag1 = !this.players.isEmpty() || !this.getForcedChunks().isEmpty();
+        boolean flag1 = !this.players.isEmpty() || net.neoforged.neoforge.common.world.chunk.ForcedChunkManager.hasForcedChunks(this); // Neo: Replace vanilla's has forced chunk check with neo's that checks both the vanilla and neo added ones
         if (flag1) {
             this.resetEmptyTime();
         }
@@ -407,7 +_,9 @@
                                     }
 
                                     profilerfiller.push("tick");
-                                    this.guardEntityTick(this::tickNonPassenger, p_359620_);
+                                    if (!p_359620_.isRemoved() && !(p_359620_ instanceof net.neoforged.neoforge.entity.PartEntity)) {
+                                        this.guardEntityTick(this::tickNonPassenger, p_359620_);
+                                    }
                                     profilerfiller.pop();
                                 }
                             }
@@ -436,7 +_,7 @@
             this.serverLevelData.getScheduledEvents().tick(this.server, i);
             Profiler.get().pop();
             if (this.serverLevelData.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
-                this.setDayTime(this.levelData.getDayTime() + 1L);
+                this.setDayTime(this.levelData.getDayTime() + advanceDaytime());
             }
         }
     }
@@ -534,6 +_,7 @@
         BlockPos blockpos = this.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, p_295060_);
         BlockPos blockpos1 = blockpos.below();
         Biome biome = this.getBiome(blockpos).value();
+        if (this.isAreaLoaded(blockpos1, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
         if (biome.shouldFreeze(this, blockpos1)) {
             this.setBlockAndUpdate(blockpos1, Blocks.ICE.defaultBlockState());
         }
@@ -706,15 +_,19 @@
                 .broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
         }
 
+        /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+         * rather than to all players on the server. This is what causes the client-side rain, as the
+         * client believes that it has started raining locally, rather than in another dimension.
+         */
         if (flag != this.isRaining()) {
             if (flag) {
-                this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0.0F));
+                this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0.0F), this.dimension());
             } else {
-                this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F));
+                this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F), this.dimension());
             }
 
-            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, this.rainLevel));
-            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel));
+            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, this.rainLevel), this.dimension());
+            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
         }
     }
 
@@ -751,7 +_,11 @@
         p_8648_.tickCount++;
         profilerfiller.push(() -> BuiltInRegistries.ENTITY_TYPE.getKey(p_8648_.getType()).toString());
         profilerfiller.incrementCounter("tickNonPassenger");
-        p_8648_.tick();
+        // Neo: Permit cancellation of Entity#tick via EntityTickEvent.Pre
+        if (!net.neoforged.neoforge.event.EventHooks.fireEntityTickPre(p_8648_).isCanceled()) {
+            p_8648_.tick();
+            net.neoforged.neoforge.event.EventHooks.fireEntityTickPost(p_8648_);
+        }
         profilerfiller.pop();
 
         for (Entity entity : p_8648_.getPassengers()) {
@@ -800,6 +_,7 @@
             } else {
                 this.entityManager.autoSave();
             }
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Save(this));
         }
     }
 
@@ -894,6 +_,7 @@
     }
 
     private void addPlayer(ServerPlayer p_8854_) {
+        if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityJoinLevelEvent(p_8854_, this)).isCanceled()) return;
         Entity entity = this.getEntities().get(p_8854_.getUUID());
         if (entity != null) {
             LOGGER.warn("Force-added player with duplicate UUID {}", p_8854_.getUUID());
@@ -901,7 +_,8 @@
             this.removePlayerImmediately((ServerPlayer)entity, Entity.RemovalReason.DISCARDED);
         }
 
-        this.entityManager.addNewEntity(p_8854_);
+        this.entityManager.addNewEntityWithoutEvent(p_8854_);
+        p_8854_.onAddedToLevel();
     }
 
     private boolean addEntity(Entity p_8873_) {
@@ -909,7 +_,12 @@
             LOGGER.warn("Tried to add entity {} but it was marked as removed already", EntityType.getKey(p_8873_.getType()));
             return false;
         } else {
-            return this.entityManager.addNewEntity(p_8873_);
+            if (this.entityManager.addNewEntity(p_8873_)) {
+                p_8873_.onAddedToLevel();
+                return true;
+            } else {
+                return false;
+            }
         }
     }
 
@@ -957,6 +_,12 @@
         float p_263390_,
         long p_263403_
     ) {
+        net.neoforged.neoforge.event.PlayLevelSoundEvent.AtPosition event = net.neoforged.neoforge.event.EventHooks.onPlaySoundAtPosition(this, p_263393_, p_263369_, p_263354_, p_263412_, p_263338_, p_263352_, p_263390_);
+        if (event.isCanceled() || event.getSound() == null) return;
+        p_263412_ = event.getSound();
+        p_263338_ = event.getSource();
+        p_263352_ = event.getNewVolume();
+        p_263390_ = event.getNewPitch();
         this.server
             .getPlayerList()
             .broadcast(
@@ -974,6 +_,12 @@
     public void playSeededSound(
         @Nullable Player p_263545_, Entity p_263544_, Holder<SoundEvent> p_263491_, SoundSource p_263542_, float p_263530_, float p_263520_, long p_263490_
     ) {
+        net.neoforged.neoforge.event.PlayLevelSoundEvent.AtEntity event = net.neoforged.neoforge.event.EventHooks.onPlaySoundAtEntity(p_263544_, p_263491_, p_263542_, p_263530_, p_263520_);
+        if (event.isCanceled() || event.getSound() == null) return;
+        p_263491_ = event.getSound();
+        p_263542_ = event.getSource();
+        p_263530_ = event.getNewVolume();
+        p_263520_ = event.getNewPitch();
         this.server
             .getPlayerList()
             .broadcast(
@@ -1032,6 +_,7 @@
 
     @Override
     public void gameEvent(Holder<GameEvent> p_316597_, Vec3 p_215042_, GameEvent.Context p_215043_) {
+        if (!net.neoforged.neoforge.common.CommonHooks.onVanillaGameEvent(this, p_316597_, p_215042_, p_215043_)) return;
         this.gameEventDispatcher.post(p_316597_, p_215042_, p_215043_);
     }
 
@@ -1070,6 +_,7 @@
 
     @Override
     public void updateNeighborsAt(BlockPos p_215045_, Block p_215046_) {
+        net.neoforged.neoforge.event.EventHooks.onNeighborNotify(this, p_215045_, this.getBlockState(p_215045_), java.util.EnumSet.allOf(Direction.class), false).isCanceled();
         this.updateNeighborsAt(p_215045_, p_215046_, ExperimentalRedstoneUtils.initialOrientation(this, null, null));
     }
 
@@ -1080,6 +_,10 @@
 
     @Override
     public void updateNeighborsAtExceptFromFacing(BlockPos p_215052_, Block p_215053_, Direction p_215054_, @Nullable Orientation p_365231_) {
+        java.util.EnumSet<Direction> directions = java.util.EnumSet.allOf(Direction.class);
+        directions.remove(p_215054_);
+        if (net.neoforged.neoforge.event.EventHooks.onNeighborNotify(this, p_215052_, this.getBlockState(p_215052_), directions, false).isCanceled())
+            return;
         this.neighborUpdater.updateNeighborsAtExceptFromFacing(p_215052_, p_215053_, p_215054_, p_365231_);
     }
 
@@ -1125,7 +_,7 @@
         Explosion.BlockInteraction explosion$blockinteraction = switch (p_255827_) {
             case NONE -> Explosion.BlockInteraction.KEEP;
             case BLOCK -> this.getDestroyType(GameRules.RULE_BLOCK_EXPLOSION_DROP_DECAY);
-            case MOB -> this.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)
+            case MOB -> net.neoforged.neoforge.event.EventHooks.canEntityGrief(this, p_256039_)
             ? this.getDestroyType(GameRules.RULE_MOB_EXPLOSION_DROP_DECAY)
             : Explosion.BlockInteraction.KEEP;
             case TNT -> this.getDestroyType(GameRules.RULE_TNT_EXPLOSION_DROP_DECAY);
@@ -1133,6 +_,7 @@
         };
         Vec3 vec3 = new Vec3(p_256067_, p_256370_, p_256153_);
         ServerExplosion serverexplosion = new ServerExplosion(this, p_256039_, p_255778_, p_256002_, vec3, p_256045_, p_255686_, explosion$blockinteraction);
+        if (net.neoforged.neoforge.event.EventHooks.onExplosionStart(this, serverexplosion)) return;
         serverexplosion.explode();
         ParticleOptions particleoptions = serverexplosion.isSmall() ? p_312436_ : p_312391_;
 
@@ -1740,8 +_,8 @@
                 ServerLevel.this.navigatingMobs.add(mob);
             }
 
-            if (p_143371_ instanceof EnderDragon enderdragon) {
-                for (EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
+            if (p_143371_.isMultipartEntity()) {
+                for(net.neoforged.neoforge.entity.PartEntity<?> enderdragonpart : p_143371_.getParts()) {
                     ServerLevel.this.dragonParts.put(enderdragonpart.getId(), enderdragonpart);
                 }
             }
@@ -1760,24 +_,106 @@
                 if (ServerLevel.this.isUpdatingNavigations) {
                     String s = "onTrackingStart called during navigation iteration";
                     Util.logAndPauseIfInIde(
-                        "onTrackingStart called during navigation iteration", new IllegalStateException("onTrackingStart called during navigation iteration")
+                              "onTrackingStart called during navigation iteration", new IllegalStateException("onTrackingStart called during navigation iteration")
                     );
                 }
 
                 ServerLevel.this.navigatingMobs.remove(mob);
             }
 
-            if (p_143375_ instanceof EnderDragon enderdragon) {
-                for (EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
+            if (p_143375_.isMultipartEntity()) {
+                for(net.neoforged.neoforge.entity.PartEntity<?> enderdragonpart : p_143375_.getParts()) {
                     ServerLevel.this.dragonParts.remove(enderdragonpart.getId());
                 }
             }
 
             p_143375_.updateDynamicGameEventListener(DynamicGameEventListener::remove);
+
+            p_143375_.onRemovedFromLevel();
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityLeaveLevelEvent(p_143375_, ServerLevel.this));
         }
 
         public void onSectionChange(Entity p_215086_) {
             p_215086_.updateDynamicGameEventListener(DynamicGameEventListener::move);
         }
     }
+
+    @Override
+    public java.util.Collection<net.neoforged.neoforge.entity.PartEntity<?>> getPartEntities() {
+        return this.dragonParts.values();
+    }
+
+    private final net.neoforged.neoforge.capabilities.CapabilityListenerHolder capListenerHolder = new net.neoforged.neoforge.capabilities.CapabilityListenerHolder();
+
+    @Override
+    public void invalidateCapabilities(BlockPos pos) {
+        capListenerHolder.invalidatePos(pos);
+    }
+
+    @Override
+    public void invalidateCapabilities(ChunkPos pos) {
+        capListenerHolder.invalidateChunk(pos);
+    }
+
+    /**
+     * Register a listener for capability invalidation.
+     * @see net.neoforged.neoforge.capabilities.ICapabilityInvalidationListener
+     */
+    public void registerCapabilityListener(BlockPos pos, net.neoforged.neoforge.capabilities.ICapabilityInvalidationListener listener) {
+        capListenerHolder.addListener(pos, listener);
+    }
+
+    /**
+     * Internal method, used to clean capability listeners that are not referenced.
+     * Do not call.
+     */
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public void cleanCapabilityListenerReferences() {
+        capListenerHolder.clean();
+    }
+
+    // Neo: Variable day time code
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public void setDayTimeFraction(float dayTimeFraction) {
+        serverLevelData.setDayTimeFraction(dayTimeFraction);
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public float getDayTimeFraction() {
+        return serverLevelData.getDayTimeFraction();
+    }
+
+    /**
+     * Returns the current ratio between game ticks and clock ticks. If this value is negative, no
+     * speed has been set and those two are coupled 1:1 (i.e. vanilla mode).
+     */
+    public float getDayTimePerTick() {
+        return serverLevelData.getDayTimePerTick();
+    }
+
+    /**
+     * This allows mods to set the rate time flows in a level. By default, each game tick the clock time
+     * also advances by one tick, with {@link Level#TICKS_PER_DAY} clock ticks (or 20 real-life minutes)
+     * forming a Minecraft day.
+     * <p>
+     * This can be sped up for shorter days by giving a higher number, or slowed down for longer days
+     * with a smaller number. A negative value will reset it back to vanilla logic.
+     * <p>
+     * This value can also be changed with the command <code>/neoforge day</code>, where you can set
+     * either the speed or a day length in minutes.
+     * <p>
+     * This has no effect when time progression is stopped.
+     * <p>
+     * While this still technically works when vanilla clients are connected, those will desync and
+     * experience a time jump once per second.
+     */
+    @Override
+    public void setDayTimePerTick(float dayTimePerTick) {
+        if (dayTimePerTick != getDayTimePerTick() && dayTimePerTick != 0f) {
+            serverLevelData.setDayTimePerTick(dayTimePerTick);
+            server.forceTimeSynchronization();
+        }
+    }
+
 }
