--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -234,6 +_,10 @@
         }
 
         private void broadcastDataValue(AbstractContainerMenu p_143455_, int p_143456_, int p_143457_) {
+            if (ServerPlayer.this.connection.isConnected(net.neoforged.neoforge.network.payload.AdvancedContainerSetDataPayload.ID)) {
+                ServerPlayer.this.connection.send(new net.neoforged.neoforge.network.payload.AdvancedContainerSetDataPayload(p_143455_.containerId, p_143456_, p_143457_));
+                return;
+            }
             ServerPlayer.this.connection.send(new ClientboundContainerSetDataPacket(p_143455_.containerId, p_143456_, p_143457_));
         }
     };
@@ -546,6 +_,11 @@
                 this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
             }
 
+            if (this.getAbilities().flying && !this.mayFly()) {
+                this.getAbilities().flying = false;
+                this.onUpdateAbilities();
+            }
+
             if (this.tickCount % 20 == 0) {
                 CriteriaTriggers.LOCATION.trigger(this);
             }
@@ -594,6 +_,7 @@
     @Override
     public void die(DamageSource p_9035_) {
         this.gameEvent(GameEvent.ENTITY_DIE);
+        if (net.neoforged.neoforge.common.CommonHooks.onLivingDeath(this, p_9035_)) return;
         boolean flag = this.level().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
         if (flag) {
             Component component = this.getCombatTracker().getDeathMessage();
@@ -740,11 +_,12 @@
 
     @Nullable
     @Override
-    public Entity changeDimension(ServerLevel p_9180_) {
+    public Entity changeDimension(ServerLevel p_9180_, net.neoforged.neoforge.common.util.ITeleporter teleporter) {
+        if (!net.neoforged.neoforge.common.CommonHooks.onTravelToDimension(this, p_9180_.dimension())) return null;
         this.isChangingDimension = true;
         ServerLevel serverlevel = this.serverLevel();
         ResourceKey<Level> resourcekey = serverlevel.dimension();
-        if (resourcekey == Level.END && p_9180_.dimension() == Level.OVERWORLD) {
+        if (resourcekey == Level.END && p_9180_.dimension() == Level.OVERWORLD && teleporter.isVanilla()) { //Forge: Fix non-vanilla teleporters triggering end credits
             this.unRide();
             this.serverLevel().removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
             if (!this.wonGame) {
@@ -761,13 +_,14 @@
             PlayerList playerlist = this.server.getPlayerList();
             playerlist.sendPlayerPermissionLevel(this);
             serverlevel.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
-            this.unsetRemoved();
-            PortalInfo portalinfo = this.findDimensionEntryPoint(p_9180_);
+            this.revive();
+            PortalInfo portalinfo = teleporter.getPortalInfo(this, p_9180_, this::findDimensionEntryPoint);
             if (portalinfo != null) {
+                Entity e = teleporter.placeEntity(this, serverlevel, p_9180_, this.getYRot(), spawnPortal -> {//Forge: Start vanilla logic
                 serverlevel.getProfiler().push("moving");
                 if (resourcekey == Level.OVERWORLD && p_9180_.dimension() == Level.NETHER) {
                     this.enteredNetherPosition = this.position();
-                } else if (p_9180_.dimension() == Level.END) {
+                } else if (spawnPortal && p_9180_.dimension() == Level.END) {
                     this.createEndPlatform(p_9180_, BlockPos.containing(portalinfo.pos));
                 }
 
@@ -779,6 +_,9 @@
                 p_9180_.addDuringPortalTeleport(this);
                 serverlevel.getProfiler().pop();
                 this.triggerDimensionChangeTriggers(serverlevel);
+                return this;//forge: this is part of the ITeleporter patch
+                });//Forge: End vanilla logic
+                if (e != this) throw new java.lang.IllegalArgumentException(String.format(java.util.Locale.ENGLISH, "Teleporter %s returned not the player entity but instead %s, expected PlayerEntity %s", teleporter, e, this));
                 this.connection.send(new ClientboundPlayerAbilitiesPacket(this.getAbilities()));
                 playerlist.sendLevelInfo(this, p_9180_);
                 playerlist.sendAllPlayerInfo(this);
@@ -787,10 +_,12 @@
                     this.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), mobeffectinstance));
                 }
 
+                if (teleporter.playTeleportSound(this, serverlevel, p_9180_))
                 this.connection.send(new ClientboundLevelEventPacket(1032, BlockPos.ZERO, 0, false));
                 this.lastSentExp = -1;
                 this.lastSentHealth = -1.0F;
                 this.lastSentFood = -1;
+                net.neoforged.neoforge.event.EventHooks.firePlayerChangedDimensionEvent(this, resourcekey, p_9180_.dimension());
             }
 
             return this;
@@ -859,6 +_,9 @@
 
     @Override
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_9115_) {
+        java.util.Optional<BlockPos> optAt = java.util.Optional.of(p_9115_);
+        Player.BedSleepingProblem ret = net.neoforged.neoforge.event.EventHooks.onPlayerSleepInBed(this, optAt);
+        if (ret != null) return Either.left(ret);
         Direction direction = this.level().getBlockState(p_9115_).getValue(HorizontalDirectionalBlock.FACING);
         if (this.isSleeping() || !this.isAlive()) {
             return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
@@ -870,7 +_,7 @@
             return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
         } else {
             this.setRespawnPosition(this.level().dimension(), p_9115_, this.getYRot(), false, true);
-            if (this.level().isDay()) {
+            if (!net.neoforged.neoforge.event.EventHooks.fireSleepingTimeCheck(this, optAt)) {
                 return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
             } else {
                 if (!this.isCreative()) {
@@ -909,6 +_,7 @@
     }
 
     private boolean bedInRange(BlockPos p_9117_, Direction p_9118_) {
+        if (p_9118_ == null) return false;
         return this.isReachableBedBlock(p_9117_) || this.isReachableBedBlock(p_9117_.relative(p_9118_.getOpposite()));
     }
 
@@ -983,11 +_,19 @@
 
     @Override
     public OptionalInt openMenu(@Nullable MenuProvider p_9033_) {
+        return openMenu(p_9033_, (java.util.function.Consumer<net.minecraft.network.FriendlyByteBuf>) null);
+    }
+
+    @Override
+    public OptionalInt openMenu(@Nullable MenuProvider p_9033_, @Nullable java.util.function.Consumer<net.minecraft.network.FriendlyByteBuf> extraDataWriter) {
         if (p_9033_ == null) {
             return OptionalInt.empty();
         } else {
             if (this.containerMenu != this.inventoryMenu) {
+                if (p_9033_.shouldTriggerClientSideContainerClosingOnOpen())
                 this.closeContainer();
+                else
+                    this.doCloseContainer();
             }
 
             this.nextContainerCounter();
@@ -999,10 +_,16 @@
 
                 return OptionalInt.empty();
             } else {
+                if (extraDataWriter == null) {
                 this.connection
                     .send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), p_9033_.getDisplayName()));
+                } else {
+                    this.connection
+                        .send(new net.neoforged.neoforge.network.payload.AdvancedOpenScreenPayload(abstractcontainermenu.containerId, abstractcontainermenu.getType(), p_9033_.getDisplayName(), extraDataWriter));
+                }
                 this.initMenu(abstractcontainermenu);
                 this.containerMenu = abstractcontainermenu;
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Open(this, this.containerMenu));
                 return OptionalInt.of(this.containerCounter);
             }
         }
@@ -1023,6 +_,7 @@
         this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, p_9060_.getContainerSize(), p_9059_.getId()));
         this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.getInventory(), p_9060_, p_9059_);
         this.initMenu(this.containerMenu);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Open(this, this.containerMenu));
     }
 
     @Override
@@ -1051,6 +_,7 @@
     public void doCloseContainer() {
         this.containerMenu.removed(this);
         this.inventoryMenu.transferState(this.containerMenu);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Close(this, this.containerMenu));
         this.containerMenu = this.inventoryMenu;
     }
 
@@ -1276,6 +_,15 @@
         this.setShoulderEntityLeft(p_9016_.getShoulderEntityLeft());
         this.setShoulderEntityRight(p_9016_.getShoulderEntityRight());
         this.setLastDeathLocation(p_9016_.getLastDeathLocation());
+
+        //Copy over a section of the Entity Data from the old player.
+        //Allows mods to specify data that persists after players respawn.
+        CompoundTag old = p_9016_.getPersistentData();
+        if (old.contains(PERSISTED_NBT_TAG))
+             getPersistentData().put(PERSISTED_NBT_TAG, old.get(PERSISTED_NBT_TAG));
+        net.neoforged.neoforge.event.EventHooks.onPlayerClone(this, p_9016_, !p_9017_);
+        this.tabListHeader = p_9016_.tabListHeader;
+        this.tabListFooter = p_9016_.tabListFooter;
     }
 
     @Override
@@ -1369,6 +_,8 @@
     }
 
     public boolean setGameMode(GameType p_143404_) {
+        p_143404_ = net.neoforged.neoforge.common.CommonHooks.onChangeGameType(this, this.gameMode.getGameModeForPlayer(), p_143404_);
+        if (p_143404_ == null) return false;
         if (!this.gameMode.changeGameModeForPlayer(p_143404_)) {
             return false;
         } else {
@@ -1517,6 +_,7 @@
     public void setCamera(@Nullable Entity p_9214_) {
         Entity entity = this.getCamera();
         this.camera = (Entity)(p_9214_ == null ? this : p_9214_);
+        while (this.camera instanceof net.neoforged.neoforge.entity.PartEntity<?> partEntity) this.camera = partEntity.getParent(); // FORGE: fix MC-46486
         if (entity != this.camera) {
             Level level = this.camera.level();
             if (level instanceof ServerLevel serverlevel) {
@@ -1554,7 +_,11 @@
 
     @Nullable
     public Component getTabListDisplayName() {
-        return null;
+        if (!this.hasTabListName) {
+            this.tabListDisplayName = net.neoforged.neoforge.event.EventHooks.getPlayerTabListDisplayName(this);
+            this.hasTabListName = true;
+        }
+        return this.tabListDisplayName;
     }
 
     @Override
@@ -1580,21 +_,23 @@
         this.stopRiding();
         if (p_9000_ == this.level()) {
             this.connection.teleport(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
-        } else {
+        } else if (net.neoforged.neoforge.common.CommonHooks.onTravelToDimension(this, p_9000_.dimension())) {
             ServerLevel serverlevel = this.serverLevel();
             LevelData leveldata = p_9000_.getLevelData();
             this.connection.send(new ClientboundRespawnPacket(this.createCommonSpawnInfo(p_9000_), (byte)3));
             this.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
             this.server.getPlayerList().sendPlayerPermissionLevel(this);
             serverlevel.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
-            this.unsetRemoved();
+            this.revive();
             this.moveTo(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
             this.setServerLevel(p_9000_);
             p_9000_.addDuringCommandTeleport(this);
             this.triggerDimensionChangeTriggers(serverlevel);
             this.connection.teleport(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
+            this.gameMode.setLevel(p_9000_);
             this.server.getPlayerList().sendLevelInfo(this, p_9000_);
             this.server.getPlayerList().sendAllPlayerInfo(this);
+            net.neoforged.neoforge.event.EventHooks.firePlayerChangedDimensionEvent(this, serverlevel.dimension(), p_9000_.dimension());
         }
     }
 
@@ -1616,6 +_,7 @@
     }
 
     public void setRespawnPosition(ResourceKey<Level> p_9159_, @Nullable BlockPos p_9160_, float p_9161_, boolean p_9162_, boolean p_9163_) {
+        if (net.neoforged.neoforge.event.EventHooks.onPlayerSpawnSet(this, p_9160_ == null ? Level.OVERWORLD : p_9159_, p_9160_, p_9162_)) return;
         if (p_9160_ != null) {
             boolean flag = p_9160_.equals(this.respawnPosition) && p_9159_.equals(this.respawnDimension);
             if (p_9163_ && !flag) {
@@ -1673,6 +_,8 @@
         if (itementity == null) {
             return null;
         } else {
+            if (captureDrops() != null) captureDrops().add(itementity);
+            else
             this.level().addFreshEntity(itementity);
             ItemStack itemstack = itementity.getItem();
             if (p_9087_) {
@@ -1687,6 +_,75 @@
         }
     }
 
+    /**
+     * Returns the language last reported by the player as their local language.
+     * Defaults to en_us if the value is unknown.
+     */
+    public String getLanguage() {
+        return this.language;
+    }
+
+    private Component tabListHeader = Component.empty();
+    private Component tabListFooter = Component.empty();
+
+    public Component getTabListHeader() {
+         return this.tabListHeader;
+    }
+
+    /**
+     * Set the tab list header while preserving the footer.
+     *
+     * @param header the new header, or {@link Component#empty()} to clear
+     */
+    public void setTabListHeader(final Component header) {
+         this.setTabListHeaderFooter(header, this.tabListFooter);
+    }
+
+    public Component getTabListFooter() {
+         return this.tabListFooter;
+    }
+
+    /**
+     * Set the tab list footer while preserving the header.
+     *
+     * @param footer the new footer, or {@link Component#empty()} to clear
+     */
+    public void setTabListFooter(final Component footer) {
+         this.setTabListHeaderFooter(this.tabListHeader, footer);
+    }
+
+    /**
+     * Set the tab list header and footer at once.
+     *
+     * @param header the new header, or {@link Component#empty()} to clear
+     * @param footer the new footer, or {@link Component#empty()} to clear
+     */
+    public void setTabListHeaderFooter(final Component header, final Component footer) {
+         if (java.util.Objects.equals(header, this.tabListHeader)
+              && java.util.Objects.equals(footer, this.tabListFooter)) {
+              return;
+         }
+
+         this.tabListHeader = java.util.Objects.requireNonNull(header, "header");
+         this.tabListFooter = java.util.Objects.requireNonNull(footer, "footer");
+
+         this.connection.send(new net.minecraft.network.protocol.game.ClientboundTabListPacket(header, footer));
+    }
+
+    // We need this as tablistDisplayname may be null even if the event was fired.
+    private boolean hasTabListName = false;
+    private Component tabListDisplayName = null;
+    /**
+     * Force the name displayed in the tab list to refresh, by firing {@link net.neoforged.neoforge.event.entity.player.PlayerEvent.TabListNameFormat}.
+     */
+    public void refreshTabListName() {
+        Component oldName = this.tabListDisplayName;
+        this.tabListDisplayName = net.neoforged.neoforge.event.EventHooks.getPlayerTabListDisplayName(this);
+        if (!java.util.Objects.equals(oldName, this.tabListDisplayName)) {
+            this.getServer().getPlayerList().broadcastAll(new net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME, this));
+        }
+    }
+
     public TextFilter getTextFilter() {
         return this.textFilter;
     }
@@ -1751,9 +_,12 @@
 
     public boolean drop(boolean p_182295_) {
         Inventory inventory = this.getInventory();
+        ItemStack selected = inventory.getSelected();
+        if (selected.isEmpty() || !selected.onDroppedByPlayer(this)) return false;
+        if (isUsingItem() && getUsedItemHand() == InteractionHand.MAIN_HAND && (p_182295_ || selected.getCount() == 1)) stopUsingItem(); // Forge: fix MC-231097 on the serverside
         ItemStack itemstack = inventory.removeFromSelected(p_182295_);
         this.containerMenu.findSlot(inventory, inventory.selected).ifPresent(p_287377_ -> this.containerMenu.setRemoteSlot(p_287377_, inventory.getSelected()));
-        return this.drop(itemstack, false, true) != null;
+        return net.neoforged.neoforge.common.CommonHooks.onPlayerTossEvent(this, itemstack, true) != null;
     }
 
     public boolean allowsListing() {
