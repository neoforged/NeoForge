--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -252,6 +_,10 @@
         }
 
         private void broadcastDataValue(AbstractContainerMenu container, int id, int value) {
+            if (ServerPlayer.this.connection.hasChannel(net.neoforged.neoforge.network.payload.AdvancedContainerSetDataPayload.TYPE)) {
+                ServerPlayer.this.connection.send(new net.neoforged.neoforge.network.payload.AdvancedContainerSetDataPayload((byte) container.containerId, (short) id, value));
+                return;
+            }
             ServerPlayer.this.connection.send(new ClientboundContainerSetDataPacket(container.containerId, id, value));
         }
     };
@@ -606,6 +_,11 @@
                 this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
             }
 
+            if (this.getAbilities().flying && !this.mayFly()) {
+                this.getAbilities().flying = false;
+                this.onUpdateAbilities();
+            }
+
             if (this.tickCount % 20 == 0) {
                 CriteriaTriggers.LOCATION.trigger(this);
             }
@@ -657,6 +_,7 @@
     @Override
     public void die(DamageSource cause) {
         this.gameEvent(GameEvent.ENTITY_DIE);
+        if (net.neoforged.neoforge.common.CommonHooks.onLivingDeath(this, cause)) return;
         boolean flag = this.level().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
         if (flag) {
             Component component = this.getCombatTracker().getDeathMessage();
@@ -826,7 +_,7 @@
             return BedBlock.findStandUpPosition(EntityType.PLAYER, level, pos, blockstate.getValue(BedBlock.FACING), angle)
                 .map(p_348148_ -> ServerPlayer.RespawnPosAngle.of(p_348148_, pos));
         } else if (!forced) {
-            return Optional.empty();
+            return blockstate.getRespawnPosition(EntityType.PLAYER, level, pos, angle);
         } else {
             boolean flag = block.isPossibleToRespawnInThis(blockstate);
             BlockState blockstate1 = level.getBlockState(pos.above());
@@ -870,6 +_,7 @@
                 transition.postDimensionTransition().onTransition(this);
                 return this;
             } else {
+                if (!net.neoforged.neoforge.common.CommonHooks.onTravelToDimension(this, transition.newLevel().dimension())) return null;
                 this.isChangingDimension = true;
                 LevelData leveldata = serverlevel.getLevelData();
                 this.connection.send(new ClientboundRespawnPacket(this.createCommonSpawnInfo(serverlevel), (byte)3));
@@ -877,7 +_,7 @@
                 PlayerList playerlist = this.server.getPlayerList();
                 playerlist.sendPlayerPermissionLevel(this);
                 serverlevel1.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
-                this.unsetRemoved();
+                this.revive();
                 serverlevel1.getProfiler().push("moving");
                 if (resourcekey == Level.OVERWORLD && serverlevel.dimension() == Level.NETHER) {
                     this.enteredNetherPosition = this.position();
@@ -895,10 +_,12 @@
                 playerlist.sendLevelInfo(this, serverlevel);
                 playerlist.sendAllPlayerInfo(this);
                 playerlist.sendActivePlayerEffects(this);
+                // TODO 1.21: Play custom teleport sound
                 transition.postDimensionTransition().onTransition(this);
                 this.lastSentExp = -1;
                 this.lastSentHealth = -1.0F;
                 this.lastSentFood = -1;
+                net.neoforged.neoforge.event.EventHooks.firePlayerChangedDimensionEvent(this, resourcekey, transition.newLevel().dimension());
                 return this;
             }
         }
@@ -934,6 +_,15 @@
 
     @Override
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos at) {
+        // Neo: Encapsulate the vanilla check logic to supply to the CanPlayerSleepEvent
+        var vanillaResult = ((java.util.function.Supplier<Either<BedSleepingProblem, Unit>>) () -> {
+        // Guard against modded beds that may not have the FACING property.
+        // We just return success (Unit) here. Modders will need to implement conditions in the CanPlayerSleepEvent
+        if (!this.level().getBlockState(at).hasProperty(HorizontalDirectionalBlock.FACING)) {
+            return Either.right(Unit.INSTANCE);
+        }
+
+        // Start vanilla code
         Direction direction = this.level().getBlockState(at).getValue(HorizontalDirectionalBlock.FACING);
         if (this.isSleeping() || !this.isAlive()) {
             return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
@@ -962,7 +_,21 @@
                         return Either.left(Player.BedSleepingProblem.NOT_SAFE);
                     }
                 }
-
+        // End vanilla code
+            }
+        }
+        return Either.right(Unit.INSTANCE);
+        }).get();
+
+        // Fire the event. Return the error if one exists after the event, otherwise use the vanilla logic to start sleeping.
+        vanillaResult = net.neoforged.neoforge.event.EventHooks.canPlayerStartSleeping(this, at, vanillaResult);
+        if (vanillaResult.left().isPresent()) {
+            return vanillaResult;
+        }
+
+        {
+            {
+                // Start vanilla code
                 Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(at).ifRight(p_9029_ -> {
                     this.awardStat(Stats.SLEEP_IN_BED);
                     CriteriaTriggers.SLEPT_IN_BED.trigger(this);
@@ -984,6 +_,7 @@
     }
 
     private boolean bedInRange(BlockPos pos, Direction direction) {
+        if (direction == null) return false;
         return this.isReachableBedBlock(pos) || this.isReachableBedBlock(pos.relative(direction.getOpposite()));
     }
 
@@ -1074,11 +_,19 @@
 
     @Override
     public OptionalInt openMenu(@Nullable MenuProvider menu) {
+        return openMenu(menu, (java.util.function.Consumer<net.minecraft.network.RegistryFriendlyByteBuf>) null);
+    }
+
+    @Override
+    public OptionalInt openMenu(@Nullable MenuProvider menu, @Nullable java.util.function.Consumer<net.minecraft.network.RegistryFriendlyByteBuf> extraDataWriter) {
         if (menu == null) {
             return OptionalInt.empty();
         } else {
             if (this.containerMenu != this.inventoryMenu) {
+                if (menu.shouldTriggerClientSideContainerClosingOnOpen())
                 this.closeContainer();
+                else
+                    this.doCloseContainer();
             }
 
             this.nextContainerCounter();
@@ -1090,10 +_,16 @@
 
                 return OptionalInt.empty();
             } else {
+                if (extraDataWriter == null) {
                 this.connection
                     .send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), menu.getDisplayName()));
+                } else {
+                    this.connection
+                        .send(new net.neoforged.neoforge.network.payload.AdvancedOpenScreenPayload(abstractcontainermenu.containerId, abstractcontainermenu.getType(), menu.getDisplayName(), net.neoforged.neoforge.common.util.FriendlyByteBufUtil.writeCustomData(extraDataWriter, registryAccess())));
+                }
                 this.initMenu(abstractcontainermenu);
                 this.containerMenu = abstractcontainermenu;
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Open(this, this.containerMenu));
                 return OptionalInt.of(this.containerCounter);
             }
         }
@@ -1115,6 +_,7 @@
         this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, i, horse.getId()));
         this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.getInventory(), inventory, horse, i);
         this.initMenu(this.containerMenu);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Open(this, this.containerMenu));
     }
 
     @Override
@@ -1143,6 +_,7 @@
     public void doCloseContainer() {
         this.containerMenu.removed(this);
         this.inventoryMenu.transferState(this.containerMenu);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.PlayerContainerEvent.Close(this, this.containerMenu));
         this.containerMenu = this.inventoryMenu;
     }
 
@@ -1375,6 +_,15 @@
         this.setShoulderEntityLeft(that.getShoulderEntityLeft());
         this.setShoulderEntityRight(that.getShoulderEntityRight());
         this.setLastDeathLocation(that.getLastDeathLocation());
+
+        //Copy over a section of the Entity Data from the old player.
+        //Allows mods to specify data that persists after players respawn.
+        CompoundTag old = that.getPersistentData();
+        if (old.contains(PERSISTED_NBT_TAG))
+             getPersistentData().put(PERSISTED_NBT_TAG, old.get(PERSISTED_NBT_TAG));
+        net.neoforged.neoforge.event.EventHooks.onPlayerClone(this, that, !keepEverything);
+        this.tabListHeader = that.tabListHeader;
+        this.tabListFooter = that.tabListFooter;
     }
 
     @Override
@@ -1469,6 +_,8 @@
 
     public boolean setGameMode(GameType gameMode) {
         boolean flag = this.isSpectator();
+        gameMode = net.neoforged.neoforge.common.CommonHooks.onChangeGameType(this, this.gameMode.getGameModeForPlayer(), gameMode);
+        if (gameMode == null) return false;
         if (!this.gameMode.changeGameModeForPlayer(gameMode)) {
             return false;
         } else {
@@ -1617,6 +_,7 @@
     public void setCamera(@Nullable Entity entityToSpectate) {
         Entity entity = this.getCamera();
         this.camera = (Entity)(entityToSpectate == null ? this : entityToSpectate);
+        while (this.camera instanceof net.neoforged.neoforge.entity.PartEntity<?> partEntity) this.camera = partEntity.getParent(); // Neo: fix MC-46486
         if (entity != this.camera) {
             if (this.camera.level() instanceof ServerLevel serverlevel) {
                 this.teleportTo(serverlevel, this.camera.getX(), this.camera.getY(), this.camera.getZ(), Set.of(), this.getYRot(), this.getXRot());
@@ -1653,7 +_,11 @@
 
     @Nullable
     public Component getTabListDisplayName() {
-        return null;
+        if (!this.hasTabListName) {
+            this.tabListDisplayName = net.neoforged.neoforge.event.EventHooks.getPlayerTabListDisplayName(this);
+            this.hasTabListName = true;
+        }
+        return this.tabListDisplayName;
     }
 
     @Override
@@ -1710,6 +_,7 @@
     }
 
     public void setRespawnPosition(ResourceKey<Level> dimension, @Nullable BlockPos position, float angle, boolean forced, boolean sendMessage) {
+        if (net.neoforged.neoforge.event.EventHooks.onPlayerSpawnSet(this, position == null ? Level.OVERWORLD : dimension, position, forced)) return;
         if (position != null) {
             boolean flag = position.equals(this.respawnPosition) && dimension.equals(this.respawnDimension);
             if (sendMessage && !flag) {
@@ -1767,6 +_,8 @@
         if (itementity == null) {
             return null;
         } else {
+            if (captureDrops() != null) captureDrops().add(itementity);
+            else
             this.level().addFreshEntity(itementity);
             ItemStack itemstack = itementity.getItem();
             if (traceItem) {
@@ -1781,6 +_,75 @@
         }
     }
 
+    /**
+     * Returns the language last reported by the player as their local language.
+     * Defaults to en_us if the value is unknown.
+     */
+    public String getLanguage() {
+        return this.language;
+    }
+
+    private Component tabListHeader = Component.empty();
+    private Component tabListFooter = Component.empty();
+
+    public Component getTabListHeader() {
+         return this.tabListHeader;
+    }
+
+    /**
+     * Set the tab list header while preserving the footer.
+     *
+     * @param header the new header, or {@link Component#empty()} to clear
+     */
+    public void setTabListHeader(final Component header) {
+         this.setTabListHeaderFooter(header, this.tabListFooter);
+    }
+
+    public Component getTabListFooter() {
+         return this.tabListFooter;
+    }
+
+    /**
+     * Set the tab list footer while preserving the header.
+     *
+     * @param footer the new footer, or {@link Component#empty()} to clear
+     */
+    public void setTabListFooter(final Component footer) {
+         this.setTabListHeaderFooter(this.tabListHeader, footer);
+    }
+
+    /**
+     * Set the tab list header and footer at once.
+     *
+     * @param header the new header, or {@link Component#empty()} to clear
+     * @param footer the new footer, or {@link Component#empty()} to clear
+     */
+    public void setTabListHeaderFooter(final Component header, final Component footer) {
+         if (java.util.Objects.equals(header, this.tabListHeader)
+              && java.util.Objects.equals(footer, this.tabListFooter)) {
+              return;
+         }
+
+         this.tabListHeader = java.util.Objects.requireNonNull(header, "header");
+         this.tabListFooter = java.util.Objects.requireNonNull(footer, "footer");
+
+         this.connection.send(new net.minecraft.network.protocol.game.ClientboundTabListPacket(header, footer));
+    }
+
+    // We need this as tablistDisplayname may be null even if the event was fired.
+    private boolean hasTabListName = false;
+    private Component tabListDisplayName = null;
+    /**
+     * Force the name displayed in the tab list to refresh, by firing {@link net.neoforged.neoforge.event.entity.player.PlayerEvent.TabListNameFormat}.
+     */
+    public void refreshTabListName() {
+        Component oldName = this.tabListDisplayName;
+        this.tabListDisplayName = net.neoforged.neoforge.event.EventHooks.getPlayerTabListDisplayName(this);
+        if (!java.util.Objects.equals(oldName, this.tabListDisplayName)) {
+            this.getServer().getPlayerList().broadcastAll(new net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME, this));
+        }
+    }
+
     public TextFilter getTextFilter() {
         return this.textFilter;
     }
@@ -1841,9 +_,12 @@
 
     public boolean drop(boolean dropStack) {
         Inventory inventory = this.getInventory();
+        ItemStack selected = inventory.getSelected();
+        if (selected.isEmpty() || !selected.onDroppedByPlayer(this)) return false;
+        if (isUsingItem() && getUsedItemHand() == InteractionHand.MAIN_HAND && (dropStack || selected.getCount() == 1)) stopUsingItem(); // Forge: fix MC-231097 on the serverside
         ItemStack itemstack = inventory.removeFromSelected(dropStack);
         this.containerMenu.findSlot(inventory, inventory.selected).ifPresent(p_287377_ -> this.containerMenu.setRemoteSlot(p_287377_, inventory.getSelected()));
-        return this.drop(itemstack, false, true) != null;
+        return net.neoforged.neoforge.common.CommonHooks.onPlayerTossEvent(this, itemstack, true) != null;
     }
 
     public boolean allowsListing() {
@@ -1958,7 +_,7 @@
         this.awardStat(Stats.ITEM_BROKEN.get(item));
     }
 
-    static record RespawnPosAngle(Vec3 position, float yaw) {
+    public static record RespawnPosAngle(Vec3 position, float yaw) {
         public static ServerPlayer.RespawnPosAngle of(Vec3 position, BlockPos towardsPos) {
             return new ServerPlayer.RespawnPosAngle(position, calculateLookAtYaw(position, towardsPos));
         }
