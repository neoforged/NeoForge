--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -54,6 +_,8 @@
     private long ticketTickCounter;
     private int simulationDistance = 10;
 
+    private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
+
     protected DistanceManager(Executor dispatcher, Executor mainThreadExecutor) {
         ProcessorHandle<Runnable> processorhandle = ProcessorHandle.of("player ticket throttler", mainThreadExecutor::execute);
         ChunkTaskPriorityQueueSorter chunktaskpriorityqueuesorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(processorhandle), dispatcher, 4);
@@ -152,6 +_,10 @@
         if (p_ticket.getTicketLevel() < i) {
             this.ticketTracker.update(chunkPos, p_ticket.getTicketLevel(), true);
         }
+        if (p_ticket.isForceTicks()) {
+             SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(chunkPos, e -> SortedArraySet.create(4));
+             tickets.addOrGet(ticket);
+        }
     }
 
     void removeTicket(long chunkPos, Ticket<?> ticket) {
@@ -164,6 +_,13 @@
         }
 
         this.ticketTracker.update(chunkPos, getTicketLevelAt(sortedarrayset), false);
+
+        if (ticket.isForceTicks()) {
+             SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+             if (tickets != null) {
+                  tickets.remove(ticket);
+             }
+        }
     }
 
     public <T> void addTicket(TicketType<T> type, ChunkPos pos, int level, T value) {
@@ -176,14 +_,20 @@
     }
 
     public <T> void addRegionTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
-        Ticket<T> ticket = new Ticket<>(type, ChunkLevel.byStatus(FullChunkStatus.FULL) - distance, value);
+        addRegionTicket(type, pos, distance, value, false);
+    }
+    public <T> void addRegionTicket(TicketType<T> type, ChunkPos pos, int distance, T value, boolean forceTicks) {
+        Ticket<T> ticket = new Ticket<>(type, ChunkLevel.byStatus(FullChunkStatus.FULL) - distance, value, forceTicks);
         long i = pos.toLong();
         this.addTicket(i, ticket);
         this.tickingTicketsTracker.addTicket(i, ticket);
     }
 
     public <T> void removeRegionTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
-        Ticket<T> ticket = new Ticket<>(type, ChunkLevel.byStatus(FullChunkStatus.FULL) - distance, value);
+        removeRegionTicket(type, pos, distance, value, false);
+    }
+    public <T> void removeRegionTicket(TicketType<T> type, ChunkPos pos, int distance, T value, boolean forceTicks) {
+        Ticket<T> ticket = new Ticket<>(type, ChunkLevel.byStatus(FullChunkStatus.FULL) - distance, value, forceTicks);
         long i = pos.toLong();
         this.removeTicket(i, ticket);
         this.tickingTicketsTracker.removeTicket(i, ticket);
@@ -267,6 +_,11 @@
 
     public String getDebugStatus() {
         return this.ticketThrottler.getDebugStatus();
+    }
+
+    public boolean shouldForceTicks(long chunkPos) {
+         SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+         return tickets != null && !tickets.isEmpty();
     }
 
     private void dumpTickets(String filename) {
