--- a/net/minecraft/server/level/Ticket.java
+++ b/net/minecraft/server/level/Ticket.java
@@ -9,9 +_,14 @@
     private long createdTick;
 
     protected Ticket(TicketType<T> type, int ticketLevel, T key) {
+        this(type, ticketLevel, key, false);
+    }
+
+    public Ticket(TicketType<T> type, int ticketLevel, T key, boolean forceTicks) {
         this.type = type;
         this.ticketLevel = ticketLevel;
         this.key = key;
+        this.forceTicks = forceTicks;
     }
 
     public int compareTo(Ticket<?> other) {
@@ -31,18 +_,18 @@
         } else {
             return !(other instanceof Ticket<?> ticket)
                 ? false
-                : this.ticketLevel == ticket.ticketLevel && Objects.equals(this.type, ticket.type) && Objects.equals(this.key, ticket.key);
+                : this.ticketLevel == ticket.ticketLevel && Objects.equals(this.type, ticket.type) && Objects.equals(this.key, ticket.key) && this.forceTicks == ticket.forceTicks;
         }
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(this.type, this.ticketLevel, this.key);
+        return Objects.hash(this.type, this.ticketLevel, this.key, this.forceTicks);
     }
 
     @Override
     public String toString() {
-        return "Ticket[" + this.type + " " + this.ticketLevel + " (" + this.key + ")] at " + this.createdTick;
+        return "Ticket[" + this.type + " " + this.ticketLevel + " (" + this.key + ")] at " + this.createdTick + " force ticks " + this.forceTicks;
     }
 
     public TicketType<T> getType() {
@@ -60,5 +_,12 @@
     protected boolean timedOut(long currentTime) {
         long i = this.type.timeout();
         return i != 0L && currentTime - this.createdTick > i;
+    }
+
+    // Neo: Injected ability to force chunks to tick
+    private final boolean forceTicks;
+
+    public boolean isForceTicks() {
+        return forceTicks;
     }
 }
