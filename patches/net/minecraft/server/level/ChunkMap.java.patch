--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -395,6 +_,7 @@
                 this.modified = true;
             }
 
+            net.neoforged.neoforge.event.EventHooks.fireChunkTicketLevelUpdated(this.level, chunkPos, oldLevel, newLevel, holder);
             return holder;
         }
     }
@@ -508,8 +_,11 @@
             } else {
                 ChunkAccess chunkaccess = chunkHolder.getLatestChunk();
                 if (this.pendingUnloads.remove(chunkPos, chunkHolder) && chunkaccess != null) {
+                    net.neoforged.neoforge.common.CommonHooks.onChunkUnload(this.poiManager, chunkaccess); // Neo: Must be called for all chunk unloading. Not just LevelChunks.
+                    this.chunkTypeCache.remove(chunkaccess.getPos().toLong()); // Neo: Prevent chunk type cache from permanently retaining data for unloaded chunks
                     if (chunkaccess instanceof LevelChunk levelchunk) {
                         levelchunk.setLoaded(false);
+                        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkEvent.Unload(chunkaccess));
                     }
 
                     this.save(chunkaccess);
@@ -756,6 +_,7 @@
 
                 this.level.getProfiler().incrementCounter("chunkSave");
                 CompoundTag compoundtag = ChunkSerializer.write(this.level, chunk);
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkDataEvent.Save(chunk, chunk.getLevel() != null ? chunk.getLevel() : this.level, compoundtag));
                 this.write(chunkpos, compoundtag).exceptionally(p_351776_ -> {
                     this.level.getServer().reportChunkSaveFailure(p_351776_, this.storageInfo(), chunkpos);
                     return null;
@@ -817,9 +_,11 @@
 
     private static void markChunkPendingToSend(ServerPlayer player, LevelChunk chunk) {
         player.connection.chunkSender.markChunkPendingToSend(chunk);
+        net.neoforged.neoforge.event.EventHooks.fireChunkWatch(player, chunk, player.serverLevel());
     }
 
     private static void dropChunk(ServerPlayer player, ChunkPos chunkPos) {
+        net.neoforged.neoforge.event.EventHooks.fireChunkUnWatch(player, chunkPos, player.serverLevel());
         player.connection.chunkSender.dropChunk(player, chunkPos);
     }
 
@@ -1018,6 +_,7 @@
                 this.playerMap.unIgnorePlayer(player);
             }
 
+            //PATCH 1.20.2: Figure out the firing of the watch and unwatch events when chunk tracking updates.
             this.updateChunkTracking(player);
         }
     }
@@ -1069,7 +_,7 @@
     }
 
     protected void addEntity(Entity entity) {
-        if (!(entity instanceof EnderDragonPart)) {
+        if (!(entity instanceof net.neoforged.neoforge.entity.PartEntity)) {
             EntityType<?> entitytype = entity.getType();
             int i = entitytype.clientTrackingRange() * 16;
             if (i != 0) {
@@ -1313,5 +_,20 @@
                 this.updatePlayer(serverplayer);
             }
         }
+    }
+
+    /**
+     * Neo: PR #937
+     * This is for mainly pre-generation usage such as Neoforge's generate command.
+     * Use this to schedule chunk load tasks into ChunkTaskPriorityQueueSorter so a chunk is fully finished all of their tasks before scheduling more chunks to load.
+     * Reason for this is when scheduling a huge ton of Full Status chunk tasks to the server (to load chunks),
+     * you could cause the server to only process those loading tasks and never reach the two chunk tasks that are
+     * automatically scheduled to run after the chunk is loaded to Full. As a result of flooding the system with Full Status chunk tasks,
+     * the queue for the two kind of successor chunk tasks will grow and become a memory leak of lambdas and chunk references.
+     * Use this method to schedule tasks for loading chunks in your whenCompleteAsync method call so the tasks gets processed properly over time and not leak.
+     * See {@link net.neoforged.neoforge.server.command.generation.GenerationTask#enqueueChunks} as an example usage of this method.
+     */
+    public void scheduleOnMainThreadMailbox(ChunkTaskPriorityQueueSorter.Message<Runnable> msg) {
+        mainThreadMailbox.tell(msg);
     }
 }
