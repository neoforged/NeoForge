--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -410,6 +_,7 @@
             this.modified = true;
          }
 
+         net.neoforged.neoforge.event.EventHooks.fireChunkTicketLevelUpdated(this.level, p_140177_, p_140180_, p_140178_, p_140179_);
          return p_140179_;
       }
    }
@@ -524,6 +_,7 @@
             if (this.pendingUnloads.remove(p_140182_, p_140183_) && p_203002_ != null) {
                if (p_203002_ instanceof LevelChunk) {
                   ((LevelChunk)p_203002_).setLoaded(false);
+                  net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkEvent.Unload(p_203002_));
                }
 
                this.save(p_203002_);
@@ -729,11 +_,22 @@
             }
 
             levelchunk.setFullStatus(() -> ChunkLevel.fullStatus(p_140384_.getTicketLevel()));
+            try {
+            p_140384_.currentlyLoading = levelchunk; // Neo: bypass the future chain when getChunk is called, this prevents deadlocks.
             levelchunk.runPostLoad();
+            } finally {
+            p_140384_.currentlyLoading = null; // Neo: Stop bypassing the future chain.
+            }
             if (this.entitiesInLevel.add(chunkpos.toLong())) {
                levelchunk.setLoaded(true);
+               try {
+               p_140384_.currentlyLoading = levelchunk; // Neo: bypass the future chain when getChunk is called, this prevents deadlocks.
                levelchunk.registerAllBlockEntitiesAfterLevelLoad();
                levelchunk.registerTickContainerInLevel(this.level);
+               net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkEvent.Load(levelchunk, !(protochunk instanceof ImposterProtoChunk)));
+               } finally {
+                   p_140384_.currentlyLoading = null; // Neo: Stop bypassing the future chain.
+               }
             }
 
             return levelchunk;
@@ -836,6 +_,7 @@
 
             this.level.getProfiler().incrementCounter("chunkSave");
             CompoundTag compoundtag = ChunkSerializer.write(this.level, p_140259_);
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkDataEvent.Save(p_140259_, p_140259_.getWorldForge() != null ? p_140259_.getWorldForge() : this.level, compoundtag));
             this.write(chunkpos, compoundtag);
             this.markPosition(chunkpos, chunkstatus.getChunkType());
             return true;
@@ -1089,6 +_,7 @@
             this.playerMap.unIgnorePlayer(p_140185_);
          }
 
+         //PATCH 1.20.2: Figure out the firing of the watch and unwatch events when chunk tracking updates.
          this.updateChunkTracking(p_140185_);
       }
    }
@@ -1141,7 +_,7 @@
    }
 
    protected void addEntity(Entity p_140200_) {
-      if (!(p_140200_ instanceof EnderDragonPart)) {
+      if (!(p_140200_ instanceof net.neoforged.neoforge.entity.PartEntity)) {
          EntityType<?> entitytype = p_140200_.getType();
          int i = entitytype.clientTrackingRange() * 16;
          if (i != 0) {
