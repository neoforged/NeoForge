--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -42,6 +_,10 @@
     private boolean closed = false;
     private int latency;
     private volatile boolean suspendFlushingOnServerThread = false;
+    /**
+     * Holds the current connection type, based on the types of payloads that have been received so far.
+     */
+    protected net.neoforged.neoforge.network.connection.ConnectionType connectionType;
 
     public ServerCommonPacketListenerImpl(MinecraftServer server, Connection connection, CommonListenerCookie cookie) {
         this.server = server;
@@ -49,6 +_,8 @@
         this.keepAliveTime = Util.getMillis();
         this.latency = cookie.latency();
         this.transferred = cookie.transferred();
+        // Neo: Set the connection type based on the cookie from the previous phase.
+        this.connectionType = cookie.connectionType();
     }
 
     private void close() {
@@ -83,6 +_,22 @@
 
     @Override
     public void handleCustomPayload(ServerboundCustomPayloadPacket packet) {
+        // Neo: Unconditionally handle register/unregister payloads.
+        if (packet.payload() instanceof net.neoforged.neoforge.network.payload.MinecraftRegisterPayload minecraftRegisterPayload) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.onMinecraftRegister(this.getConnection(), minecraftRegisterPayload.newChannels());
+            return;
+        }
+
+        if (packet.payload() instanceof net.neoforged.neoforge.network.payload.MinecraftUnregisterPayload minecraftUnregisterPayload) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.onMinecraftUnregister(this.getConnection(), minecraftUnregisterPayload.forgottenChannels());
+            return;
+        }
+
+        // Neo: Handle modded payloads. Vanilla payloads do not get sent to the modded handling pass. Additional payloads cannot be registered in the minecraft domain.
+        if (net.neoforged.neoforge.network.registration.NetworkRegistry.isModdedPayload(packet.payload())) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.handleModdedPayload(this, packet);
+            return;
+        }
     }
 
     @Override
@@ -141,7 +_,10 @@
         this.send(packet, null);
     }
 
+    @Override
     public void send(Packet<?> packet, @Nullable PacketSendListener listener) {
+        net.neoforged.neoforge.network.registration.NetworkRegistry.checkPacket(packet, this);
+
         if (packet.isTerminal()) {
             this.close();
         }
@@ -183,7 +_,41 @@
         return this.latency;
     }
 
+    /**
+     * Creates a new cookie for this connection.
+     *
+     * @param clientInformation The client information.
+     * @return The cookie.
+     * @deprecated Use {@link #createCookie(ClientInformation, net.neoforged.neoforge.network.connection.ConnectionType)} instead, keeping the connection type information available.
+     */
+    @Deprecated
     protected CommonListenerCookie createCookie(ClientInformation clientInformation) {
         return new CommonListenerCookie(this.playerProfile(), this.latency, clientInformation, this.transferred);
+    }
+
+    /**
+     * Creates a new cookie for this connection.
+     *
+     * @param clientInformation The client information.
+     * @param connectionType Whether the connection is modded.
+     * @return The cookie.
+     */
+    protected CommonListenerCookie createCookie(ClientInformation clientInformation, net.neoforged.neoforge.network.connection.ConnectionType connectionType) {
+        return new CommonListenerCookie(this.playerProfile(), this.latency, clientInformation, this.transferred, connectionType);
+    }
+
+    @Override
+    public Connection getConnection() {
+        return connection;
+    }
+
+    @Override
+    public net.minecraft.util.thread.ReentrantBlockableEventLoop<?> getMainThreadEventLoop() {
+        return server;
+    }
+
+    @Override
+    public net.neoforged.neoforge.network.connection.ConnectionType getConnectionType() {
+        return connectionType;
     }
 }
