--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -232,6 +_,7 @@
     private final MessageSignatureCache messageSignatureCache = MessageSignatureCache.createDefault();
     private final FutureChain chatMessageChain;
     private boolean waitingForSwitchToConfig;
+    private net.neoforged.neoforge.network.connection.ConnectionType connectionType;
 
     public ServerGamePacketListenerImpl(MinecraftServer p_9770_, Connection p_9771_, ServerPlayer p_9772_, CommonListenerCookie p_301978_) {
         super(p_9770_, p_9771_, p_301978_);
@@ -241,6 +_,7 @@
         p_9772_.getTextFilter().join();
         this.signedMessageDecoder = SignedMessageChain.Decoder.unsigned(p_9772_.getUUID(), p_9770_::enforceSecureProfile);
         this.chatMessageChain = new FutureChain(p_9770_);
+        this.connectionType = p_301978_.connectionType();
     }
 
     @Override
@@ -438,9 +_,11 @@
                 }
 
                 entity.absMoveTo(d3, d4, d5, f, f1);
+                resyncPlayerWithVehicle(entity); // Neo - Resync player position on vehicle moving
                 boolean flag3 = serverlevel.noCollision(entity, entity.getBoundingBox().deflate(0.0625));
                 if (flag && (flag2 || !flag3)) {
                     entity.absMoveTo(d0, d1, d2, f, f1);
+                    resyncPlayerWithVehicle(entity); // Neo - Resync player position on vehicle moving
                     this.send(new ClientboundMoveVehiclePacket(entity));
                     return;
                 }
@@ -459,6 +_,23 @@
         }
     }
 
+    private void resyncPlayerWithVehicle(Entity vehicle) {
+        Vec3 oldPos = this.player.position();
+        float yRot = this.player.getYRot();
+        float xRot = this.player.getXRot();
+        float yHeadRot = this.player.getYHeadRot();
+
+        vehicle.positionRider(this.player);
+
+        // preserve old rotation and store old position in xo/yo/zo
+        this.player.setYRot(yRot);
+        this.player.setXRot(xRot);
+        this.player.setYHeadRot(yHeadRot);
+        this.player.xo = oldPos.x;
+        this.player.yo = oldPos.y;
+        this.player.zo = oldPos.z;
+    }
+
     private boolean noBlocksAround(Entity p_9794_) {
         return p_9794_.level()
             .getBlockStates(p_9794_.getBoundingBox().inflate(0.0625).expandTowards(0.0, -0.55, 0.0))
@@ -1027,8 +_,10 @@
             case SWAP_ITEM_WITH_OFFHAND:
                 if (!this.player.isSpectator()) {
                     ItemStack itemstack = this.player.getItemInHand(InteractionHand.OFF_HAND);
-                    this.player.setItemInHand(InteractionHand.OFF_HAND, this.player.getItemInHand(InteractionHand.MAIN_HAND));
-                    this.player.setItemInHand(InteractionHand.MAIN_HAND, itemstack);
+                    var event = net.neoforged.neoforge.common.CommonHooks.onLivingSwapHandItems(this.player);
+                    if (event.isCanceled()) return;
+                    this.player.setItemInHand(InteractionHand.OFF_HAND, event.getItemSwappedToOffHand());
+                    this.player.setItemInHand(InteractionHand.MAIN_HAND, event.getItemSwappedToMainHand());
                     this.player.stopUsingItem();
                 }
 
@@ -1056,7 +_,7 @@
                     .handleBlockBreakAction(
                         blockpos, serverboundplayeractionpacket$action, p_9889_.getDirection(), this.player.level().getMaxBuildHeight(), p_9889_.getSequence()
                     );
-                this.player.connection.ackBlockChangesUpTo(p_9889_.getSequence());
+                this.player.connection.ackBlockChangesUpTo =p_9889_.getSequence();
                 return;
             default:
                 throw new IllegalArgumentException("Invalid player action");
@@ -1075,7 +_,7 @@
     @Override
     public void handleUseItemOn(ServerboundUseItemOnPacket p_9930_) {
         PacketUtils.ensureRunningOnSameThread(p_9930_, this, this.player.serverLevel());
-        this.player.connection.ackBlockChangesUpTo(p_9930_.getSequence());
+        this.player.connection.ackBlockChangesUpTo = p_9930_.getSequence();
         ServerLevel serverlevel = this.player.serverLevel();
         InteractionHand interactionhand = p_9930_.getHand();
         ItemStack itemstack = this.player.getItemInHand(interactionhand);
@@ -1225,8 +_,9 @@
                     }
 
                     CompletableFuture<FilteredText> completablefuture = this.filterTextPacket(playerchatmessage.signedContent());
-                    Component component = this.server.getChatDecorator().decorate(this.player, playerchatmessage.decoratedContent());
+                    Component component = net.neoforged.neoforge.common.CommonHooks.getServerChatSubmittedDecorator().decorate(this.player, playerchatmessage.decoratedContent());
                     this.chatMessageChain.append(completablefuture, p_300785_ -> {
+                        if (component == null) return; // Forge: ServerChatEvent was canceled if this is null.
                         PlayerChatMessage playerchatmessage1 = playerchatmessage.withUnsignedContent(component).filter(p_300785_.mask());
                         this.broadcastChatMessage(playerchatmessage1);
                     });
@@ -1503,7 +_,11 @@
     
                         @Override
                         public void onInteraction(InteractionHand p_143682_, Vec3 p_143683_) {
-                            this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> p_143687_.interactAt(p_143686_, p_143683_, p_143688_));
+                            this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> {
+                                InteractionResult onInteractEntityAtResult = net.neoforged.neoforge.common.CommonHooks.onInteractEntityAt(player, entity, p_143683_, p_143682_);
+                                if (onInteractEntityAtResult != null) return onInteractEntityAtResult;
+                                return p_143687_.interactAt(p_143686_, p_143683_, p_143688_);
+                            });
                         }
     
                         @Override
@@ -1749,7 +_,7 @@
             this.connection
                 .setupInboundProtocol(
                     ConfigurationProtocols.SERVERBOUND,
-                    new ServerConfigurationPacketListenerImpl(this.server, this.connection, this.createCookie(this.player.clientInformation()))
+                    new ServerConfigurationPacketListenerImpl(this.server, this.connection, this.createCookie(this.player.clientInformation(), this.connectionType))
                 );
         }
     }
@@ -1783,7 +_,27 @@
     }
 
     @Override
-    public void handleCustomPayload(ServerboundCustomPayloadPacket p_333887_) {
+    public void handleCustomPayload(ServerboundCustomPayloadPacket p_294276_) {
+        if (p_294276_.payload() instanceof net.neoforged.neoforge.network.payload.MinecraftRegisterPayload minecraftRegisterPayload) {
+            this.connectionType = this.connectionType.withMinecraftRegisterPayload();
+            net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onMinecraftRegister(this, minecraftRegisterPayload.newChannels());
+            return;
+        }
+
+        if (p_294276_.payload() instanceof net.neoforged.neoforge.network.payload.MinecraftUnregisterPayload minecraftUnregisterPayload) {
+            this.connectionType = this.connectionType.withMinecraftRegisterPayload();
+            net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onMinecraftUnregister(this, minecraftUnregisterPayload.forgottenChannels());
+            return;
+        }
+
+        if (this.connectionType.isVanilla()) {
+            super.handleCustomPayload(p_294276_);
+            return;
+        }
+
+        net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onModdedPacketAtServer(
+                this, p_294276_
+        );
     }
 
     @Override
@@ -1794,5 +_,9 @@
     @FunctionalInterface
     interface EntityInteraction {
         InteractionResult run(ServerPlayer p_143695_, Entity p_143696_, InteractionHand p_143697_);
+    }
+
+    public net.neoforged.neoforge.network.connection.ConnectionType getConnectionType() {
+        return connectionType;
     }
 }
