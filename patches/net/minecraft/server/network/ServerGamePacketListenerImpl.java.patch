--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -439,9 +_,11 @@
                 }
 
                 entity.absMoveTo(d3, d4, d5, f, f1);
+                resyncPlayerWithVehicle(entity); // Neo - Resync player position on vehicle moving
                 boolean flag3 = serverlevel.noCollision(entity, entity.getBoundingBox().deflate(0.0625));
                 if (flag && (flag2 || !flag3)) {
                     entity.absMoveTo(d0, d1, d2, f, f1);
+                    resyncPlayerWithVehicle(entity); // Neo - Resync player position on vehicle moving
                     this.send(new ClientboundMoveVehiclePacket(entity));
                     return;
                 }
@@ -462,6 +_,23 @@
         }
     }
 
+    private void resyncPlayerWithVehicle(Entity vehicle) {
+        Vec3 oldPos = this.player.position();
+        float yRot = this.player.getYRot();
+        float xRot = this.player.getXRot();
+        float yHeadRot = this.player.getYHeadRot();
+
+        vehicle.positionRider(this.player);
+
+        // preserve old rotation and store old position in xo/yo/zo
+        this.player.setYRot(yRot);
+        this.player.setXRot(xRot);
+        this.player.setYHeadRot(yHeadRot);
+        this.player.xo = oldPos.x;
+        this.player.yo = oldPos.y;
+        this.player.zo = oldPos.z;
+    }
+
     private boolean noBlocksAround(Entity entity) {
         return entity.level()
             .getBlockStates(entity.getBoundingBox().inflate(0.0625).expandTowards(0.0, -0.55, 0.0))
@@ -927,7 +_,7 @@
                                     && !flag1
                                     && this.player.gameMode.getGameModeForPlayer() != GameType.SPECTATOR
                                     && !this.server.isFlightAllowed()
-                                    && !this.player.getAbilities().mayfly
+                                    && !this.player.mayFly()
                                     && !this.player.hasEffect(MobEffects.LEVITATION)
                                     && !flag
                                     && !flag3
@@ -1031,8 +_,10 @@
             case SWAP_ITEM_WITH_OFFHAND:
                 if (!this.player.isSpectator()) {
                     ItemStack itemstack = this.player.getItemInHand(InteractionHand.OFF_HAND);
-                    this.player.setItemInHand(InteractionHand.OFF_HAND, this.player.getItemInHand(InteractionHand.MAIN_HAND));
-                    this.player.setItemInHand(InteractionHand.MAIN_HAND, itemstack);
+                    var event = net.neoforged.neoforge.common.CommonHooks.onLivingSwapHandItems(this.player);
+                    if (event.isCanceled()) return;
+                    this.player.setItemInHand(InteractionHand.OFF_HAND, event.getItemSwappedToOffHand());
+                    this.player.setItemInHand(InteractionHand.MAIN_HAND, event.getItemSwappedToMainHand());
                     this.player.stopUsingItem();
                 }
 
@@ -1060,7 +_,7 @@
                     .handleBlockBreakAction(
                         blockpos, serverboundplayeractionpacket$action, packet.getDirection(), this.player.level().getMaxBuildHeight(), packet.getSequence()
                     );
-                this.player.connection.ackBlockChangesUpTo(packet.getSequence());
+                this.player.connection.ackBlockChangesUpTo =packet.getSequence();
                 return;
             default:
                 throw new IllegalArgumentException("Invalid player action");
@@ -1079,7 +_,7 @@
     @Override
     public void handleUseItemOn(ServerboundUseItemOnPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
-        this.player.connection.ackBlockChangesUpTo(packet.getSequence());
+        this.player.connection.ackBlockChangesUpTo = packet.getSequence();
         ServerLevel serverlevel = this.player.serverLevel();
         InteractionHand interactionhand = packet.getHand();
         ItemStack itemstack = this.player.getItemInHand(interactionhand);
@@ -1231,8 +_,9 @@
                 }
 
                 CompletableFuture<FilteredText> completablefuture = this.filterTextPacket(playerchatmessage.signedContent());
-                Component component = this.server.getChatDecorator().decorate(this.player, playerchatmessage.decoratedContent());
+                Component component = net.neoforged.neoforge.common.CommonHooks.getServerChatSubmittedDecorator().decorate(this.player, playerchatmessage.decoratedContent());
                 this.chatMessageChain.append(completablefuture, p_300785_ -> {
+                    if (component == null) return; // Forge: ServerChatEvent was canceled if this is null.
                     PlayerChatMessage playerchatmessage1 = playerchatmessage.withUnsignedContent(component).filter(p_300785_.mask());
                     this.broadcastChatMessage(playerchatmessage1);
                 });
@@ -1561,7 +_,11 @@
 
                         @Override
                         public void onInteraction(InteractionHand p_143682_, Vec3 p_143683_) {
-                            this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> p_143687_.interactAt(p_143686_, p_143683_, p_143688_));
+                            this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> {
+                                InteractionResult onInteractEntityAtResult = net.neoforged.neoforge.common.CommonHooks.onInteractEntityAt(player, entity, p_143683_, p_143682_);
+                                if (onInteractEntityAtResult != null) return onInteractEntityAtResult;
+                                return p_143687_.interactAt(p_143686_, p_143683_, p_143688_);
+                            });
                         }
 
                         @Override
@@ -1753,7 +_,7 @@
     @Override
     public void handlePlayerAbilities(ServerboundPlayerAbilitiesPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
-        this.player.getAbilities().flying = packet.isFlying() && this.player.getAbilities().mayfly;
+        this.player.getAbilities().flying = packet.isFlying() && this.player.mayFly();
     }
 
     @Override
@@ -1812,7 +_,7 @@
             this.connection
                 .setupInboundProtocol(
                     ConfigurationProtocols.SERVERBOUND,
-                    new ServerConfigurationPacketListenerImpl(this.server, this.connection, this.createCookie(this.player.clientInformation()))
+                    new ServerConfigurationPacketListenerImpl(this.server, this.connection, this.createCookie(this.player.clientInformation(), this.connectionType))
                 );
         }
     }
@@ -1847,6 +_,7 @@
 
     @Override
     public void handleCustomPayload(ServerboundCustomPayloadPacket packet) {
+        super.handleCustomPayload(packet); // Neo: Call super to invoke modded payload handling.
     }
 
     @Override
