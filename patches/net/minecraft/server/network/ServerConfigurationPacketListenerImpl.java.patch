--- a/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -72,6 +_,15 @@
     }
 
     public void startConfiguration() {
+        // Neo: Before starting vanilla configuration, reset ad-hoc channels and run modded channel negotiation.
+        this.send(new net.neoforged.neoforge.network.payload.MinecraftUnregisterPayload(net.neoforged.neoforge.network.registration.NetworkRegistry.getInitialServerUnregisterChannels()));
+        this.send(new net.neoforged.neoforge.network.payload.MinecraftRegisterPayload(net.neoforged.neoforge.network.registration.NetworkRegistry.getInitialListeningChannels(this.flow())));
+        this.send(new net.neoforged.neoforge.network.payload.ModdedNetworkQueryPayload(java.util.Map.of()));
+        this.send(new net.minecraft.network.protocol.common.ClientboundPingPacket(0));
+    }
+
+    // Neo: Hide vanilla's startConfiguration() in this method so we can call it in handlePong below.
+    private void runConfiguration() {
         this.send(new ClientboundCustomPayloadPacket(new BrandPayload(this.server.getServerModName())));
         ServerLinks serverlinks = this.server.serverLinks();
         if (!serverlinks.isEmpty()) {
@@ -81,6 +_,8 @@
         LayeredRegistryAccess<RegistryLayer> layeredregistryaccess = this.server.registries();
         List<KnownPack> list = this.server.getResourceManager().listPacks().flatMap(p_325637_ -> p_325637_.location().knownPackInfo().stream()).toList();
         this.send(new ClientboundUpdateEnabledFeaturesPacket(FeatureFlags.REGISTRY.toNames(this.server.getWorldData().enabledFeatures())));
+        // Neo: we must sync the registries before vanilla sends tags in SynchronizeRegistriesTask!
+        net.neoforged.neoforge.network.ConfigurationInitialization.configureEarlyTasks(this, this.configurationTasks::add);
         this.synchronizeRegistriesTask = new SynchronizeRegistriesTask(list, layeredregistryaccess);
         this.configurationTasks.add(this.synchronizeRegistriesTask);
         this.addOptionalTasks();
@@ -95,6 +_,33 @@
 
     private void addOptionalTasks() {
         this.server.getServerResourcePack().ifPresent(p_296496_ -> this.configurationTasks.add(new ServerResourcePackConfigurationTask(p_296496_)));
+        // Neo: Gather modded configuration tasks and schedule them for execution
+        this.configurationTasks.addAll(net.neoforged.fml.ModLoader.postEventWithReturn(new net.neoforged.neoforge.network.event.RegisterConfigurationTasksEvent(this)).getConfigurationTasks());
+    }
+
+    @Override
+    public void handleCustomPayload(net.minecraft.network.protocol.common.ServerboundCustomPayloadPacket packet) {
+        // Neo: Perform modded network initialization when the client sends their channel list.
+        if (packet.payload() instanceof net.neoforged.neoforge.network.payload.ModdedNetworkQueryPayload moddedEnvironmentPayload) {
+            this.connectionType = net.neoforged.neoforge.network.connection.ConnectionType.NEOFORGE;
+            net.neoforged.neoforge.network.registration.NetworkRegistry.initializeNeoForgeConnection(this, moddedEnvironmentPayload.queries());
+            return;
+        }
+
+        super.handleCustomPayload(packet); // Neo: Call super to invoke modded payload handling.
+    }
+
+    @Override
+    public void handlePong(net.minecraft.network.protocol.common.ServerboundPongPacket packet) {
+        super.handlePong(packet);
+        // During startConfiguration() we send a ping with id 0, if we get a pong back, we initiate the connection.
+        if (packet.getId() == 0) {
+            if (!this.connectionType.isNeoForge() && !net.neoforged.neoforge.network.registration.NetworkRegistry.initializeOtherConnection(this)) {
+                return;
+            }
+
+            this.runConfiguration();
+        }
     }
 
     @Override
@@ -125,7 +_,13 @@
     public void handleConfigurationFinished(ServerboundFinishConfigurationPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.server);
         this.finishCurrentTask(JoinWorldTask.TYPE);
-        this.connection.setupOutboundProtocol(GameProtocols.CLIENTBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess())));
+        this.connection.setupOutboundProtocol(GameProtocols.CLIENTBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess(), this.connectionType)));
+        // Packets can only be sent after the outbound protocol is set up again
+        if (this.connectionType == net.neoforged.neoforge.network.connection.ConnectionType.OTHER) {
+            //We need to also initialize this here, as the client may have sent the packet before we have finished our configuration.
+            net.neoforged.neoforge.network.registration.NetworkRegistry.initializeNeoForgeConnection(this, java.util.Map.of());
+        }
+        net.neoforged.neoforge.network.registration.NetworkRegistry.onConfigurationFinished(this);
 
         try {
             PlayerList playerlist = this.server.getPlayerList();
@@ -141,7 +_,7 @@
             }
 
             ServerPlayer serverplayer = playerlist.getPlayerForLogin(this.gameProfile, this.clientInformation);
-            playerlist.placeNewPlayer(this.connection, serverplayer, this.createCookie(this.clientInformation));
+            playerlist.placeNewPlayer(this.connection, serverplayer, this.createCookie(this.clientInformation, this.connectionType));
         } catch (Exception exception) {
             LOGGER.error("Couldn't place player in world", (Throwable)exception);
             this.connection.send(new ClientboundDisconnectPacket(DISCONNECT_REASON_INVALID_DATA));
