--- a/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -41,6 +_,8 @@
     @Nullable
     private ConfigurationTask currentTask;
     private ClientInformation clientInformation;
+    private net.neoforged.neoforge.network.connection.ConnectionType connectionType = net.neoforged.neoforge.network.connection.ConnectionType.VANILLA;
+    private boolean isHandlingModdedConfigurationPhase = false;
 
     public ServerConfigurationPacketListenerImpl(MinecraftServer p_294645_, Connection p_295787_, CommonListenerCookie p_302003_) {
         super(p_294645_, p_295787_, p_302003_);
@@ -65,6 +_,14 @@
     }
 
     public void startConfiguration() {
+        //Unregister all known play channels, and register all known configuration channels, then run negotiation.
+        this.send(new net.neoforged.neoforge.network.payload.MinecraftUnregisterPayload(net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().getInitialServerUnregisterChannels()));
+        this.send(new net.neoforged.neoforge.network.payload.MinecraftRegisterPayload(net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().getInitialServerListeningChannels()));
+        this.send(new net.neoforged.neoforge.network.payload.ModdedNetworkQueryPayload());
+        this.send(new net.minecraft.network.protocol.common.ClientboundPingPacket(0));
+    }
+
+    private void runConfiguration() {
         this.send(new ClientboundCustomPayloadPacket(new BrandPayload(this.server.getServerModName())));
         LayeredRegistryAccess<RegistryLayer> layeredregistryaccess = this.server.registries();
         this.send(new ClientboundUpdateEnabledFeaturesPacket(FeatureFlags.REGISTRY.toNames(this.server.getWorldData().enabledFeatures())));
@@ -86,6 +_,53 @@
 
     private void addOptionalTasks() {
         this.server.getServerResourcePack().ifPresent(p_296496_ -> this.configurationTasks.add(new ServerResourcePackConfigurationTask(p_296496_)));
+
+        this.configurationTasks.add(new net.neoforged.neoforge.network.configuration.ModdedConfigurationPhaseStarted(this));
+        this.configurationTasks.addAll(net.neoforged.fml.ModLoader.get().postEventWithReturn(new net.neoforged.neoforge.network.event.OnGameConfigurationEvent(this)).getConfigurationTasks());
+        this.configurationTasks.add(new net.neoforged.neoforge.network.configuration.ModdedConfigurationPhaseCompleted(this));
+    }
+
+    @Override
+    public void handleCustomPayload(net.minecraft.network.protocol.common.ServerboundCustomPayloadPacket p_294276_) {
+        if (p_294276_.payload() instanceof net.neoforged.neoforge.network.payload.MinecraftRegisterPayload minecraftRegisterPayload) {
+            this.connectionType = this.connectionType.withMinecraftRegisterPayload();
+            net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onMinecraftRegister(this, minecraftRegisterPayload.newChannels());
+            return;
+        }
+        if (p_294276_.payload() instanceof net.neoforged.neoforge.network.payload.MinecraftUnregisterPayload minecraftUnregisterPayload) {
+            this.connectionType = this.connectionType.withMinecraftRegisterPayload();
+            net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onMinecraftUnregister(this, minecraftUnregisterPayload.forgottenChannels());
+            return;
+        }
+        if (p_294276_.payload() instanceof net.neoforged.neoforge.network.payload.ModdedNetworkQueryPayload moddedEnvironmentPayload) {
+            this.connectionType = this.connectionType.withNeoForgeQueryPayload();
+            net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance()
+                    .onModdedConnectionDetectedAtServer(
+                            this,
+                            moddedEnvironmentPayload.configuration(),
+                            moddedEnvironmentPayload.play()
+                    );
+            return;
+        }
+
+        if (!isHandlingModdedConfigurationPhase) {
+            super.handleCustomPayload(p_294276_);
+            return;
+        }
+
+        net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onModdedPacketAtServer(this, p_294276_);
+    }
+
+    @Override
+    public void handlePong(net.minecraft.network.protocol.common.ServerboundPongPacket p_295142_) {
+        super.handlePong(p_295142_);
+        if (p_295142_.getId() == 0) {
+            if (!this.connectionType.isNeoForge() && !net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onVanillaOrOtherConnectionDetectedAtServer(this)) {
+                return;
+            }
+
+            this.runConfiguration();
+        }
     }
 
     @Override
@@ -103,6 +_,11 @@
 
     @Override
     public void handleConfigurationFinished(ServerboundFinishConfigurationPacket p_294283_) {
+        if (this.connectionType == net.neoforged.neoforge.network.connection.ConnectionType.OTHER) {
+            //We need to also initialize this here, as the client may have sent the packet before we have finished our configuration.
+            net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onModdedConnectionDetectedAtServer(this, java.util.Set.of(), java.util.Set.of());
+        }
+        net.neoforged.neoforge.network.registration.NetworkRegistry.getInstance().onConfigurationFinished(this);
         this.connection.suspendInboundAfterProtocolChange();
         PacketUtils.ensureRunningOnSameThread(p_294283_, this, this.server);
         this.finishCurrentTask(JoinWorldTask.TYPE);
@@ -121,7 +_,7 @@
             }
 
             ServerPlayer serverplayer = playerlist.getPlayerForLogin(this.gameProfile, this.clientInformation);
-            playerlist.placeNewPlayer(this.connection, serverplayer, this.createCookie(this.clientInformation));
+            playerlist.placeNewPlayer(this.connection, serverplayer, this.createCookie(this.clientInformation, this.connectionType));
             this.connection.resumeInboundAfterProtocolChange();
         } catch (Exception exception) {
             LOGGER.error("Couldn't place player in world", (Throwable)exception);
@@ -155,5 +_,19 @@
             this.currentTask = null;
             this.startNextTask();
         }
+    }
+
+    public void onModdedConfigurationPhaseStarted() {
+        isHandlingModdedConfigurationPhase = true;
+        finishCurrentTask(net.neoforged.neoforge.network.configuration.ModdedConfigurationPhaseStarted.TYPE);
+    }
+
+    public void onModdedConfigurationPhaseEnded() {
+        isHandlingModdedConfigurationPhase = false;
+        finishCurrentTask(net.neoforged.neoforge.network.configuration.ModdedConfigurationPhaseCompleted.TYPE);
+    }
+
+    public net.neoforged.neoforge.network.connection.ConnectionType getConnectionType() {
+        return connectionType;
     }
 }
