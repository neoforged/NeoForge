--- a/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
+++ b/net/minecraft/server/packs/resources/SimpleJsonResourceReloadListener.java
@@ -41,13 +_,15 @@
 
     protected Map<ResourceLocation, T> prepare(ResourceManager p_10771_, ProfilerFiller p_10772_) {
         Map<ResourceLocation, T> map = new HashMap<>();
-        scanDirectory(p_10771_, this.directory, this.ops, this.codec, map);
+        // Neo: add condition context
+        scanDirectory(p_10771_, this.directory, this.makeConditionalOps(), this.codec, map);
         return map;
     }
 
     public static <T> void scanDirectory(
         ResourceManager p_279308_, String p_279131_, DynamicOps<JsonElement> p_371830_, Codec<T> p_371493_, Map<ResourceLocation, T> p_279404_
     ) {
+        var conditionalCodec = net.neoforged.neoforge.common.conditions.ConditionalOps.createConditionalCodec(p_371493_);
         FileToIdConverter filetoidconverter = FileToIdConverter.json(p_279131_);
 
         for (Entry<ResourceLocation, Resource> entry : filetoidconverter.listMatchingResources(p_279308_).entrySet()) {
@@ -55,8 +_,10 @@
             ResourceLocation resourcelocation1 = filetoidconverter.fileToId(resourcelocation);
 
             try (Reader reader = entry.getValue().openAsReader()) {
-                p_371493_.parse(p_371830_, JsonParser.parseReader(reader)).ifSuccess(p_371454_ -> {
-                    if (p_279404_.putIfAbsent(resourcelocation1, (T)p_371454_) != null) {
+                conditionalCodec.parse(p_371830_, JsonParser.parseReader(reader)).ifSuccess(p_371454_ -> {
+                    if (p_371454_.isEmpty()) {
+                        LOGGER.debug("Skipping loading data file '{}' from '{}' as its conditions were not met", resourcelocation1, resourcelocation);
+                    } else if (p_279404_.putIfAbsent(resourcelocation1, p_371454_.get()) != null) {
                         throw new IllegalStateException("Duplicate data file ignored with ID " + resourcelocation1);
                     }
                 }).ifError(p_371566_ -> LOGGER.error("Couldn't parse data file '{}' from '{}': {}", resourcelocation1, resourcelocation, p_371566_));
@@ -64,5 +_,9 @@
                 LOGGER.error("Couldn't parse data file '{}' from '{}'", resourcelocation1, resourcelocation, jsonparseexception);
             }
         }
+    }
+
+    protected ResourceLocation getPreparedPath(ResourceLocation rl) {
+        return rl.withPath(this.directory + "/" + rl.getPath() + ".json");
     }
 }
