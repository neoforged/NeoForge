--- a/net/minecraft/server/packs/repository/PackRepository.java
+++ b/net/minecraft/server/packs/repository/PackRepository.java
@@ -23,7 +_,7 @@
     private List<Pack> selected = ImmutableList.of();
 
     public PackRepository(RepositorySource... p_251886_) {
-        this.sources = ImmutableSet.copyOf(p_251886_);
+        this.sources = new java.util.LinkedHashSet<>(List.of(p_251886_)); //Neo: This needs to be a mutable set, so that we can add to it later on.
     }
 
     public void reload() {
@@ -33,10 +_,13 @@
     }
 
     private Map<String, Pack> discoverAvailable() {
-        Map<String, Pack> map = Maps.newTreeMap();
+        // Neo: sort packs within a source by name, between sources according to source order
+        Map<String, Pack> map = Maps.newLinkedHashMap();
 
         for(RepositorySource repositorysource : this.sources) {
-            repositorysource.loadPacks(p_143903_ -> map.put(p_143903_.getId(), p_143903_));
+            Map<String, Pack> sourceMap = Maps.newTreeMap();
+            repositorysource.loadPacks(p_143903_ -> sourceMap.put(p_143903_.getId(), p_143903_));
+            map.putAll(sourceMap);
         }
 
         return ImmutableMap.copyOf(map);
@@ -71,11 +_,12 @@
     }
 
     private List<Pack> rebuildSelected(Collection<String> p_10518_) {
-        List<Pack> list = this.getAvailablePacks(p_10518_).collect(Collectors.toList());
+        List<Pack> list = this.getAvailablePacks(p_10518_).flatMap(p -> Stream.concat(Stream.of(p), p.getChildren().stream())).collect(Collectors.toList());
 
         for(Pack pack : this.available.values()) {
             if (pack.isRequired() && !list.contains(pack)) {
-                pack.getDefaultPosition().insert(list, pack, Functions.identity(), false);
+                int i = pack.getDefaultPosition().insert(list, pack, Functions.identity(), false);
+                list.addAll(i + 1, pack.getChildren());
             }
         }
 
@@ -95,7 +_,7 @@
     }
 
     public Collection<String> getSelectedIds() {
-        return this.selected.stream().map(Pack::getId).collect(ImmutableSet.toImmutableSet());
+        return this.selected.stream().filter(p -> !p.isHidden()).map(Pack::getId).collect(ImmutableSet.toImmutableSet());
     }
 
     public FeatureFlagSet getRequestedFeatureFlags() {
@@ -109,6 +_,10 @@
     @Nullable
     public Pack getPack(String p_10508_) {
         return this.available.get(p_10508_);
+    }
+
+    public synchronized void addPackFinder(RepositorySource packFinder) {
+        this.sources.add(packFinder);
     }
 
     public boolean isAvailable(String p_10516_) {
