--- a/net/minecraft/server/packs/repository/PackRepository.java
+++ b/net/minecraft/server/packs/repository/PackRepository.java
@@ -23,7 +_,7 @@
     private List<Pack> selected = ImmutableList.of();
 
     public PackRepository(RepositorySource... sources) {
-        this.sources = ImmutableSet.copyOf(sources);
+        this.sources = new java.util.LinkedHashSet<>(List.of(sources)); //Neo: This needs to be a mutable set, so that we can add to it later on.
     }
 
     public static String displayPackList(Collection<Pack> packs) {
@@ -39,10 +_,13 @@
     }
 
     private Map<String, Pack> discoverAvailable() {
-        Map<String, Pack> map = Maps.newTreeMap();
+        // Neo: sort packs within a source by name, between sources according to source order
+        Map<String, Pack> map = Maps.newLinkedHashMap();
 
         for (RepositorySource repositorysource : this.sources) {
-            repositorysource.loadPacks(p_143903_ -> map.put(p_143903_.getId(), p_143903_));
+            Map<String, Pack> sourceMap = Maps.newTreeMap();
+            repositorysource.loadPacks(p_143903_ -> p_143903_.streamSelfAndChildren().forEach(p -> sourceMap.put(p.getId(), p)));
+            map.putAll(sourceMap);
         }
 
         return ImmutableMap.copyOf(map);
@@ -77,11 +_,12 @@
     }
 
     public List<Pack> rebuildSelected(Collection<String> ids) {
-        List<Pack> list = this.getAvailablePacks(ids).collect(Util.toMutableList());
+        List<Pack> list = net.neoforged.neoforge.resource.ResourcePackLoader.expandAndRemoveRootChildren(this.getAvailablePacks(ids), this.available.values());
 
         for (Pack pack : this.available.values()) {
             if (pack.isRequired() && !list.contains(pack)) {
-                pack.getDefaultPosition().insert(list, pack, Pack::selectionConfig, false);
+                int i = pack.getDefaultPosition().insert(list, pack, Pack::selectionConfig, false);
+                list.addAll(i + 1, pack.getChildren());
             }
         }
 
@@ -93,7 +_,7 @@
     }
 
     public Collection<String> getAvailableIds() {
-        return this.available.keySet();
+        return this.available.values().stream().filter(p -> !p.isHidden()).map(Pack::getId).collect(ImmutableSet.toImmutableSet());
     }
 
     public Collection<Pack> getAvailablePacks() {
@@ -101,7 +_,7 @@
     }
 
     public Collection<String> getSelectedIds() {
-        return this.selected.stream().map(Pack::getId).collect(ImmutableSet.toImmutableSet());
+        return this.selected.stream().filter(p -> !p.isHidden()).map(Pack::getId).collect(ImmutableSet.toImmutableSet());
     }
 
     public FeatureFlagSet getRequestedFeatureFlags() {
@@ -115,6 +_,10 @@
     @Nullable
     public Pack getPack(String id) {
         return this.available.get(id);
+    }
+
+    public synchronized void addPackFinder(RepositorySource packFinder) {
+        this.sources.add(packFinder);
     }
 
     public boolean isAvailable(String id) {
