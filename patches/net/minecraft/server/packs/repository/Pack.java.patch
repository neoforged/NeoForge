--- a/net/minecraft/server/packs/repository/Pack.java
+++ b/net/minecraft/server/packs/repository/Pack.java
@@ -23,6 +_,16 @@
     private final Pack.ResourcesSupplier resources;
     private final Pack.Metadata metadata;
     private final PackSelectionConfig selectionConfig;
+    private final boolean hidden; // Neo: Allow packs to be hidden from the UI entirely
+    private final List<Pack> children; // Neo: Allows packs to specify packs which will always be placed beneath them; must be hidden
+    private static final PackSource CHILD_SOURCE = PackSource.create(
+            name -> Component.translatable(
+                    "pack.nameAndSource",
+                    name,
+                    Component.translatable("pack.neoforge.source.child")
+            ).withStyle(net.minecraft.ChatFormatting.GRAY),
+            false
+    ); // Neo: Pack source for child packs; should not be otherwise used
 
     @Nullable
     public static Pack readMetaAndCreate(PackLocationInfo location, Pack.ResourcesSupplier resources, PackType packType, PackSelectionConfig selectionConfig) {
@@ -32,6 +_,34 @@
     }
 
     public Pack(PackLocationInfo location, Pack.ResourcesSupplier resources, Pack.Metadata metadata, PackSelectionConfig selectionConfig) {
+        this(location, resources, metadata, selectionConfig, List.of());
+    }
+
+    private Pack(PackLocationInfo location, Pack.ResourcesSupplier resources, Pack.Metadata metadata, PackSelectionConfig selectionConfig, List<Pack> children) {
+        List<Pack> flattenedChildren = new java.util.ArrayList<>();
+        List<Pack> remainingChildren = children;
+        // recursively flatten children
+        while (!remainingChildren.isEmpty()) {
+            List<Pack> oldChildren = remainingChildren;
+            remainingChildren = new java.util.ArrayList<>();
+            for (Pack child : oldChildren) {
+                // Adapts the child pack with the following changes:
+                // - Must be hidden
+                // - Must have no children
+                // - Has a pack source of CHILD_SOURCE, which is not automatically added
+                Pack adaptedChild = new Pack(
+                        new PackLocationInfo(child.location.id(), child.location.title(), CHILD_SOURCE, child.location.knownPackInfo()),
+                        child.resources,
+                        new Metadata(child.metadata.description, child.metadata.compatibility, child.metadata.requestedFeatures, child.metadata.overlays, true),
+                        new PackSelectionConfig(false, child.selectionConfig.defaultPosition(), child.selectionConfig.fixedPosition()),
+                        List.of()
+                );
+                flattenedChildren.add(adaptedChild);
+                remainingChildren.addAll(child.getChildren());
+            }
+        }
+        this.children = List.copyOf(flattenedChildren);
+        this.hidden = metadata.isHidden();
         this.location = location;
         this.resources = resources;
         this.metadata = metadata;
@@ -55,7 +_,7 @@
                 PackCompatibility packcompatibility = PackCompatibility.forVersion(inclusiverange, version);
                 OverlayMetadataSection overlaymetadatasection = packresources.getMetadataSection(OverlayMetadataSection.TYPE);
                 List<String> list = overlaymetadatasection != null ? overlaymetadatasection.overlaysForVersion(version) : List.of();
-                pack$metadata = new Pack.Metadata(packmetadatasection.description(), packcompatibility, featureflagset, list);
+                pack$metadata = new Pack.Metadata(packmetadatasection.description(), packcompatibility, featureflagset, list, packresources.isHidden());
             }
 
             return pack$metadata;
@@ -132,6 +_,38 @@
         return this.location.source();
     }
 
+    public boolean isHidden() {
+        return hidden;
+    }
+
+    public List<Pack> getChildren() {
+        return children;
+    }
+
+    public java.util.stream.Stream<Pack> streamSelfAndChildren() {
+        return java.util.stream.Stream.concat(java.util.stream.Stream.of(this), children.stream());
+    }
+
+    /**
+     * {@return a copy of the pack with the provided children in place of any children this pack currently has}
+     */
+    public Pack withChildren(List<Pack> children) {
+        return new Pack(this.location, this.resources, this.metadata, this.selectionConfig, children);
+    }
+
+    /**
+     * {@return a copy of the pack that is hidden}
+     */
+    public Pack hidden() {
+        return new Pack(
+                new PackLocationInfo(this.location.id(), this.location.title(), this.location.source(), this.location.knownPackInfo()),
+                this.resources,
+                new Metadata(this.metadata.description, this.metadata.compatibility, this.metadata.requestedFeatures, this.metadata.overlays, true),
+                new PackSelectionConfig(this.selectionConfig.required(), this.selectionConfig.defaultPosition(), this.selectionConfig.fixedPosition()),
+                this.children
+        );
+    }
+
     @Override
     public boolean equals(Object other) {
         if (this == other) {
@@ -146,7 +_,12 @@
         return this.location.hashCode();
     }
 
-    public static record Metadata(Component description, PackCompatibility compatibility, FeatureFlagSet requestedFeatures, List<String> overlays) {
+    public static record Metadata(Component description, PackCompatibility compatibility, FeatureFlagSet requestedFeatures, List<String> overlays, boolean isHidden) {
+        /** @deprecated Neo: use {@link #Metadata(Component,PackCompatibility,FeatureFlagSet,List,boolean)} instead */
+        @Deprecated
+        public Metadata(Component description, PackCompatibility compatibility, FeatureFlagSet requestedFeatures, List<String> overlays) {
+            this(description, compatibility, requestedFeatures, overlays, false);
+        }
     }
 
     public static enum Position {
