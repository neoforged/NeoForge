--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -261,10 +_,11 @@
     private final PotionBrewing potionBrewing;
     private volatile boolean isSaving;
     private static final AtomicReference<RuntimeException> fatalException = new AtomicReference<>();
+    private final net.neoforged.neoforge.flag.FlagManager moddedFlagManager;
 
     public static <S extends MinecraftServer> S spin(Function<Thread, S> p_129873_) {
         AtomicReference<S> atomicreference = new AtomicReference<>();
-        Thread thread = new Thread(() -> atomicreference.get().runServer(), "Server thread");
+        Thread thread = new Thread(net.neoforged.fml.util.thread.SidedThreadGroups.SERVER, () -> atomicreference.get().runServer(), "Server thread");
         thread.setUncaughtExceptionHandler((p_177909_, p_177910_) -> LOGGER.error("Uncaught exception in server thread", p_177910_));
         if (Runtime.getRuntime().availableProcessors() > 4) {
             thread.setPriority(8);
@@ -316,6 +_,7 @@
             this.serverThread = p_236723_;
             this.executor = Util.backgroundExecutor();
             this.potionBrewing = PotionBrewing.bootstrap(this.worldData.enabledFeatures());
+            this.moddedFlagManager = new net.neoforged.neoforge.flag.ServerFlagManager(this, this.worldData.getDataConfiguration().enabledModdedFeatures());
         }
     }
 
@@ -372,6 +_,7 @@
         this.readScoreboard(dimensiondatastorage);
         this.commandStorage = new CommandStorage(dimensiondatastorage);
         WorldBorder worldborder = serverlevel.getWorldBorder();
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Load(levels.get(Level.OVERWORLD)));
         if (!serverleveldata.isInitialized()) {
             try {
                 setInitialSpawn(serverlevel, serverleveldata, worldoptions.generateBonusChest(), flag);
@@ -421,6 +_,7 @@
                 );
                 worldborder.addListener(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.getWorldBorder()));
                 this.levels.put(resourcekey1, serverlevel1);
+                net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Load(levels.get(resourcekey)));
             }
         }
 
@@ -432,6 +_,7 @@
             p_177898_.setSpawn(BlockPos.ZERO.above(80), 0.0F);
         } else {
             ServerChunkCache serverchunkcache = p_177897_.getChunkSource();
+            if (net.neoforged.neoforge.event.EventHooks.onCreateWorldSpawn(p_177897_, p_177898_)) return;
             ChunkPos chunkpos = new ChunkPos(serverchunkcache.randomState().sampler().findSpawnPosition());
             int i = serverchunkcache.getGenerator().getSpawnHeight(p_177897_);
             if (i < p_177897_.getMinBuildHeight()) {
@@ -513,6 +_,7 @@
                     ChunkPos chunkpos = new ChunkPos(k);
                     serverlevel1.getChunkSource().updateChunkForced(chunkpos, true);
                 }
+                net.neoforged.neoforge.common.world.chunk.ForcedChunkManager.reinstatePersistentChunks(serverlevel1, forcedchunkssaveddata);
             }
         }
 
@@ -620,6 +_,7 @@
         for (ServerLevel serverlevel2 : this.getAllLevels()) {
             if (serverlevel2 != null) {
                 try {
+                    net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Unload(serverlevel2));
                     serverlevel2.close();
                 } catch (IOException ioexception1) {
                     LOGGER.error("Exception closing the level", (Throwable)ioexception1);
@@ -666,9 +_,11 @@
                 throw new IllegalStateException("Failed to initialize server");
             }
 
+            net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStarted(this);
             this.nextTickTimeNanos = Util.getNanos();
             this.statusIcon = this.loadStatusIcon().orElse(null);
             this.status = this.buildServerStatus();
+            resetStatusCache(status);
 
             while (this.running) {
                 long i;
@@ -714,6 +_,8 @@
                 this.isReady = true;
                 JvmProfiler.INSTANCE.onServerTick(this.smoothedTickTimeMillis);
             }
+            net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.neoforged.neoforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
         } catch (Throwable throwable1) {
             LOGGER.error("Encountered an unexpected exception", throwable1);
             CrashReport crashreport = constructOrExtractCrashReport(throwable1);
@@ -725,6 +_,7 @@
                 LOGGER.error("We were unable to save this crash report to disk.");
             }
 
+            net.neoforged.neoforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
             this.onServerCrash(crashreport);
         } finally {
             try {
@@ -737,6 +_,7 @@
                     this.services.profileCache().clearExecutor();
                 }
 
+                net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStopped(this);
                 this.onServerExit();
             }
         }
@@ -901,11 +_,13 @@
     public void tickServer(BooleanSupplier p_129871_) {
         long i = Util.getNanos();
         this.tickCount++;
+        net.neoforged.neoforge.event.EventHooks.fireServerTickPre(p_129871_, this);
         this.tickRateManager.tick();
         this.tickChildren(p_129871_);
         if (i - this.lastServerStatus >= STATUS_EXPIRE_TIME_NANOS) {
             this.lastServerStatus = i;
             this.status = this.buildServerStatus();
+            resetStatusCache(status);
         }
 
         this.ticksUntilAutosave--;
@@ -927,6 +_,7 @@
         this.smoothedTickTimeMillis = this.smoothedTickTimeMillis * 0.8F + (float)j / (float)TimeUtil.NANOSECONDS_PER_MILLISECOND * 0.19999999F;
         this.logTickMethodTime(i);
         this.profiler.pop();
+        net.neoforged.neoforge.event.EventHooks.fireServerTickPost(p_129871_, this);
     }
 
     private void logTickMethodTime(long p_321837_) {
@@ -935,6 +_,16 @@
         }
     }
 
+    private static final com.google.gson.Gson GSON = new com.google.gson.Gson();
+    private String cachedServerStatus; // Neo: cache the server status json in case a client spams requests
+    private void resetStatusCache(ServerStatus status) {
+        this.cachedServerStatus = GSON.toJson(ServerStatus.CODEC.encodeStart(com.mojang.serialization.JsonOps.INSTANCE, status)
+                .result().orElseThrow());
+    }
+    public String getStatusJson() {
+        return cachedServerStatus;
+    }
+
     private int computeNextAutosaveInterval() {
         float f;
         if (this.tickRateManager.isSprinting()) {
@@ -966,7 +_,8 @@
             Optional.of(serverstatus$players),
             Optional.of(ServerStatus.Version.current()),
             Optional.ofNullable(this.statusIcon),
-            this.enforceSecureProfile()
+            this.enforceSecureProfile(),
+            true //TODO Neo: Possible build a system which indicates what the status of the modded server is.
         );
     }
 
@@ -996,7 +_,8 @@
         this.getFunctions().tick();
         this.profiler.popPush("levels");
 
-        for (ServerLevel serverlevel : this.getAllLevels()) {
+        for(ServerLevel serverlevel : this.getWorldArray()) {
+            long tickStart = Util.getNanos();
             this.profiler.push(() -> serverlevel + " " + serverlevel.dimension().location());
             if (this.tickCount % 20 == 0) {
                 this.profiler.push("timeSync");
@@ -1005,6 +_,7 @@
             }
 
             this.profiler.push("tick");
+            net.neoforged.neoforge.event.EventHooks.fireLevelTickPre(serverlevel, p_129954_);
 
             try {
                 serverlevel.tick(p_129954_);
@@ -1013,16 +_,18 @@
                 serverlevel.fillReportDetails(crashreport);
                 throw new ReportedException(crashreport);
             }
+            net.neoforged.neoforge.event.EventHooks.fireLevelTickPost(serverlevel, p_129954_);
 
             this.profiler.pop();
             this.profiler.pop();
+            perWorldTickTimes.computeIfAbsent(serverlevel.dimension(), k -> new long[100])[this.tickCount % 100] = Util.getNanos() - tickStart;
         }
 
         this.profiler.popPush("connection");
         this.getConnection().tick();
         this.profiler.popPush("players");
         this.playerList.tick();
-        if (SharedConstants.IS_RUNNING_IN_IDE && this.tickRateManager.runsNormally()) {
+        if (net.neoforged.neoforge.gametest.GameTestHooks.isGametestEnabled() && this.tickRateManager.runsNormally()) {
             GameTestTicker.SINGLETON.tick();
         }
 
@@ -1043,11 +_,17 @@
     }
 
     private void synchronizeTime(ServerLevel p_276371_) {
-        this.playerList
-            .broadcastAll(
-                new ClientboundSetTimePacket(p_276371_.getGameTime(), p_276371_.getDayTime(), p_276371_.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)),
-                p_276371_.dimension()
-            );
+        ClientboundSetTimePacket vanillaPacket = new ClientboundSetTimePacket(p_276371_.getGameTime(), p_276371_.getDayTime(), p_276371_.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT));
+        net.neoforged.neoforge.network.payload.ClientboundCustomSetTimePayload neoPacket = new net.neoforged.neoforge.network.payload.ClientboundCustomSetTimePayload(p_276371_.getGameTime(), p_276371_.getDayTime(), p_276371_.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT), p_276371_.getDayTimeFraction(), p_276371_.getDayTimePerTick());
+        for (ServerPlayer serverplayer : playerList.getPlayers()) {
+            if (serverplayer.level().dimension() == p_276371_.dimension()) {
+                if (serverplayer.connection.hasChannel(net.neoforged.neoforge.network.payload.ClientboundCustomSetTimePayload.TYPE)) {
+                    serverplayer.connection.send(neoPacket);
+                } else {
+                    serverplayer.connection.send(vanillaPacket);
+                }
+            }
+        }
     }
 
     public void forceTimeSynchronization() {
@@ -1118,7 +_,7 @@
 
     @DontObfuscate
     public String getServerModName() {
-        return "vanilla";
+        return net.neoforged.neoforge.internal.BrandingControl.getServerBranding();
     }
 
     public SystemReport fillSystemReport(SystemReport p_177936_) {
@@ -1135,6 +_,11 @@
             "Enabled Feature Flags",
             () -> FeatureFlags.REGISTRY.toNames(this.worldData.enabledFeatures()).stream().map(ResourceLocation::toString).collect(Collectors.joining(", "))
         );
+        // Neo: Append modded feature flags to crash reports
+        p_177936_.setDetail(
+                "Enabled Mod Features",
+                () -> moddedFlagManager.enabledFlags().map(net.neoforged.neoforge.flag.Flag::toStringShort).collect(Collectors.joining(", "))
+        );
         p_177936_.setDetail("World Generation", () -> this.worldData.worldGenSettingsLifecycle().toString());
         p_177936_.setDetail("World Seed", () -> String.valueOf(this.worldData.worldGenOptions().seed()));
         if (this.serverId != null) {
@@ -1441,7 +_,7 @@
 
     public CompletableFuture<Void> reloadResources(Collection<String> p_129862_) {
         CompletableFuture<Void> completablefuture = CompletableFuture.<ImmutableList>supplyAsync(
-                () -> p_129862_.stream().map(this.packRepository::getPack).filter(Objects::nonNull).map(Pack::open).collect(ImmutableList.toImmutableList()),
+                () -> this.packRepository.rebuildSelected(p_129862_).stream().map(Pack::open).collect(ImmutableList.toImmutableList()),
                 this
             )
             .thenCompose(
@@ -1451,6 +_,7 @@
                             closeableresourcemanager,
                             this.registries,
                             this.worldData.enabledFeatures(),
+                            this.moddedFlagManager,
                             this.isDedicatedServer() ? Commands.CommandSelection.DEDICATED : Commands.CommandSelection.INTEGRATED,
                             this.getFunctionCompilationLevel(),
                             this.executor,
@@ -1470,7 +_,7 @@
                     this.resources = p_335203_;
                     this.packRepository.setSelected(p_129862_);
                     WorldDataConfiguration worlddataconfiguration = new WorldDataConfiguration(
-                        getSelectedPacks(this.packRepository, true), this.worldData.enabledFeatures()
+                        getSelectedPacks(this.packRepository, true), this.worldData.enabledFeatures(), this.worldData.getDataConfiguration().enabledModdedFeatures()
                     );
                     this.worldData.setDataConfiguration(worlddataconfiguration);
                     this.resources.managers.updateRegistryTags();
@@ -1478,6 +_,7 @@
                     this.getPlayerList().reloadResources();
                     this.functionManager.replaceLibrary(this.resources.managers.getFunctionLibrary());
                     this.structureTemplateManager.onResourceManagerReload(this.resources.resourceManager);
+                    this.getPlayerList().getPlayers().forEach(this.getPlayerList()::sendPlayerPermissionLevel); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
                 },
                 this
             );
@@ -1495,8 +_,10 @@
         FeatureFlagSet featureflagset = p_249869_ ? FeatureFlagSet.of() : p_341632_.enabledFeatures();
         FeatureFlagSet featureflagset1 = p_249869_ ? FeatureFlags.REGISTRY.allFlags() : p_341632_.enabledFeatures();
         p_248681_.reload();
+        DataPackConfig.DEFAULT.addModPacks(net.neoforged.neoforge.common.CommonHooks.getModDataPacks());
+        datapackconfig.addModPacks(net.neoforged.neoforge.common.CommonHooks.getModDataPacks());
         if (p_341620_) {
-            return configureRepositoryWithSelection(p_248681_, List.of("vanilla"), featureflagset, false);
+            return configureRepositoryWithSelection(p_248681_, net.neoforged.neoforge.common.CommonHooks.getModDataPacksWithVanilla(), featureflagset, p_341632_.enabledModdedFeatures(), false);
         } else {
             Set<String> set = Sets.newLinkedHashSet();
 
@@ -1542,18 +_,30 @@
                 set.add("vanilla");
             }
 
-            return configureRepositoryWithSelection(p_248681_, set, featureflagset, true);
+            net.neoforged.neoforge.resource.ResourcePackLoader.reorderNewlyDiscoveredPacks(set, datapackconfig.getEnabled(), p_248681_);
+
+            return configureRepositoryWithSelection(p_248681_, set, featureflagset, p_341632_.enabledModdedFeatures(), true);
         }
     }
 
     private static WorldDataConfiguration configureRepositoryWithSelection(
-        PackRepository p_341680_, Collection<String> p_341677_, FeatureFlagSet p_341602_, boolean p_341662_
+        PackRepository p_341680_, Collection<String> p_341677_, FeatureFlagSet p_341602_, it.unimi.dsi.fastutil.objects.ReferenceSet<net.neoforged.neoforge.flag.Flag> enabledModdedFeatures, boolean p_341662_
     ) {
         p_341680_.setSelected(p_341677_);
         enableForcedFeaturePacks(p_341680_, p_341602_);
         DataPackConfig datapackconfig = getSelectedPacks(p_341680_, p_341662_);
         FeatureFlagSet featureflagset = p_341680_.getRequestedFeatureFlags().join(p_341602_);
-        return new WorldDataConfiguration(datapackconfig, featureflagset);
+        return new WorldDataConfiguration(datapackconfig, featureflagset, enabledModdedFeatures);
+    }
+
+    /**
+     * @deprecated Prefer {@link #configureRepositoryWithSelection(PackRepository, Collection, FeatureFlagSet, it.unimi.dsi.fastutil.objects.ReferenceSet, boolean)}
+     */
+    @Deprecated
+    private static WorldDataConfiguration configureRepositoryWithSelection(
+            PackRepository p_341680_, Collection<String> p_341677_, FeatureFlagSet p_341602_, boolean p_341662_
+    ) {
+        return configureRepositoryWithSelection(p_341680_, p_341677_, p_341602_, it.unimi.dsi.fastutil.objects.ReferenceSets.emptySet(), p_341662_);
     }
 
     private static void enableForcedFeaturePacks(PackRepository p_341674_, FeatureFlagSet p_341598_) {
@@ -1712,6 +_,31 @@
 
     public abstract boolean isSingleplayerOwner(GameProfile p_129840_);
 
+    private Map<ResourceKey<Level>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+    @Nullable
+    public long[] getTickTime(ResourceKey<Level> dim) {
+        return perWorldTickTimes.get(dim);
+    }
+
+    @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+    public synchronized Map<ResourceKey<Level>, ServerLevel> forgeGetWorldMap() {
+        return this.levels;
+    }
+    private int worldArrayMarker = 0;
+    private int worldArrayLast = -1;
+    private ServerLevel[] worldArray;
+    @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+    public synchronized void markWorldsDirty() {
+        worldArrayMarker++;
+    }
+    private ServerLevel[] getWorldArray() {
+        if (worldArrayMarker == worldArrayLast && worldArray != null)
+            return worldArray;
+        worldArray = this.levels.values().stream().toArray(x -> new ServerLevel[x]);
+        worldArrayLast = worldArrayMarker;
+        return worldArray;
+    }
+
     public void dumpServerProperties(Path p_177911_) throws IOException {
     }
 
@@ -1875,6 +_,10 @@
         return this.worldData;
     }
 
+    public MinecraftServer.ReloadableResources getServerResources() {
+         return resources;
+    }
+
     public RegistryAccess.Frozen registryAccess() {
         return this.registries.compositeAccess();
     }
@@ -1999,6 +_,10 @@
 
     public ServerLinks serverLinks() {
         return ServerLinks.EMPTY;
+    }
+
+    public net.neoforged.neoforge.flag.FlagManager getModdedFlagManager() {
+        return moddedFlagManager;
     }
 
     public static record ReloadableResources(CloseableResourceManager resourceManager, ReloadableServerResources managers) implements AutoCloseable {
