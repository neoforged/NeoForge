--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -245,7 +_,7 @@
 
    public static <S extends MinecraftServer> S spin(Function<Thread, S> p_129873_) {
       AtomicReference<S> atomicreference = new AtomicReference<>();
-      Thread thread = new Thread(() -> atomicreference.get().runServer(), "Server thread");
+      Thread thread = new Thread(net.neoforged.fml.util.thread.SidedThreadGroups.SERVER, () -> atomicreference.get().runServer(), "Server thread");
       thread.setUncaughtExceptionHandler((p_177909_, p_177910_) -> LOGGER.error("Uncaught exception in server thread", p_177910_));
       if (Runtime.getRuntime().availableProcessors() > 4) {
          thread.setPriority(8);
@@ -350,6 +_,7 @@
       this.readScoreboard(dimensiondatastorage);
       this.commandStorage = new CommandStorage(dimensiondatastorage);
       WorldBorder worldborder = serverlevel.getWorldBorder();
+      net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Load(levels.get(Level.OVERWORLD)));
       if (!serverleveldata.isInitialized()) {
          try {
             setInitialSpawn(serverlevel, serverleveldata, worldoptions.generateBonusChest(), flag);
@@ -399,6 +_,7 @@
             );
             worldborder.addListener(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.getWorldBorder()));
             this.levels.put(resourcekey1, serverlevel1);
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Load(levels.get(resourcekey)));
          }
       }
 
@@ -410,6 +_,7 @@
          p_177898_.setSpawn(BlockPos.ZERO.above(80), 0.0F);
       } else {
          ServerChunkCache serverchunkcache = p_177897_.getChunkSource();
+         if (net.neoforged.neoforge.event.EventHooks.onCreateWorldSpawn(p_177897_, p_177898_)) return;
          ChunkPos chunkpos = new ChunkPos(serverchunkcache.randomState().sampler().findSpawnPosition());
          int i = serverchunkcache.getGenerator().getSpawnHeight(p_177897_);
          if (i < p_177897_.getMinBuildHeight()) {
@@ -498,6 +_,7 @@
                ChunkPos chunkpos = new ChunkPos(i);
                serverlevel1.getChunkSource().updateChunkForced(chunkpos, true);
             }
+            net.neoforged.neoforge.common.world.ForcedChunkManager.reinstatePersistentChunks(serverlevel1, forcedchunkssaveddata);
          }
       }
 
@@ -605,6 +_,7 @@
       for(ServerLevel serverlevel2 : this.getAllLevels()) {
          if (serverlevel2 != null) {
             try {
+               net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Unload(serverlevel2));
                serverlevel2.close();
             } catch (IOException ioexception1) {
                LOGGER.error("Exception closing the level", (Throwable)ioexception1);
@@ -651,9 +_,11 @@
             throw new IllegalStateException("Failed to initialize server");
          }
 
+         net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStarted(this);
          this.nextTickTime = Util.getMillis();
          this.statusIcon = this.loadStatusIcon().orElse(null);
          this.status = this.buildServerStatus();
+         resetStatusCache(status);
 
          while(this.running) {
             long i = Util.getMillis() - this.nextTickTime;
@@ -682,6 +_,8 @@
             this.isReady = true;
             JvmProfiler.INSTANCE.onServerTick(this.averageTickTime);
          }
+         net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStopping(this);
+         net.neoforged.neoforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
       } catch (Throwable throwable1) {
          LOGGER.error("Encountered an unexpected exception", throwable1);
          CrashReport crashreport = constructOrExtractCrashReport(throwable1);
@@ -693,6 +_,7 @@
             LOGGER.error("We were unable to save this crash report to disk.");
          }
 
+         net.neoforged.neoforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
          this.onServerCrash(crashreport);
       } finally {
          try {
@@ -705,6 +_,7 @@
                this.services.profileCache().clearExecutor();
             }
 
+            net.neoforged.neoforge.server.ServerLifecycleHooks.handleServerStopped(this);
             this.onServerExit();
          }
       }
@@ -812,11 +_,13 @@
 
    public void tickServer(BooleanSupplier p_129871_) {
       long i = Util.getNanos();
+      net.neoforged.neoforge.event.EventHooks.onPreServerTick(p_129871_, this);
       ++this.tickCount;
       this.tickChildren(p_129871_);
       if (i - this.lastServerStatus >= 5000000000L) {
          this.lastServerStatus = i;
          this.status = this.buildServerStatus();
+         resetStatusCache(status);
       }
 
       if (this.tickCount % 6000 == 0) {
@@ -833,6 +_,17 @@
       long k = Util.getNanos();
       this.logTickTime(k - i);
       this.profiler.pop();
+      net.neoforged.neoforge.event.EventHooks.onPostServerTick(p_129871_, this);
+   }
+
+   private static final com.google.gson.Gson GSON = new com.google.gson.Gson();
+   private String cachedServerStatus; // FORGE: cache the server status json in case a client spams requests
+   private void resetStatusCache(ServerStatus status) {
+      this.cachedServerStatus = GSON.toJson(ServerStatus.CODEC.encodeStart(com.mojang.serialization.JsonOps.INSTANCE, status)
+              .result().orElseThrow());
+   }
+   public String getStatusJson() {
+      return cachedServerStatus;
    }
 
    protected void logTickTime(long p_299911_) {
@@ -841,11 +_,12 @@
    private ServerStatus buildServerStatus() {
       ServerStatus.Players serverstatus$players = this.buildPlayerStatus();
       return new ServerStatus(
-         Component.nullToEmpty(this.motd),
-         Optional.of(serverstatus$players),
-         Optional.of(ServerStatus.Version.current()),
-         Optional.ofNullable(this.statusIcon),
-         this.enforceSecureProfile()
+              Component.nullToEmpty(this.motd),
+              Optional.of(serverstatus$players),
+              Optional.of(ServerStatus.Version.current()),
+              Optional.ofNullable(this.statusIcon),
+              this.enforceSecureProfile(),
+              Optional.of(new net.neoforged.neoforge.network.ServerStatusPing())
       );
    }
 
@@ -875,7 +_,8 @@
       this.getFunctions().tick();
       this.profiler.popPush("levels");
 
-      for(ServerLevel serverlevel : this.getAllLevels()) {
+      for(ServerLevel serverlevel : this.getWorldArray()) {
+         long tickStart = Util.getNanos();
          this.profiler.push(() -> serverlevel + " " + serverlevel.dimension().location());
          if (this.tickCount % 20 == 0) {
             this.profiler.push("timeSync");
@@ -884,6 +_,7 @@
          }
 
          this.profiler.push("tick");
+         net.neoforged.neoforge.event.EventHooks.onPreLevelTick(serverlevel, p_129954_);
 
          try {
             serverlevel.tick(p_129954_);
@@ -892,16 +_,18 @@
             serverlevel.fillReportDetails(crashreport);
             throw new ReportedException(crashreport);
          }
+         net.neoforged.neoforge.event.EventHooks.onPostLevelTick(serverlevel, p_129954_);
 
          this.profiler.pop();
          this.profiler.pop();
+         perWorldTickTimes.computeIfAbsent(serverlevel.dimension(), k -> new long[100])[this.tickCount % 100] = Util.getNanos() - tickStart;
       }
 
       this.profiler.popPush("connection");
       this.getConnection().tick();
       this.profiler.popPush("players");
       this.playerList.tick();
-      if (SharedConstants.IS_RUNNING_IN_IDE) {
+      if (net.neoforged.neoforge.gametest.GameTestHooks.isGametestEnabled()) {
          GameTestTicker.SINGLETON.tick();
       }
 
@@ -997,7 +_,7 @@
 
    @DontObfuscate
    public String getServerModName() {
-      return "vanilla";
+      return net.neoforged.neoforge.internal.BrandingControl.getServerBranding();
    }
 
    public SystemReport fillSystemReport(SystemReport p_177936_) {
@@ -1359,6 +_,7 @@
             this.getPlayerList().reloadResources();
             this.functionManager.replaceLibrary(this.resources.managers.getFunctionLibrary());
             this.structureTemplateManager.onResourceManagerReload(this.resources.resourceManager);
+         this.getPlayerList().getPlayers().forEach(this.getPlayerList()::sendPlayerPermissionLevel); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
          }, this);
       if (this.isSameThread()) {
          this.managedBlock(completablefuture::isDone);
@@ -1368,10 +_,13 @@
    }
 
    public static WorldDataConfiguration configurePackRepository(PackRepository p_248681_, DataPackConfig p_248920_, boolean p_249869_, FeatureFlagSet p_251243_) {
+      net.neoforged.neoforge.resource.ResourcePackLoader.loadResourcePacks(p_248681_, net.neoforged.neoforge.server.ServerLifecycleHooks::buildPackFinder);
       p_248681_.reload();
+      DataPackConfig.DEFAULT.addModPacks(net.neoforged.neoforge.common.CommonHooks.getModPacks());
+      p_248920_.addModPacks(net.neoforged.neoforge.common.CommonHooks.getModPacks());
       if (p_249869_) {
-         p_248681_.setSelected(Collections.singleton("vanilla"));
-         return WorldDataConfiguration.DEFAULT;
+         p_248681_.setSelected(net.neoforged.neoforge.common.CommonHooks.getModPacksWithVanilla());
+         return new WorldDataConfiguration(new DataPackConfig(net.neoforged.neoforge.common.CommonHooks.getModPacksWithVanilla(), ImmutableList.of()), FeatureFlags.DEFAULT_FLAGS);
       } else {
          Set<String> set = Sets.newLinkedHashSet();
 
@@ -1541,6 +_,31 @@
 
    public abstract boolean isSingleplayerOwner(GameProfile p_129840_);
 
+   private Map<ResourceKey<Level>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(ResourceKey<Level> dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<ResourceKey<Level>, ServerLevel> forgeGetWorldMap() {
+      return this.levels;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerLevel[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   private ServerLevel[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.levels.values().stream().toArray(x -> new ServerLevel[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void dumpServerProperties(Path p_177911_) throws IOException {
    }
 
@@ -1702,6 +_,10 @@
 
    public WorldData getWorldData() {
       return this.worldData;
+   }
+
+   public MinecraftServer.ReloadableResources getServerResources() {
+       return resources;
    }
 
    public RegistryAccess.Frozen registryAccess() {
