--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -128,6 +_,7 @@
     private boolean allowCommandsForAllPlayers;
     private static final boolean ALLOW_LOGOUTIVATOR = false;
     private int sendAllPlayerInfoIn;
+    private final List<ServerPlayer> playersView = java.util.Collections.unmodifiableList(players);
 
     public PlayerList(MinecraftServer server, LayeredRegistryAccess<RegistryLayer> registries, PlayerDataStorage playerIo, int maxPlayers) {
         this.server = server;
@@ -177,7 +_,7 @@
         player.loadGameTypes(optional1.orElse(null));
         ServerGamePacketListenerImpl servergamepacketlistenerimpl = new ServerGamePacketListenerImpl(this.server, connection, player, cookie);
         connection.setupInboundProtocol(
-            GameProtocols.SERVERBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess())), servergamepacketlistenerimpl
+            GameProtocols.SERVERBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess(), servergamepacketlistenerimpl.getConnectionType())), servergamepacketlistenerimpl
         );
         GameRules gamerules = serverlevel1.getGameRules();
         boolean flag = gamerules.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
@@ -201,6 +_,7 @@
         servergamepacketlistenerimpl.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
         servergamepacketlistenerimpl.send(new ClientboundPlayerAbilitiesPacket(player.getAbilities()));
         servergamepacketlistenerimpl.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.OnDatapackSyncEvent(this, player));
         servergamepacketlistenerimpl.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getOrderedRecipes()));
         this.sendPlayerPermissionLevel(player);
         player.getStats().markAllDirty();
@@ -265,6 +_,7 @@
         }
 
         player.initInventoryMenu();
+        net.neoforged.neoforge.event.EventHooks.firePlayerLoggedIn( player );
     }
 
     protected void updateEntireScoreboard(ServerScoreboard scoreboard, ServerPlayer player) {
@@ -330,6 +_,7 @@
             optional = Optional.of(compoundtag);
             player.load(compoundtag);
             LOGGER.debug("loading single player");
+            net.neoforged.neoforge.event.EventHooks.firePlayerLoadingEvent(player, this.playerIo, player.getUUID().toString());
         } else {
             optional = this.playerIo.load(player);
         }
@@ -338,6 +_,7 @@
     }
 
     protected void save(ServerPlayer player) {
+        if (player.connection == null) return;
         this.playerIo.save(player);
         ServerStatsCounter serverstatscounter = this.stats.get(player.getUUID());
         if (serverstatscounter != null) {
@@ -351,6 +_,7 @@
     }
 
     public void remove(ServerPlayer player) {
+        net.neoforged.neoforge.event.EventHooks.firePlayerLoggedOut(player);
         ServerLevel serverlevel = player.serverLevel();
         player.awardStat(Stats.LEAVE_GAME);
         this.save(player);
@@ -440,13 +_,20 @@
         this.players.remove(player);
         player.serverLevel().removePlayerImmediately(player, reason);
         DimensionTransition dimensiontransition = player.findRespawnPositionAndUseSpawnBlock(keepInventory, DimensionTransition.DO_NOTHING);
+
+        // Neo: Allow changing the respawn position of players. The local dimension transition is updated with the new target.
+        var event = net.neoforged.neoforge.event.EventHooks.firePlayerRespawnPositionEvent(player, dimensiontransition, keepInventory);
+        dimensiontransition = event.getDimensionTransition();
+
         ServerLevel serverlevel = dimensiontransition.newLevel();
         ServerPlayer serverplayer = new ServerPlayer(this.server, serverlevel, player.getGameProfile(), player.clientInformation());
         serverplayer.connection = player.connection;
         serverplayer.restoreFrom(player, keepInventory);
         serverplayer.setId(player.getId());
         serverplayer.setMainArm(player.getMainArm());
-        if (!dimensiontransition.missingRespawnBlock()) {
+
+        // Neo: Allow the event to control if the original spawn position is copied
+        if (event.copyOriginalSpawnPosition()) {
             serverplayer.copyRespawnPosition(player);
         }
 
@@ -477,6 +_,7 @@
         this.playersByUUID.put(serverplayer.getUUID(), serverplayer);
         serverplayer.initInventoryMenu();
         serverplayer.setHealth(serverplayer.getHealth());
+        net.neoforged.neoforge.event.EventHooks.firePlayerRespawnEvent(serverplayer, keepInventory);
         if (!keepInventory) {
             BlockPos blockpos = BlockPos.containing(dimensiontransition.pos());
             BlockState blockstate = serverlevel.getBlockState(blockpos);
@@ -582,6 +_,7 @@
     }
 
     public void op(GameProfile profile) {
+        if (net.neoforged.neoforge.event.EventHooks.onPermissionChanged(profile, this.server.getOperatorUserPermissionLevel(), this)) return;
         this.ops.add(new ServerOpListEntry(profile, this.server.getOperatorUserPermissionLevel(), this.ops.canBypassPlayerLimit(profile)));
         ServerPlayer serverplayer = this.getPlayer(profile.getId());
         if (serverplayer != null) {
@@ -590,6 +_,7 @@
     }
 
     public void deop(GameProfile profile) {
+        if (net.neoforged.neoforge.event.EventHooks.onPermissionChanged(profile, 0, this)) return;
         this.ops.remove(profile);
         ServerPlayer serverplayer = this.getPlayer(profile.getId());
         if (serverplayer != null) {
@@ -808,13 +_,6 @@
         if (serverstatscounter == null) {
             File file1 = this.server.getWorldPath(LevelResource.PLAYER_STATS_DIR).toFile();
             File file2 = new File(file1, uuid + ".json");
-            if (!file2.exists()) {
-                File file3 = new File(file1, player.getName().getString() + ".json");
-                Path path = file3.toPath();
-                if (FileUtil.isPathNormalized(path) && FileUtil.isPathPortable(path) && path.startsWith(file1.getPath()) && file3.isFile()) {
-                    file3.renameTo(file2);
-                }
-            }
 
             serverstatscounter = new ServerStatsCounter(this.server, file2);
             this.stats.put(uuid, serverstatscounter);
@@ -832,6 +_,8 @@
             this.advancements.put(uuid, playeradvancements);
         }
 
+        // Forge: don't overwrite active player with a fake one.
+        if (!(player instanceof net.neoforged.neoforge.common.util.FakePlayer))
         playeradvancements.setPlayer(player);
         return playeradvancements;
     }
@@ -859,7 +_,7 @@
     }
 
     public List<ServerPlayer> getPlayers() {
-        return this.players;
+        return this.playersView; //Unmodifiable view, we don't want people removing things without us knowing.
     }
 
     @Nullable
@@ -876,6 +_,7 @@
             playeradvancements.reload(this.server.getAdvancements());
         }
 
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.OnDatapackSyncEvent(this, null));
         this.broadcastAll(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(this.registries)));
         ClientboundUpdateRecipesPacket clientboundupdaterecipespacket = new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getOrderedRecipes());
 
