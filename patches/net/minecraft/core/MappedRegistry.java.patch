--- a/net/minecraft/core/MappedRegistry.java
+++ b/net/minecraft/core/MappedRegistry.java
@@ -125,7 +_,16 @@
       }
    }
 
+   private static final Set<ResourceLocation> KNOWN = new java.util.LinkedHashSet<>();
+   public static Set<ResourceLocation> getKnownRegistries() {
+      return java.util.Collections.unmodifiableSet(KNOWN);
+   }
+   protected final void markKnown() {
+      KNOWN.add(key().location());
+   }
+
    public Holder.Reference<T> registerMapping(int p_256563_, ResourceKey<T> p_256594_, T p_256374_, Lifecycle p_256469_) {
+      markKnown();
       this.validateWrite(p_256594_);
       Validate.notNull(p_256594_);
       Validate.notNull(p_256374_);
@@ -147,6 +_,8 @@
          reference.bindKey(p_256594_);
       } else {
          reference = this.byKey.computeIfAbsent(p_256594_, p_258168_ -> Holder.Reference.createStandAlone(this.holderOwner(), p_258168_));
+         // Forge: Bind the value immediately so it can be queried while the registry is not frozen
+         reference.bindValue(p_256374_);
       }
 
       this.byKey.put(p_256594_, reference);
@@ -325,13 +_,18 @@
       return this.byKey.containsKey(p_175392_);
    }
 
+   /** @deprecated Forge: For internal use only. Use the Register events when registering values. */
+   @Deprecated
+   public void unfreeze() {
+      this.frozen = false;
+   }
+
    @Override
    public Registry<T> freeze() {
       if (this.frozen) {
          return this;
       } else {
          this.frozen = true;
-         this.byValue.forEach((p_247989_, p_247990_) -> p_247990_.bindValue(p_247989_));
          List<ResourceLocation> list = this.byKey
             .entrySet()
             .stream()
@@ -347,7 +_,8 @@
                   throw new IllegalStateException("Some intrusive holders were not registered: " + this.unregisteredIntrusiveHolders.values());
                }
 
-               this.unregisteredIntrusiveHolders = null;
+               // Forge: We freeze/unfreeze vanilla registries more than once, so we need to keep the unregistered intrusive holders map around.
+               // this.unregisteredIntrusiveHolders = null;
             }
 
             return this;
