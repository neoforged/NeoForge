--- a/net/minecraft/core/MappedRegistry.java
+++ b/net/minecraft/core/MappedRegistry.java
@@ -30,7 +_,7 @@
 import net.minecraft.tags.TagLoader;
 import net.minecraft.util.RandomSource;
 
-public class MappedRegistry<T> implements WritableRegistry<T> {
+public class MappedRegistry<T> extends net.neoforged.neoforge.registries.BaseMappedRegistry<T> implements WritableRegistry<T> {
     private final ResourceKey<? extends Registry<T>> key;
     private final ObjectList<Holder.Reference<T>> byId = new ObjectArrayList<>(256);
     private final Reference2IntMap<T> toId = Util.make(new Reference2IntOpenHashMap<>(), p_304142_ -> p_304142_.defaultReturnValue(-1));
@@ -86,9 +_,17 @@
 
     @Override
     public Holder.Reference<T> register(ResourceKey<T> p_256252_, T p_256591_, RegistrationInfo p_326235_) {
+        return register(this.byId.size(), p_256252_, p_256591_, p_326235_);
+    }
+
+    public Holder.Reference<T> register(int id, ResourceKey<T> p_256252_, T p_256591_, RegistrationInfo p_326235_) {
         this.validateWrite(p_256252_);
         Objects.requireNonNull(p_256252_);
         Objects.requireNonNull(p_256591_);
+        int i = id;
+        if (i > this.getMaxId())
+            throw new IllegalStateException(String.format(java.util.Locale.ENGLISH, "Invalid id %d - maximum id range of %d exceeded.", i, this.getMaxId()));
+
         if (this.byLocation.containsKey(p_256252_.location())) {
             throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("Adding duplicate key '" + p_256252_ + "' to registry"));
         } else if (this.byValue.containsKey(p_256591_)) {
@@ -104,16 +_,18 @@
                 reference.bindKey(p_256252_);
             } else {
                 reference = this.byKey.computeIfAbsent(p_256252_, p_367800_ -> Holder.Reference.createStandAlone(this, (ResourceKey<T>)p_367800_));
+                // Forge: Bind the value immediately so it can be queried while the registry is not frozen
+                reference.bindValue(p_256591_);
             }
 
             this.byKey.put(p_256252_, reference);
             this.byLocation.put(p_256252_.location(), reference);
             this.byValue.put(p_256591_, reference);
-            int i = this.byId.size();
             this.byId.add(reference);
             this.toId.put(p_256591_, i);
             this.registrationInfos.put(p_256252_, p_326235_);
             this.registryLifecycle = this.registryLifecycle.add(p_326235_.lifecycle());
+            this.addCallbacks.forEach(addCallback -> addCallback.onAdd(this, i, p_256252_, p_256591_));
             return reference;
         }
     }
@@ -138,7 +_,7 @@
     @Nullable
     @Override
     public T getValue(@Nullable ResourceKey<T> p_122714_) {
-        return getValueFromNullable(this.byKey.get(p_122714_));
+        return getValueFromNullable(this.byKey.get(resolve(p_122714_)));
     }
 
     @Nullable
@@ -154,12 +_,12 @@
 
     @Override
     public Optional<Holder.Reference<T>> get(ResourceLocation p_316743_) {
-        return Optional.ofNullable(this.byLocation.get(p_316743_));
+        return Optional.ofNullable(this.byLocation.get(resolve(p_316743_)));
     }
 
     @Override
     public Optional<Holder.Reference<T>> get(ResourceKey<T> p_205905_) {
-        return Optional.ofNullable(this.byKey.get(p_205905_));
+        return Optional.ofNullable(this.byKey.get(resolve(p_205905_)));
     }
 
     @Override
@@ -174,12 +_,12 @@
     }
 
     Holder.Reference<T> getOrCreateHolderOrThrow(ResourceKey<T> p_248831_) {
-        return this.byKey.computeIfAbsent(p_248831_, p_367801_ -> {
+        return this.byKey.computeIfAbsent(resolve(p_248831_), p_258169_ -> {
             if (this.unregisteredIntrusiveHolders != null) {
                 throw new IllegalStateException("This registry can't create new holders without value");
             } else {
-                this.validateWrite((ResourceKey<T>)p_367801_);
-                return Holder.Reference.createStandAlone(this, (ResourceKey<T>)p_367801_);
+                this.validateWrite((ResourceKey<T>)p_258169_);
+                return Holder.Reference.createStandAlone(this, (ResourceKey<T>)p_258169_);
             }
         });
     }
@@ -207,7 +_,7 @@
     @Nullable
     @Override
     public T getValue(@Nullable ResourceLocation p_122739_) {
-        Holder.Reference<T> reference = this.byLocation.get(p_122739_);
+        Holder.Reference<T> reference = this.byLocation.get(p_122739_ != null ? resolve(p_122739_) : null);
         return getValueFromNullable(reference);
     }
 
@@ -269,13 +_,23 @@
         return this.byKey.containsKey(p_175392_);
     }
 
+    /** @deprecated Forge: For internal use only. Use the Register events when registering values. */
+    @Deprecated
+    @Override
+    public void unfreeze(boolean clearTags) {
+        if (clearTags) {
+            // unbind tags which were bound by the previous freeze
+            this.allTags = MappedRegistry.TagSet.unbound();
+        }
+        this.frozen = false;
+    }
+
     @Override
     public Registry<T> freeze() {
         if (this.frozen) {
             return this;
         } else {
             this.frozen = true;
-            this.byValue.forEach((p_247989_, p_247990_) -> p_247990_.bindValue((T)p_247989_));
             List<ResourceLocation> list = this.byKey
                 .entrySet()
                 .stream()
@@ -291,11 +_,15 @@
                         throw new IllegalStateException("Some intrusive holders were not registered: " + this.unregisteredIntrusiveHolders.values());
                     }
 
-                    this.unregisteredIntrusiveHolders = null;
+                    // Neo: We freeze/unfreeze vanilla registries more than once, so we need to keep the unregistered intrusive holders map around.
+                    // this.unregisteredIntrusiveHolders = null;
                 }
+                this.bakeCallbacks.forEach(bakeCallback -> bakeCallback.onBake(this));
 
                 if (this.allTags.isBound()) {
-                    throw new IllegalStateException("Tags already present before freezing");
+                    // Neo: we freeze/unfreeze the registry to apply snapshots and tags need to be preserved in those cases
+                    //throw new IllegalStateException("Tags already present before freezing");
+                    return this;
                 } else {
                     List<ResourceLocation> list1 = this.frozenTags
                         .entrySet()
@@ -450,6 +_,54 @@
                 }
             };
         }
+    }
+
+    @Override
+    protected void clear(boolean full) {
+        this.validateWrite();
+        this.clearCallbacks.forEach(clearCallback -> clearCallback.onClear(this, full));
+        super.clear(full);
+        this.byId.clear();
+        this.toId.clear();
+        if (full) {
+            this.byLocation.clear();
+            this.byKey.clear();
+            this.byValue.clear();
+            this.allTags = MappedRegistry.TagSet.unbound();
+            if (unregisteredIntrusiveHolders != null) {
+                unregisteredIntrusiveHolders.clear();
+                unregisteredIntrusiveHolders = null;
+            }
+        }
+    }
+
+    @Override
+    protected void registerIdMapping(ResourceKey<T> key, int id) {
+        this.validateWrite(key);
+        if (id > this.getMaxId())
+            throw new IllegalStateException(String.format(java.util.Locale.ENGLISH, "Invalid id %d - maximum id range of %d exceeded.", id, this.getMaxId()));
+        if (0 <= id && id < this.byId.size() && this.byId.get(id) != null) { // Don't use byId() method, it will return the default value if the entry is absent
+            throw new IllegalStateException("Duplicate id " + id + " for " + key + " and " + this.getKey(this.byId.get(id).value()));
+        }
+        var holder = byKey.get(key);
+        while (this.byId.size() < (id + 1)) this.byId.add(null);
+        this.byId.set(id, holder);
+        this.toId.put(holder.value(), id);
+    }
+
+    @Override
+    public int getId(ResourceLocation name) {
+        return getId(getValue(name));
+    }
+
+    @Override
+    public int getId(ResourceKey<T> key) {
+        return getId(getValue(key));
+    }
+
+    @Override
+    public boolean containsValue(T value) {
+        return byValue.containsKey(value);
     }
 
     interface TagSet<T> {
