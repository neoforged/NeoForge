--- a/net/minecraft/core/MappedRegistry.java
+++ b/net/minecraft/core/MappedRegistry.java
@@ -31,7 +_,7 @@
 import net.minecraft.util.RandomSource;
 import org.slf4j.Logger;
 
-public class MappedRegistry<T> implements WritableRegistry<T> {
+public class MappedRegistry<T> extends net.neoforged.neoforge.registries.BaseMappedRegistry<T> implements WritableRegistry<T> {
     private static final Logger LOGGER = LogUtils.getLogger();
     final ResourceKey<? extends Registry<T>> key;
     private final ObjectList<Holder.Reference<T>> byId = new ObjectArrayList<>(256);
@@ -75,6 +_,12 @@
         public Stream<HolderSet.Named<T>> listTags() {
             return MappedRegistry.this.getTags().map(Pair::getSecond);
         }
+
+        @Override
+        @org.jetbrains.annotations.Nullable
+        public <A> A getData(net.neoforged.neoforge.registries.datamaps.DataMapType<T, A> type, ResourceKey<T> key) {
+            return MappedRegistry.this.getData(type, key);
+        }
     };
     private final Object tagAdditionLock = new Object();
 
@@ -114,9 +_,17 @@
 
     @Override
     public Holder.Reference<T> register(ResourceKey<T> key, T value, RegistrationInfo registrationInfo) {
+        return register(this.byId.size(), key, value, registrationInfo);
+    }
+
+    public Holder.Reference<T> register(int id, ResourceKey<T> key, T value, RegistrationInfo registrationInfo) {
         this.validateWrite(key);
         Objects.requireNonNull(key);
         Objects.requireNonNull(value);
+        int i = id;
+        if (i > this.getMaxId())
+            throw new IllegalStateException(String.format(java.util.Locale.ENGLISH, "Invalid id %d - maximum id range of %d exceeded.", i, this.getMaxId()));
+
         if (this.byLocation.containsKey(key.location())) {
             Util.pauseInIde(new IllegalStateException("Adding duplicate key '" + key + "' to registry"));
         }
@@ -135,16 +_,18 @@
             reference.bindKey(key);
         } else {
             reference = this.byKey.computeIfAbsent(key, p_258168_ -> Holder.Reference.createStandAlone(this.holderOwner(), (ResourceKey<T>)p_258168_));
+            // Forge: Bind the value immediately so it can be queried while the registry is not frozen
+            reference.bindValue(value);
         }
 
         this.byKey.put(key, reference);
         this.byLocation.put(key.location(), reference);
         this.byValue.put(value, reference);
-        int i = this.byId.size();
         this.byId.add(reference);
         this.toId.put(value, i);
         this.registrationInfos.put(key, registrationInfo);
         this.registryLifecycle = this.registryLifecycle.add(registrationInfo.lifecycle());
+        this.addCallbacks.forEach(addCallback -> addCallback.onAdd(this, i, key, value));
         return reference;
     }
 
@@ -168,7 +_,7 @@
     @Nullable
     @Override
     public T get(@Nullable ResourceKey<T> key) {
-        return getValueFromNullable(this.byKey.get(key));
+        return getValueFromNullable(this.byKey.get(resolve(key)));
     }
 
     @Nullable
@@ -184,12 +_,12 @@
 
     @Override
     public Optional<Holder.Reference<T>> getHolder(ResourceLocation location) {
-        return Optional.ofNullable(this.byLocation.get(location));
+        return Optional.ofNullable(this.byLocation.get(resolve(location)));
     }
 
     @Override
     public Optional<Holder.Reference<T>> getHolder(ResourceKey<T> key) {
-        return Optional.ofNullable(this.byKey.get(key));
+        return Optional.ofNullable(this.byKey.get(resolve(key)));
     }
 
     @Override
@@ -204,7 +_,7 @@
     }
 
     Holder.Reference<T> getOrCreateHolderOrThrow(ResourceKey<T> key) {
-        return this.byKey.computeIfAbsent(key, p_258169_ -> {
+        return this.byKey.computeIfAbsent(resolve(key), p_258169_ -> {
             if (this.unregisteredIntrusiveHolders != null) {
                 throw new IllegalStateException("This registry can't create new holders without value");
             } else {
@@ -237,7 +_,7 @@
     @Nullable
     @Override
     public T get(@Nullable ResourceLocation name) {
-        Holder.Reference<T> reference = this.byLocation.get(name);
+        Holder.Reference<T> reference = this.byLocation.get(name != null ? resolve(name) : null);
         return getValueFromNullable(reference);
     }
 
@@ -321,13 +_,18 @@
         return this.byKey.containsKey(key);
     }
 
+    /** @deprecated Forge: For internal use only. Use the Register events when registering values. */
+    @Deprecated
+    public void unfreeze() {
+        this.frozen = false;
+    }
+
     @Override
     public Registry<T> freeze() {
         if (this.frozen) {
             return this;
         } else {
             this.frozen = true;
-            this.byValue.forEach((p_247989_, p_247990_) -> p_247990_.bindValue((T)p_247989_));
             List<ResourceLocation> list = this.byKey
                 .entrySet()
                 .stream()
@@ -343,8 +_,10 @@
                         throw new IllegalStateException("Some intrusive holders were not registered: " + this.unregisteredIntrusiveHolders.values());
                     }
 
-                    this.unregisteredIntrusiveHolders = null;
+                    // Neo: We freeze/unfreeze vanilla registries more than once, so we need to keep the unregistered intrusive holders map around.
+                    // this.unregisteredIntrusiveHolders = null;
                 }
+                this.bakeCallbacks.forEach(bakeCallback -> bakeCallback.onBake(this));
 
                 return this;
             }
@@ -440,5 +_,53 @@
     @Override
     public HolderLookup.RegistryLookup<T> asLookup() {
         return this.lookup;
+    }
+
+    @Override
+    protected void clear(boolean full) {
+        this.validateWrite();
+        this.clearCallbacks.forEach(clearCallback -> clearCallback.onClear(this, full));
+        super.clear(full);
+        this.byId.clear();
+        this.toId.clear();
+        if (full) {
+            this.byLocation.clear();
+            this.byKey.clear();
+            this.byValue.clear();
+            this.tags.clear();
+            if (unregisteredIntrusiveHolders != null) {
+                unregisteredIntrusiveHolders.clear();
+                unregisteredIntrusiveHolders = null;
+            }
+        }
+    }
+
+    @Override
+    protected void registerIdMapping(ResourceKey<T> key, int id) {
+        this.validateWrite(key);
+        if (id > this.getMaxId())
+            throw new IllegalStateException(String.format(java.util.Locale.ENGLISH, "Invalid id %d - maximum id range of %d exceeded.", id, this.getMaxId()));
+        if (0 <= id && id < this.byId.size() && this.byId.get(id) != null) { // Don't use byId() method, it will return the default value if the entry is absent
+            throw new IllegalStateException("Duplicate id " + id + " for " + key + " and " + this.getKey(this.byId.get(id).value()));
+        }
+        var holder = byKey.get(key);
+        while (this.byId.size() < (id + 1)) this.byId.add(null);
+        this.byId.set(id, holder);
+        this.toId.put(holder.value(), id);
+    }
+
+    @Override
+    public int getId(ResourceLocation name) {
+        return getId(get(name));
+    }
+
+    @Override
+    public int getId(ResourceKey<T> key) {
+        return getId(get(key));
+    }
+
+    @Override
+    public boolean containsValue(T value) {
+        return byValue.containsKey(value);
     }
 }
