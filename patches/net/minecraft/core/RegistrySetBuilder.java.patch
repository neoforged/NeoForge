--- a/net/minecraft/core/RegistrySetBuilder.java
+++ b/net/minecraft/core/RegistrySetBuilder.java
@@ -79,6 +_,10 @@
         return this.add(p_256261_, Lifecycle.stable(), p_256010_);
     }
 
+    public List<? extends ResourceKey<? extends Registry<?>>> getEntryKeys() {
+        return this.entries.stream().map(RegistrySetBuilder.RegistryStub::key).toList();
+    }
+
     private RegistrySetBuilder.BuildState createState(RegistryAccess p_256400_) {
         RegistrySetBuilder.BuildState registrysetbuilder$buildstate = RegistrySetBuilder.BuildState.create(
             p_256400_, this.entries.stream().map(RegistrySetBuilder.RegistryStub::key)
@@ -145,16 +_,22 @@
                 lazyholder.supplier = () -> cloner.clone((T)p_311483_.value(), p_312115_, p_311797_.getValue());
                 map.put(resourcekey, lazyholder);
             });
-            HolderLookup.RegistryLookup<T> registrylookup1 = p_312725_.lookupOrThrow(p_311836_);
-            registrylookup1.listElements().forEach(p_311506_ -> {
-                ResourceKey<T> resourcekey = p_311506_.key();
-                map.computeIfAbsent(resourcekey, p_311494_ -> {
-                    RegistrySetBuilder.LazyHolder<T> lazyholder = new RegistrySetBuilder.LazyHolder<>(p_312323_, resourcekey);
-                    lazyholder.supplier = () -> cloner.clone((T)p_311506_.value(), p_312725_, p_311797_.getValue());
-                    return lazyholder;
+            Optional<HolderLookup.RegistryLookup<T>> lookup = p_312725_.lookup(p_311836_);
+            Lifecycle lifecycle;
+            if (lookup.isPresent()) {
+                HolderLookup.RegistryLookup<T> registrylookup1 = lookup.get();
+                registrylookup1.listElements().forEach(p_311506_ -> {
+                    ResourceKey<T> resourcekey = p_311506_.key();
+                    map.computeIfAbsent(resourcekey, p_311494_ -> {
+                        RegistrySetBuilder.LazyHolder<T> lazyholder = new RegistrySetBuilder.LazyHolder<>(p_312323_, resourcekey);
+                        lazyholder.supplier = () -> cloner.clone((T) p_311506_.value(), p_312725_, p_311797_.getValue());
+                        return lazyholder;
+                    });
                 });
-            });
-            Lifecycle lifecycle = registrylookup.registryLifecycle().add(registrylookup1.registryLifecycle());
+                lifecycle = registrylookup.registryLifecycle().add(registrylookup1.registryLifecycle());
+            } else {
+                lifecycle = registrylookup.registryLifecycle();
+            }
             return lookupFromMap(p_311836_, lifecycle, map);
         }
     }
@@ -191,7 +_,7 @@
             RegistrySetBuilder.UniversalLookup registrysetbuilder$universallookup = new RegistrySetBuilder.UniversalLookup(registrysetbuilder$compositeowner);
             Builder<ResourceLocation, HolderGetter<?>> builder = ImmutableMap.builder();
             p_255995_.registries()
-                .forEach(p_258197_ -> builder.put(p_258197_.key().location(), RegistrySetBuilder.wrapContextLookup(p_258197_.value().asLookup())));
+                .forEach(p_258197_ -> builder.put(p_258197_.key().location(), net.neoforged.neoforge.common.CommonHooks.wrapRegistryLookup(p_258197_.value().asLookup())));
             p_256495_.forEach(p_256603_ -> builder.put(p_256603_.location(), registrysetbuilder$universallookup));
             return new RegistrySetBuilder.BuildState(
                 registrysetbuilder$compositeowner, registrysetbuilder$universallookup, builder.build(), new HashMap<>(), list
@@ -215,6 +_,11 @@
                 @Override
                 public <S> HolderGetter<S> lookup(ResourceKey<? extends Registry<? extends S>> p_255961_) {
                     return (HolderGetter<S>)BuildState.this.registries.getOrDefault(p_255961_.location(), BuildState.this.lookup);
+                }
+
+                @Override
+                public <S> Optional<HolderLookup.RegistryLookup<S>> registryLookup(ResourceKey<? extends Registry<? extends S>> registry) {
+                    return Optional.ofNullable((HolderLookup.RegistryLookup<S>) BuildState.this.registries.get(registry.location()));
                 }
             };
         }
