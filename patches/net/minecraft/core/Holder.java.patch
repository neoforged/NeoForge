--- a/net/minecraft/core/Holder.java
+++ b/net/minecraft/core/Holder.java
@@ -11,7 +_,7 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.TagKey;
 
-public interface Holder<T> {
+public interface Holder<T> extends net.neoforged.neoforge.common.extensions.IHolderExtension<T> {
     T value();
 
     boolean isBound();
@@ -220,6 +_,14 @@
             }
         }
 
+        @org.jetbrains.annotations.Nullable
+        public <A> A getData(net.neoforged.neoforge.registries.datamaps.DataMapType<T, A> type) {
+            if (owner instanceof HolderLookup.RegistryLookup<T> lookup) {
+                return lookup.getData(type, key());
+            }
+            return null;
+        }
+
         void bindTags(Collection<TagKey<T>> p_205770_) {
             this.tags = Set.copyOf(p_205770_);
         }
@@ -233,6 +_,35 @@
         public String toString() {
             return "Reference{" + this.key + "=" + this.value + "}";
         }
+
+        // Neo Start
+
+        // Neo: Add key getter that doesn't allocate
+        @Override
+        @org.jetbrains.annotations.Nullable
+        public ResourceKey<T> getKey() {
+            return this.key;
+        }
+
+        // Neo: Add DeferredHolder-compatible hashCode() and equals() overrides
+        @Override
+        public int hashCode() {
+            return key().hashCode();
+        }
+
+        @Override
+        public boolean equals(Object obj) {
+            if (this == obj) return true;
+            return obj instanceof Holder<?> h && h.kind() == Kind.REFERENCE && h.getKey() == this.key();
+        }
+
+        @Override
+        @org.jetbrains.annotations.Nullable
+        public HolderLookup.RegistryLookup<T> unwrapLookup() {
+            return this.owner instanceof HolderLookup.RegistryLookup<T> rl ? rl : null;
+        }
+
+        // Neo End
 
         protected static enum Type {
             STAND_ALONE,
