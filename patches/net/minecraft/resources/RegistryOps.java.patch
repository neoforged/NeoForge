--- a/net/minecraft/resources/RegistryOps.java
+++ b/net/minecraft/resources/RegistryOps.java
@@ -35,6 +_,11 @@
         this.lookupProvider = lookupProvider;
     }
 
+    protected RegistryOps(RegistryOps<T> other) {
+        super(other);
+        this.lookupProvider = other.lookupProvider;
+    }
+
     public <U> RegistryOps<U> withParent(DynamicOps<U> ops) {
         return (RegistryOps<U>)(ops == this.delegate ? this : new RegistryOps<>(ops, this.lookupProvider));
     }
@@ -74,6 +_,20 @@
                         : DataResult.error(() -> "Not a registry ops")
             )
             .forGetter(p_255526_ -> null);
+    }
+
+    public static <E> com.mojang.serialization.MapCodec<HolderLookup.RegistryLookup<E>> retrieveRegistryLookup(ResourceKey<? extends Registry<? extends E>> resourceKey) {
+        return ExtraCodecs.retrieveContext(ops -> {
+            if (!(ops instanceof RegistryOps<?> registryOps))
+                return DataResult.error(() -> "Not a registry ops");
+
+            return registryOps.lookupProvider.lookup(resourceKey).map(registryInfo -> {
+                if (!(registryInfo.owner() instanceof HolderLookup.RegistryLookup<E> registryLookup))
+                    return DataResult.<HolderLookup.RegistryLookup<E>>error(() -> "Found holder getter but was not a registry lookup for " + resourceKey);
+
+                return DataResult.success(registryLookup, registryInfo.elementsLifecycle());
+            }).orElseGet(() -> DataResult.error(() -> "Unknown registry: " + resourceKey));
+        });
     }
 
     public static <E, O> RecordCodecBuilder<O, Holder.Reference<E>> retrieveElement(ResourceKey<E> key) {
