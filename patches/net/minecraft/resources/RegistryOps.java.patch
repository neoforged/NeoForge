--- a/net/minecraft/resources/RegistryOps.java
+++ b/net/minecraft/resources/RegistryOps.java
@@ -45,6 +_,11 @@
       super(p_256313_);
       this.lookupProvider = p_255799_;
    }
+   
+   protected RegistryOps(RegistryOps<T> p_256313_) {
+      super(p_256313_);
+      this.lookupProvider = p_256313_.lookupProvider;
+   }
 
    public <E> Optional<HolderOwner<E>> owner(ResourceKey<? extends Registry<? extends E>> p_255757_) {
       return this.lookupProvider.lookup(p_255757_).map(RegistryOps.RegistryInfo::owner);
@@ -64,6 +_,20 @@
                   : DataResult.error(() -> "Not a registry ops")
          )
          .forGetter(p_255526_ -> null);
+   }
+
+   public static <E> com.mojang.serialization.MapCodec<HolderLookup.RegistryLookup<E>> retrieveRegistryLookup(ResourceKey<? extends Registry<? extends E>> resourceKey) {
+      return ExtraCodecs.retrieveContext(ops -> {
+         if (!(ops instanceof RegistryOps<?> registryOps))
+            return DataResult.error(() -> "Not a registry ops");
+
+         return registryOps.lookupProvider.lookup(resourceKey).map(registryInfo -> {
+            if (!(registryInfo.owner() instanceof HolderLookup.RegistryLookup<E> registryLookup))
+               return DataResult.<HolderLookup.RegistryLookup<E>>error(() -> "Found holder getter but was not a registry lookup for " + resourceKey);
+
+            return DataResult.success(registryLookup, registryInfo.elementsLifecycle());
+         }).orElseGet(() -> DataResult.error(() -> "Unknown registry: " + resourceKey));
+      });
    }
 
    public static <E, O> RecordCodecBuilder<O, Holder.Reference<E>> retrieveElement(ResourceKey<E> p_256347_) {
