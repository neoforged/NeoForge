--- a/net/minecraft/resources/RegistryDataLoader.java
+++ b/net/minecraft/resources/RegistryDataLoader.java
@@ -100,7 +_,7 @@
     public static final List<RegistryDataLoader.RegistryData<?>> DIMENSION_REGISTRIES = List.of(
         new RegistryDataLoader.RegistryData<>(Registries.LEVEL_STEM, LevelStem.CODEC)
     );
-    public static final List<RegistryDataLoader.RegistryData<?>> SYNCHRONIZED_REGISTRIES = List.of(
+    public static final List<RegistryDataLoader.RegistryData<?>> SYNCHRONIZED_REGISTRIES = net.neoforged.neoforge.registries.DataPackRegistriesHooks.grabNetworkableRegistries(List.of(
         new RegistryDataLoader.RegistryData<>(Registries.BIOME, Biome.NETWORK_CODEC),
         new RegistryDataLoader.RegistryData<>(Registries.CHAT_TYPE, ChatType.DIRECT_CODEC),
         new RegistryDataLoader.RegistryData<>(Registries.TRIM_PATTERN, TrimPattern.DIRECT_CODEC),
@@ -112,7 +_,7 @@
         new RegistryDataLoader.RegistryData<>(Registries.BANNER_PATTERN, BannerPattern.DIRECT_CODEC),
         new RegistryDataLoader.RegistryData<>(Registries.ENCHANTMENT, Enchantment.DIRECT_CODEC),
         new RegistryDataLoader.RegistryData<>(Registries.JUKEBOX_SONG, JukeboxSong.DIRECT_CODEC)
-    );
+    )); // Neo: Keep the list so custom registries can be added later
 
     public static RegistryAccess.Frozen load(ResourceManager resourceManager, RegistryAccess registryAccess, List<RegistryDataLoader.RegistryData<?>> registryData) {
         return load((p_321412_, p_321413_) -> p_321412_.loadFromResources(resourceManager, p_321413_), registryAccess, registryData);
@@ -204,11 +_,16 @@
         Resource resource,
         RegistrationInfo registrationInfo
     ) throws IOException {
+        Decoder<Optional<E>> decoder = net.neoforged.neoforge.common.conditions.ConditionalOps.createConditionalCodec(net.neoforged.neoforge.common.util.NeoForgeExtraCodecs.decodeOnly(codec));
         try (Reader reader = resource.openAsReader()) {
             JsonElement jsonelement = JsonParser.parseReader(reader);
-            DataResult<E> dataresult = codec.parse(ops, jsonelement);
-            E e = dataresult.getOrThrow();
+            DataResult<Optional<E>> dataresult = decoder.parse(ops, jsonelement);
+            Optional<E> candidate = dataresult.getOrThrow();
+            candidate.ifPresentOrElse(e -> {
             registry.register(resourceKey, e, registrationInfo);
+            }, () -> {
+                LOGGER.debug("Skipping loading registry entry {} as its conditions were not met", resourceKey);
+            });
         }
     }
 
@@ -221,7 +_,7 @@
     ) {
         String s = Registries.elementsDirPath(registry.key());
         FileToIdConverter filetoidconverter = FileToIdConverter.json(s);
-        RegistryOps<JsonElement> registryops = RegistryOps.create(JsonOps.INSTANCE, registryInfoLookup);
+        RegistryOps<JsonElement> registryops = new net.neoforged.neoforge.common.conditions.ConditionalOps<>(RegistryOps.create(JsonOps.INSTANCE, registryInfoLookup), net.neoforged.neoforge.common.conditions.ICondition.IContext.TAGS_INVALID);
 
         for (Entry<ResourceLocation, Resource> entry : filetoidconverter.listMatchingResources(resourceManager).entrySet()) {
             ResourceLocation resourcelocation = entry.getKey();
