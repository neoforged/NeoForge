--- a/net/minecraft/resources/RegistryDataLoader.java
+++ b/net/minecraft/resources/RegistryDataLoader.java
@@ -112,7 +_,7 @@
     public static final List<RegistryDataLoader.RegistryData<?>> DIMENSION_REGISTRIES = List.of(
         new RegistryDataLoader.RegistryData<>(Registries.LEVEL_STEM, LevelStem.CODEC)
     );
-    public static final List<RegistryDataLoader.RegistryData<?>> SYNCHRONIZED_REGISTRIES = List.of(
+    public static final List<RegistryDataLoader.RegistryData<?>> SYNCHRONIZED_REGISTRIES = net.neoforged.neoforge.registries.DataPackRegistriesHooks.grabNetworkableRegistries(List.of(
         new RegistryDataLoader.RegistryData<>(Registries.BIOME, Biome.NETWORK_CODEC),
         new RegistryDataLoader.RegistryData<>(Registries.CHAT_TYPE, ChatType.DIRECT_CODEC),
         new RegistryDataLoader.RegistryData<>(Registries.TRIM_PATTERN, TrimPattern.DIRECT_CODEC),
@@ -125,7 +_,7 @@
         new RegistryDataLoader.RegistryData<>(Registries.ENCHANTMENT, Enchantment.DIRECT_CODEC),
         new RegistryDataLoader.RegistryData<>(Registries.JUKEBOX_SONG, JukeboxSong.DIRECT_CODEC),
         new RegistryDataLoader.RegistryData<>(Registries.INSTRUMENT, Instrument.DIRECT_CODEC)
-    );
+    )); // Neo: Keep the list so custom registries can be added later
 
     public static RegistryAccess.Frozen load(
         ResourceManager p_364116_, List<HolderLookup.RegistryLookup<?>> p_321716_, List<RegistryDataLoader.RegistryData<?>> p_365382_
@@ -247,11 +_,16 @@
         Resource p_326141_,
         RegistrationInfo p_326033_
     ) throws IOException {
+        Decoder<Optional<E>> decoder = net.neoforged.neoforge.common.conditions.ConditionalOps.createConditionalCodec(net.neoforged.neoforge.common.util.NeoForgeExtraCodecs.decodeOnly(p_326476_));
         try (Reader reader = p_326141_.openAsReader()) {
             JsonElement jsonelement = JsonParser.parseReader(reader);
-            DataResult<E> dataresult = p_326476_.parse(p_325932_, jsonelement);
-            E e = dataresult.getOrThrow();
+            DataResult<Optional<E>> dataresult = decoder.parse(p_325932_, jsonelement);
+            Optional<E> candidate = dataresult.getOrThrow();
+            candidate.ifPresentOrElse(e -> {
             p_326195_.register(p_326054_, e, p_326033_);
+            }, () -> {
+                LOGGER.debug("Skipping loading registry entry {} as its conditions were not met", p_326054_);
+            });
         }
     }
 
@@ -264,7 +_,7 @@
     ) {
         String s = Registries.elementsDirPath(p_321557_.key());
         FileToIdConverter filetoidconverter = FileToIdConverter.json(s);
-        RegistryOps<JsonElement> registryops = RegistryOps.create(JsonOps.INSTANCE, p_321612_);
+        RegistryOps<JsonElement> registryops = new net.neoforged.neoforge.common.conditions.ConditionalOps<>(RegistryOps.create(JsonOps.INSTANCE, p_321612_), net.neoforged.neoforge.common.conditions.ICondition.IContext.TAGS_INVALID);
 
         for (Entry<ResourceLocation, Resource> entry : filetoidconverter.listMatchingResources(p_321535_).entrySet()) {
             ResourceLocation resourcelocation = entry.getKey();
@@ -354,13 +_,20 @@
     public static record NetworkedRegistryData(List<RegistrySynchronization.PackedRegistryEntry> elements, TagNetworkSerialization.NetworkPayload tags) {
     }
 
-    public static record RegistryData<T>(ResourceKey<? extends Registry<T>> key, Codec<T> elementCodec, boolean requiredNonEmpty) {
+    public static record RegistryData<T>(ResourceKey<? extends Registry<T>> key, Codec<T> elementCodec, boolean requiredNonEmpty, java.util.function.Consumer<net.neoforged.neoforge.registries.RegistryBuilder<T>> registryBuilderConsumer) {
+        public RegistryData(ResourceKey<? extends Registry<T>> key, Codec<T> elementCodec, boolean requiredNonEmpty) {
+            this(key, elementCodec, requiredNonEmpty, registryBuilder -> {});
+        }
+
         RegistryData(ResourceKey<? extends Registry<T>> p_251360_, Codec<T> p_248976_) {
             this(p_251360_, p_248976_, false);
         }
 
         RegistryDataLoader.Loader<T> create(Lifecycle p_251662_, Map<ResourceKey<?>, Exception> p_251565_) {
-            WritableRegistry<T> writableregistry = new MappedRegistry<>(this.key, p_251662_);
+            net.neoforged.neoforge.registries.RegistryBuilder<T> registryBuilder = new net.neoforged.neoforge.registries.RegistryBuilder<>(key);
+            registryBuilderConsumer.accept(registryBuilder);
+
+            WritableRegistry<T> writableregistry = (WritableRegistry<T>) registryBuilder.disableRegistrationCheck().create();
             return new RegistryDataLoader.Loader<>(this, writableregistry, p_251565_);
         }
 
