--- a/net/minecraft/world/effect/MobEffectInstance.java
+++ b/net/minecraft/world/effect/MobEffectInstance.java
@@ -80,10 +_,14 @@
         this.visible = p_19532_;
         this.showIcon = p_19533_;
         this.hiddenEffect = p_316863_;
+        this.effect.value().fillEffectCures(this.cures, this);
+        this.defaultCures = com.google.common.collect.ImmutableSet.copyOf(this.cures);
     }
 
     public MobEffectInstance(MobEffectInstance p_19543_) {
         this.effect = p_19543_.effect;
+        this.effect.value().fillEffectCures(this.cures, this);
+        this.defaultCures = com.google.common.collect.ImmutableSet.copyOf(this.cures);
         this.setDetailsFrom(p_19543_);
     }
 
@@ -97,6 +_,11 @@
             p_324529_.showIcon(),
             p_324529_.hiddenEffect().map(p_323227_ -> new MobEffectInstance(p_324441_, p_323227_)).orElse(null)
         );
+        p_324529_.cures.ifPresent(cures -> {
+            java.util.Set<net.neoforged.neoforge.common.EffectCure> newCures = com.google.common.collect.Sets.newIdentityHashSet();
+            newCures.addAll(cures);
+            this.setCures(newCures);
+        });
     }
 
     private MobEffectInstance.Details asDetails() {
@@ -106,7 +_,8 @@
             this.isAmbient(),
             this.isVisible(),
             this.showIcon(),
-            Optional.ofNullable(this.hiddenEffect).map(MobEffectInstance::asDetails)
+            Optional.ofNullable(this.hiddenEffect).map(MobEffectInstance::asDetails),
+            this.cures.equals(this.defaultCures) ? Optional.empty() : Optional.of(this.cures)
         );
     }
 
@@ -124,6 +_,7 @@
         this.ambient = p_19549_.ambient;
         this.visible = p_19549_.visible;
         this.showIcon = p_19549_.showIcon;
+        this.setCures(p_19549_);
     }
 
     public boolean update(MobEffectInstance p_19559_) {
@@ -141,14 +_,23 @@
 
             this.amplifier = p_19559_.amplifier;
             this.duration = p_19559_.duration;
+            // Neo: use the cures of the stronger effect
+            this.setCures(p_19559_);
             flag = true;
         } else if (this.isShorterDurationThan(p_19559_)) {
             if (p_19559_.amplifier == this.amplifier) {
                 this.duration = p_19559_.duration;
+                // Neo: use the cures of the longer effect
+                this.setCures(p_19559_);
                 flag = true;
             } else if (this.hiddenEffect == null) {
                 this.hiddenEffect = new MobEffectInstance(p_19559_);
+                // Neo: make the new hidden effect use this effect's cures
+                this.hiddenEffect.setCures(this);
             } else {
+                // Neo: update the hidden effect with the input effect using the correct cures
+                p_19559_ = new MobEffectInstance(p_19559_);
+                p_19559_.setCures(this);
                 this.hiddenEffect.update(p_19559_);
             }
         }
@@ -324,11 +_,11 @@
                 .compareFalseFirst(this.isAmbient(), p_19566_.isAmbient())
                 .compareFalseFirst(this.isInfiniteDuration(), p_19566_.isInfiniteDuration())
                 .compare(this.getDuration(), p_19566_.getDuration())
-                .compare(this.getEffect().value().getColor(), p_19566_.getEffect().value().getColor())
+                .compare(this.getEffect().value().getSortOrder(this), p_19566_.getEffect().value().getSortOrder(p_19566_))
                 .result()
             : ComparisonChain.start()
                 .compare(this.isAmbient(), p_19566_.isAmbient())
-                .compare(this.getEffect().value().getColor(), p_19566_.getEffect().value().getColor())
+                .compare(this.getEffect().value().getSortOrder(this), p_19566_.getEffect().value().getSortOrder(p_19566_))
                 .result();
     }
 
@@ -348,6 +_,48 @@
         this.blendState.setImmediate(this);
     }
 
+    private final net.neoforged.neoforge.common.util.SetReference<net.neoforged.neoforge.common.EffectCure, java.util.Set<net.neoforged.neoforge.common.EffectCure>> cures =
+            new net.neoforged.neoforge.common.util.SetReference<>(com.google.common.collect.Sets.newIdentityHashSet());
+    private final java.util.Set<net.neoforged.neoforge.common.EffectCure> defaultCures;
+
+    /**
+     * @return an <a href="#unmodifiable">unmodifiable</a> view of the {@link net.neoforged.neoforge.common.EffectCure cures} which can cure the {@link MobEffect} held by this {@link MobEffectInstance}.
+     * <p>
+     * May differ from the set returned by {@link #getCures()} as cures may be modified.
+     * @see net.neoforged.neoforge.common.extensions.IMobEffectExtension#fillEffectCures(java.util.Set, MobEffectInstance)
+     */
+    public java.util.Set<net.neoforged.neoforge.common.EffectCure> getDefaultCures() {
+        return this.defaultCures;
+    }
+
+    /**
+     * @return the {@link net.neoforged.neoforge.common.EffectCure cures} which can cure this {@link MobEffectInstance}.
+     */
+    public java.util.Set<net.neoforged.neoforge.common.EffectCure> getCures() {
+        return this.cures;
+    }
+
+    /**
+     * Set the {@link #cures} of this {@link MobEffectInstance} with new cures,
+     * this will recursively set the {@link #cures} of the {@link #hiddenEffect},
+     * so the cures of hidden effects always matches the active effect.<br>
+     * @param cures the new cures.
+     */
+    private void setCures(java.util.Set<net.neoforged.neoforge.common.EffectCure> cures) {
+        if (this.hiddenEffect != null) {
+            this.hiddenEffect.setCures(cures);
+        }
+        this.cures.set(cures);
+    }
+
+    /**
+     * Set the {@link #cures} of this {@link MobEffectInstance} with the {@link #cures} of another {@link MobEffectInstance}.
+     * @param mobEffectInstance the {@link MobEffectInstance} to copy the cures.
+     */
+    private void setCures(MobEffectInstance mobEffectInstance) {
+        this.setCures(mobEffectInstance.cures.get());
+    }
+
     static class BlendState {
         private float factor;
         private float factorPreviousFrame;
@@ -395,8 +_,7 @@
     }
 
     static record Details(
-        int amplifier, int duration, boolean ambient, boolean showParticles, boolean showIcon, Optional<MobEffectInstance.Details> hiddenEffect
-    ) {
+        int amplifier, int duration, boolean ambient, boolean showParticles, boolean showIcon, Optional<MobEffectInstance.Details> hiddenEffect, Optional<java.util.Set<net.neoforged.neoforge.common.EffectCure>> cures) {
         public static final MapCodec<MobEffectInstance.Details> MAP_CODEC = MapCodec.recursive(
             "MobEffectInstance.Details",
             p_323465_ -> RecordCodecBuilder.mapCodec(
@@ -407,12 +_,14 @@
                                 Codec.BOOL.optionalFieldOf("show_particles", Boolean.valueOf(true)).forGetter(MobEffectInstance.Details::showParticles),
                                 Codec.BOOL.optionalFieldOf("show_icon").forGetter(p_323788_ -> Optional.of(p_323788_.showIcon())),
                                 p_323465_.optionalFieldOf("hidden_effect").forGetter(MobEffectInstance.Details::hiddenEffect)
+                                // Neo: Add additional serialization logic for custom EffectCure(s)
+                                , net.neoforged.neoforge.common.util.NeoForgeExtraCodecs.setOf(net.neoforged.neoforge.common.EffectCure.CODEC).optionalFieldOf("neoforge:cures").forGetter(MobEffectInstance.Details::cures)
                             )
                             .apply(p_324063_, MobEffectInstance.Details::create)
                 )
         );
-        public static final StreamCodec<ByteBuf, MobEffectInstance.Details> STREAM_CODEC = StreamCodec.recursive(
-            p_329990_ -> StreamCodec.composite(
+        public static final StreamCodec<RegistryFriendlyByteBuf, MobEffectInstance.Details> STREAM_CODEC = StreamCodec.recursive(
+            p_329990_ -> net.neoforged.neoforge.network.codec.NeoForgeStreamCodecs.composite(
                     ByteBufCodecs.VAR_INT,
                     MobEffectInstance.Details::amplifier,
                     ByteBufCodecs.VAR_INT,
@@ -425,6 +_,12 @@
                     MobEffectInstance.Details::showIcon,
                     p_329990_.apply(ByteBufCodecs::optional),
                     MobEffectInstance.Details::hiddenEffect,
+                    // Neo: Add additional serialization logic for custom EffectCure(s)
+                    net.neoforged.neoforge.network.codec.NeoForgeStreamCodecs.connectionAware(
+                            ByteBufCodecs.optional(net.neoforged.neoforge.common.EffectCure.STREAM_CODEC.apply(ByteBufCodecs.collection(java.util.HashSet::new))),
+                            net.neoforged.neoforge.network.codec.NeoForgeStreamCodecs.uncheckedUnit(Optional.empty())
+                    ),
+                    MobEffectInstance.Details::cures,
                     MobEffectInstance.Details::new
                 )
         );
@@ -434,5 +_,17 @@
         ) {
             return new MobEffectInstance.Details(p_323657_, p_324205_, p_324263_, p_324000_, p_323607_.orElse(p_324000_), p_324604_);
         }
+
+        private static MobEffectInstance.Details create(
+            int p_323657_, int p_324205_, boolean p_324263_, boolean p_324000_, Optional<Boolean> p_323607_, Optional<MobEffectInstance.Details> p_324604_, Optional<java.util.Set<net.neoforged.neoforge.common.EffectCure>> cures
+        ) {
+            return new MobEffectInstance.Details(p_323657_, p_324205_, p_324263_, p_324000_, p_323607_.orElse(p_324000_), p_324604_, cures);
+        }
+
+        @Deprecated
+        Details(int amplifier, int duration, boolean ambient, boolean showParticles, boolean showIcon, Optional<MobEffectInstance.Details> hiddenEffect) {
+            this(amplifier, duration, ambient, showParticles, showIcon, hiddenEffect, Optional.empty());
+        }
+
     }
 }
