--- a/net/minecraft/world/effect/MobEffectInstance.java
+++ b/net/minecraft/world/effect/MobEffectInstance.java
@@ -80,6 +_,7 @@
         this.visible = visible;
         this.showIcon = showIcon;
         this.hiddenEffect = hiddenEffect;
+        this.effect.value().fillEffectCures(this.cures, this);
     }
 
     public MobEffectInstance(MobEffectInstance other) {
@@ -97,6 +_,8 @@
             details.showIcon(),
             details.hiddenEffect().map(p_323227_ -> new MobEffectInstance(effect, p_323227_)).orElse(null)
         );
+        this.cures.clear();
+        details.cures().ifPresent(this.cures::addAll);
     }
 
     private MobEffectInstance.Details asDetails() {
@@ -106,7 +_,8 @@
             this.isAmbient(),
             this.isVisible(),
             this.showIcon(),
-            Optional.ofNullable(this.hiddenEffect).map(MobEffectInstance::asDetails)
+            Optional.ofNullable(this.hiddenEffect).map(MobEffectInstance::asDetails),
+            Optional.of(this.getCures()).filter(cures -> !cures.isEmpty())
         );
     }
 
@@ -124,6 +_,8 @@
         this.ambient = effectInstance.ambient;
         this.visible = effectInstance.visible;
         this.showIcon = effectInstance.showIcon;
+        this.cures.clear();
+        this.cures.addAll(effectInstance.cures);
     }
 
     public boolean update(MobEffectInstance other) {
@@ -324,11 +_,11 @@
                 .compareFalseFirst(this.isAmbient(), other.isAmbient())
                 .compareFalseFirst(this.isInfiniteDuration(), other.isInfiniteDuration())
                 .compare(this.getDuration(), other.getDuration())
-                .compare(this.getEffect().value().getColor(), other.getEffect().value().getColor())
+                .compare(this.getEffect().value().getSortOrder(this), other.getEffect().value().getSortOrder(other))
                 .result()
             : ComparisonChain.start()
                 .compare(this.isAmbient(), other.isAmbient())
-                .compare(this.getEffect().value().getColor(), other.getEffect().value().getColor())
+                .compare(this.getEffect().value().getSortOrder(this), other.getEffect().value().getSortOrder(other))
                 .result();
     }
 
@@ -348,6 +_,15 @@
         this.blendState.setImmediate(this);
     }
 
+    private final java.util.Set<net.neoforged.neoforge.common.EffectCure> cures = com.google.common.collect.Sets.newIdentityHashSet();
+
+    /**
+     * {@return the {@link net.neoforged.neoforge.common.EffectCure}s which can cure the {@link MobEffect} held by this {@link MobEffectInstance}}
+     */
+    public java.util.Set<net.neoforged.neoforge.common.EffectCure> getCures() {
+        return cures;
+    }
+
     static class BlendState {
         private float factor;
         private float factorPreviousFrame;
@@ -395,8 +_,7 @@
     }
 
     static record Details(
-        int amplifier, int duration, boolean ambient, boolean showParticles, boolean showIcon, Optional<MobEffectInstance.Details> hiddenEffect
-    ) {
+        int amplifier, int duration, boolean ambient, boolean showParticles, boolean showIcon, Optional<MobEffectInstance.Details> hiddenEffect, Optional<java.util.Set<net.neoforged.neoforge.common.EffectCure>> cures) {
         public static final MapCodec<MobEffectInstance.Details> MAP_CODEC = MapCodec.recursive(
             "MobEffectInstance.Details",
             p_323465_ -> RecordCodecBuilder.mapCodec(
@@ -407,12 +_,14 @@
                                 Codec.BOOL.optionalFieldOf("show_particles", Boolean.valueOf(true)).forGetter(MobEffectInstance.Details::showParticles),
                                 Codec.BOOL.optionalFieldOf("show_icon").forGetter(p_323788_ -> Optional.of(p_323788_.showIcon())),
                                 p_323465_.optionalFieldOf("hidden_effect").forGetter(MobEffectInstance.Details::hiddenEffect)
+                                // Neo: Add additional serialization logic for custom EffectCure(s)
+                                , net.neoforged.neoforge.common.util.NeoForgeExtraCodecs.setOf(net.neoforged.neoforge.common.EffectCure.CODEC).optionalFieldOf("neoforge:cures").forGetter(MobEffectInstance.Details::cures)
                             )
                             .apply(p_324063_, MobEffectInstance.Details::create)
                 )
         );
-        public static final StreamCodec<ByteBuf, MobEffectInstance.Details> STREAM_CODEC = StreamCodec.recursive(
-            p_329990_ -> StreamCodec.composite(
+        public static final StreamCodec<RegistryFriendlyByteBuf, MobEffectInstance.Details> STREAM_CODEC = StreamCodec.recursive(
+            p_329990_ -> net.neoforged.neoforge.network.codec.NeoForgeStreamCodecs.composite(
                     ByteBufCodecs.VAR_INT,
                     MobEffectInstance.Details::amplifier,
                     ByteBufCodecs.VAR_INT,
@@ -425,6 +_,12 @@
                     MobEffectInstance.Details::showIcon,
                     p_329990_.apply(ByteBufCodecs::optional),
                     MobEffectInstance.Details::hiddenEffect,
+                    // Neo: Add additional serialization logic for custom EffectCure(s)
+                    net.neoforged.neoforge.network.codec.NeoForgeStreamCodecs.connectionAware(
+                            ByteBufCodecs.optional(net.neoforged.neoforge.common.EffectCure.STREAM_CODEC.apply(ByteBufCodecs.collection(java.util.HashSet::new))),
+                            net.neoforged.neoforge.network.codec.NeoForgeStreamCodecs.uncheckedUnit(Optional.empty())
+                    ),
+                    MobEffectInstance.Details::cures,
                     MobEffectInstance.Details::new
                 )
         );
@@ -434,5 +_,17 @@
         ) {
             return new MobEffectInstance.Details(amplifier, duration, ambient, showParticles, showIcon.orElse(showParticles), hiddenEffect);
         }
+
+        private static MobEffectInstance.Details create(
+            int amplifier, int duration, boolean ambient, boolean showParticles, Optional<Boolean> showIcon, Optional<MobEffectInstance.Details> hiddenEffect, Optional<java.util.Set<net.neoforged.neoforge.common.EffectCure>> cures
+        ) {
+            return new MobEffectInstance.Details(amplifier, duration, ambient, showParticles, showIcon.orElse(showParticles), hiddenEffect, cures);
+        }
+
+        @Deprecated
+        Details(int amplifier, int duration, boolean ambient, boolean showParticles, boolean showIcon, Optional<MobEffectInstance.Details> hiddenEffect) {
+            this(amplifier, duration, ambient, showParticles, showIcon, hiddenEffect, Optional.empty());
+        }
+
     }
 }
