--- a/net/minecraft/world/effect/MobEffect.java
+++ b/net/minecraft/world/effect/MobEffect.java
@@ -35,7 +_,7 @@
 import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.flag.FeatureFlags;
 
-public class MobEffect implements FeatureElement {
+public class MobEffect implements FeatureElement, net.neoforged.neoforge.common.extensions.IMobEffectExtension {
     public static final Codec<Holder<MobEffect>> CODEC = BuiltInRegistries.MOB_EFFECT.holderByNameCodec();
     public static final StreamCodec<RegistryFriendlyByteBuf, Holder<MobEffect>> STREAM_CODEC = ByteBufCodecs.holderRegistry(Registries.MOB_EFFECT);
     private static final int AMBIENT_ALPHA = Mth.floor(38.25F);
@@ -48,6 +_,7 @@
     private int blendDurationTicks;
     private Optional<SoundEvent> soundOnAdded = Optional.empty();
     private FeatureFlagSet requiredFeatures = FeatureFlags.VANILLA_SET;
+    private java.util.Set<net.neoforged.neoforge.flag.Flag> requiredFlags = new java.util.HashSet<>();
 
     protected MobEffect(MobEffectCategory p_19451_, int p_19452_) {
         this.category = p_19451_;
@@ -130,6 +_,18 @@
         return this;
     }
 
+    /**
+     * Neo: attribute template with custom level curve, for mob effects providing non-linear attribute modifiers.
+     * @param attribute The attribute of the modifier
+     * @param id ID of the modifier
+     * @param operation Operation of the modifier
+     * @param curve A function mapping effect instance amplifier to modifier amount
+     */
+    public MobEffect addAttributeModifier(Holder<Attribute> attribute, ResourceLocation id, AttributeModifier.Operation operation, it.unimi.dsi.fastutil.ints.Int2DoubleFunction curve) {
+        this.attributeModifiers.put(attribute, new MobEffect.AttributeTemplate(id, curve.apply(0), operation, curve));
+        return this;
+    }
+
     public MobEffect setBlendDuration(int p_316265_) {
         this.blendDurationTicks = p_316265_;
         return this;
@@ -171,6 +_,10 @@
         return this;
     }
 
+    /**
+     * @deprecated Prefer {@linkplain #requiredFlags(net.neoforged.neoforge.flag.Flag...)}
+     */
+    @Deprecated
     public MobEffect requiredFeatures(FeatureFlag... p_338702_) {
         this.requiredFeatures = FeatureFlags.REGISTRY.subset(p_338702_);
         return this;
@@ -181,8 +_,34 @@
         return this.requiredFeatures;
     }
 
-    static record AttributeTemplate(ResourceLocation id, double amount, AttributeModifier.Operation operation) {
+    public MobEffect requiredFlags(net.neoforged.neoforge.flag.Flag... requiredFlags) {
+        java.util.Collections.addAll(this.requiredFlags, requiredFlags);
+        return this;
+    }
+
+    @Override
+    public java.util.Set<net.neoforged.neoforge.flag.Flag> requiredFlags() {
+        return requiredFlags;
+    }
+
+    /**
+     * Neo: Allowing mods to define client behavior for their MobEffects
+     * @deprecated Use {@link net.neoforged.neoforge.client.extensions.common.RegisterClientExtensionsEvent} instead
+     */
+    @Deprecated(forRemoval = true, since = "1.21")
+    public void initializeClient(java.util.function.Consumer<net.neoforged.neoforge.client.extensions.common.IClientMobEffectExtensions> consumer) {
+    }
+
+    static record AttributeTemplate(ResourceLocation id, double amount, AttributeModifier.Operation operation, @Nullable it.unimi.dsi.fastutil.ints.Int2DoubleFunction curve) {
+
+        public AttributeTemplate(ResourceLocation id, double amount, AttributeModifier.Operation operation) {
+            this(id, amount, operation, null);
+        }
+
         public AttributeModifier create(int p_316614_) {
+            if (curve != null) { // Neo: Use the custom attribute value curve if one is present
+                return new AttributeModifier(this.id, this.curve.apply(p_316614_), this.operation);
+            }
             return new AttributeModifier(this.id, this.amount * (double)(p_316614_ + 1), this.operation);
         }
     }
