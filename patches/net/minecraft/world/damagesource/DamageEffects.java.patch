--- a/net/minecraft/world/damagesource/DamageEffects.java
+++ b/net/minecraft/world/damagesource/DamageEffects.java
@@ -5,7 +_,9 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.util.StringRepresentable;
 
-public enum DamageEffects implements StringRepresentable {
+@net.neoforged.fml.common.asm.enumextension.NamedEnum
+@net.neoforged.fml.common.asm.enumextension.NetworkedEnum(net.neoforged.fml.common.asm.enumextension.NetworkedEnum.NetworkCheck.CLIENTBOUND)
+public enum DamageEffects implements StringRepresentable, net.neoforged.fml.common.asm.enumextension.IExtensibleEnum {
     HURT("hurt", SoundEvents.PLAYER_HURT),
     THORNS("thorns", SoundEvents.THORNS_HIT),
     DROWNING("drowning", SoundEvents.PLAYER_HURT_DROWN),
@@ -15,11 +_,19 @@
 
     public static final Codec<DamageEffects> CODEC = StringRepresentable.fromEnum(DamageEffects::values);
     private final String id;
+    @Deprecated // Neo: Always set to null. Use the getter.
     private final SoundEvent sound;
+    private final java.util.function.Supplier<SoundEvent> soundSupplier;
 
+    @net.neoforged.fml.common.asm.enumextension.ReservedConstructor
     private DamageEffects(String p_270875_, SoundEvent p_270383_) {
-        this.id = p_270875_;
-        this.sound = p_270383_;
+        this(p_270875_, () -> p_270383_);
+    }
+
+    private DamageEffects(String id, java.util.function.Supplier<SoundEvent> sound) {
+        this.id = id;
+        this.soundSupplier = sound;
+        this.sound = null;
     }
 
     @Override
@@ -28,6 +_,10 @@
     }
 
     public SoundEvent sound() {
-        return this.sound;
+        return this.soundSupplier.get();
+    }
+
+    public static net.neoforged.fml.common.asm.enumextension.ExtensionInfo getExtensionInfo() {
+        return net.neoforged.fml.common.asm.enumextension.ExtensionInfo.nonExtended(DamageEffects.class);
     }
 }
