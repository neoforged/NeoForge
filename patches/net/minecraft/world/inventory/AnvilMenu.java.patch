--- a/net/minecraft/world/inventory/AnvilMenu.java
+++ b/net/minecraft/world/inventory/AnvilMenu.java
@@ -79,6 +_,8 @@
             p_150474_.giveExperienceLevels(-this.cost.get());
         }
 
+        float breakChance = net.neoforged.neoforge.common.CommonHooks.onAnvilRepair(p_150474_, p_150475_, AnvilMenu.this.inputSlots.getItem(0), AnvilMenu.this.inputSlots.getItem(1));
+
         if (this.repairItemCountCost > 0) {
             ItemStack itemstack = this.inputSlots.getItem(1);
             if (!itemstack.isEmpty() && itemstack.getCount() > this.repairItemCountCost) {
@@ -95,7 +_,7 @@
         this.inputSlots.setItem(0, ItemStack.EMPTY);
         this.access.execute((p_150479_, p_150480_) -> {
             BlockState blockstate = p_150479_.getBlockState(p_150480_);
-            if (!p_150474_.hasInfiniteMaterials() && blockstate.is(BlockTags.ANVIL) && p_150474_.getRandom().nextFloat() < 0.12F) {
+            if (!p_150474_.getAbilities().instabuild && blockstate.is(BlockTags.ANVIL) && p_150474_.getRandom().nextFloat() < breakChance) {
                 BlockState blockstate1 = AnvilBlock.damage(blockstate);
                 if (blockstate1 == null) {
                     p_150479_.removeBlock(p_150480_, false);
@@ -125,8 +_,10 @@
             j += (long)itemstack.getOrDefault(DataComponents.REPAIR_COST, Integer.valueOf(0)).intValue()
                 + (long)itemstack2.getOrDefault(DataComponents.REPAIR_COST, Integer.valueOf(0)).intValue();
             this.repairItemCountCost = 0;
+            boolean flag = false;
+            if (!net.neoforged.neoforge.common.CommonHooks.onAnvilChange(this, itemstack, itemstack2, resultSlots, itemName, j, this.player)) return;
             if (!itemstack2.isEmpty()) {
-                boolean flag = itemstack2.has(DataComponents.STORED_ENCHANTMENTS);
+                flag = itemstack2.has(DataComponents.STORED_ENCHANTMENTS);
                 if (itemstack1.isDamageableItem() && itemstack.isValidRepairItem(itemstack2)) {
                     int l2 = Math.min(itemstack1.getDamageValue(), itemstack1.getMaxDamage() / 4);
                     if (l2 <= 0) {
@@ -177,8 +_,10 @@
                         int j2 = entry.getIntValue();
                         j2 = i2 == j2 ? j2 + 1 : Math.max(j2, i2);
                         Enchantment enchantment = holder.value();
-                        boolean flag1 = enchantment.canEnchant(itemstack);
-                        if (this.player.getAbilities().instabuild || itemstack.is(Items.ENCHANTED_BOOK)) {
+                        // Neo: Respect IItemExtension#supportsEnchantment - we also delegate the logic for Enchanted Books to this method.
+                        // Though we still allow creative players to combine any item with any enchantment in the anvil here.
+                        boolean flag1 = itemstack.supportsEnchantment(holder);
+                        if (this.player.getAbilities().instabuild) {
                             flag1 = true;
                         }
 
@@ -229,6 +_,7 @@
                 i += k;
                 itemstack1.remove(DataComponents.CUSTOM_NAME);
             }
+            if (flag && !itemstack1.isBookEnchantable(itemstack2)) itemstack1 = ItemStack.EMPTY;
 
             int k2 = i <= 0 ? 0 : (int)Mth.clamp(j + (long)i, 0L, 2147483647L);
             this.cost.set(k2);
@@ -302,5 +_,12 @@
 
     public int getCost() {
         return this.cost.get();
+    }
+
+    /**
+     * Neo: Sets the cost. Will be clamped to an integer.
+     */
+    public void setMaximumCost(long value) {
+        this.cost.set((int)Mth.clamp(value, 0L, Integer.MAX_VALUE));
     }
 }
