--- a/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -38,6 +_,7 @@
         }
     };
     private final ContainerLevelAccess access;
+    private int xp = -1;
 
     public GrindstoneMenu(int containerId, Inventory playerInventory) {
         this(containerId, playerInventory, ContainerLevelAccess.NULL);
@@ -49,13 +_,13 @@
         this.addSlot(new Slot(this.repairSlots, 0, 49, 19) {
             @Override
             public boolean mayPlace(ItemStack p_39607_) {
-                return p_39607_.isDamageableItem() || EnchantmentHelper.hasAnyEnchantments(p_39607_);
+                return p_39607_.isDamageableItem() || EnchantmentHelper.hasAnyEnchantments(p_39607_) || p_39607_.canGrindstoneRepair();
             }
         });
         this.addSlot(new Slot(this.repairSlots, 1, 49, 40) {
             @Override
             public boolean mayPlace(ItemStack p_39616_) {
-                return p_39616_.isDamageableItem() || EnchantmentHelper.hasAnyEnchantments(p_39616_);
+                return p_39616_.isDamageableItem() || EnchantmentHelper.hasAnyEnchantments(p_39616_) || p_39616_.canGrindstoneRepair();
             }
         });
         this.addSlot(new Slot(this.resultSlots, 2, 129, 34) {
@@ -66,6 +_,7 @@
 
             @Override
             public void onTake(Player player, ItemStack stack) {
+                if (net.neoforged.neoforge.common.CommonHooks.onGrindstoneTake(GrindstoneMenu.this.repairSlots, access, this::getExperienceAmount)) return;
                 access.execute((p_39634_, p_39635_) -> {
                     if (p_39634_ instanceof ServerLevel) {
                         ExperienceOrb.award((ServerLevel)p_39634_, Vec3.atCenterOf(p_39635_), this.getExperienceAmount(p_39634_));
@@ -78,6 +_,7 @@
             }
 
             private int getExperienceAmount(Level level) {
+                if (xp > -1) return xp;
                 int l = 0;
                 l += this.getExperienceFromItem(GrindstoneMenu.this.repairSlots.getItem(0));
                 l += this.getExperienceFromItem(GrindstoneMenu.this.repairSlots.getItem(1));
@@ -131,6 +_,8 @@
 
     private ItemStack computeResult(ItemStack inputItem, ItemStack additionalItem) {
         boolean flag = !inputItem.isEmpty() || !additionalItem.isEmpty();
+        this.xp = net.neoforged.neoforge.common.CommonHooks.onGrindstoneChange(inputItem, additionalItem, this.resultSlots, -1);
+        if (this.xp != Integer.MIN_VALUE) return ItemStack.EMPTY; // Porting 1.20.5 check if this is correct
         if (!flag) {
             return ItemStack.EMPTY;
         } else if (inputItem.getCount() <= 1 && additionalItem.getCount() <= 1) {
@@ -155,7 +_,7 @@
             int k = additionalItem.getMaxDamage() - additionalItem.getDamageValue();
             int l = j + k + i * 5 / 100;
             int i1 = 1;
-            if (!inputItem.isDamageableItem()) {
+            if (!inputItem.isDamageableItem() || !inputItem.isRepairable()) {
                 if (inputItem.getMaxStackSize() < 2 || !ItemStack.matches(inputItem, additionalItem)) {
                     return ItemStack.EMPTY;
                 }
@@ -167,6 +_,7 @@
             if (itemstack.isDamageableItem()) {
                 itemstack.set(DataComponents.MAX_DAMAGE, i);
                 itemstack.setDamageValue(Math.max(i - l, 0));
+                if (!additionalItem.isRepairable()) itemstack.setDamageValue(inputItem.getDamageValue());
             }
 
             this.mergeEnchantsFrom(itemstack, additionalItem);
