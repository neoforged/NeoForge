--- a/net/minecraft/world/level/storage/loot/LootPool.java
+++ b/net/minecraft/world/level/storage/loot/LootPool.java
@@ -33,7 +_,8 @@
                     LootItemCondition.DIRECT_CODEC.listOf().optionalFieldOf("conditions", List.of()).forGetter(p_297992_ -> p_297992_.conditions),
                     LootItemFunctions.ROOT_CODEC.listOf().optionalFieldOf("functions", List.of()).forGetter(p_297994_ -> p_297994_.functions),
                     NumberProviders.CODEC.fieldOf("rolls").forGetter(p_297993_ -> p_297993_.rolls),
-                    NumberProviders.CODEC.fieldOf("bonus_rolls").orElse(ConstantValue.exactly(0.0F)).forGetter(p_297997_ -> p_297997_.bonusRolls)
+                    NumberProviders.CODEC.fieldOf("bonus_rolls").orElse(ConstantValue.exactly(0.0F)).forGetter(p_297997_ -> p_297997_.bonusRolls),
+                    Codec.STRING.optionalFieldOf("name").forGetter(pool -> java.util.Optional.ofNullable(pool.name).filter(name -> !name.startsWith("custom#")))
                 )
                 .apply(p_344669_, LootPool::new)
     );
@@ -50,7 +_,8 @@
         List<LootItemCondition> conditions,
         List<LootItemFunction> functions,
         NumberProvider rolls,
-        NumberProvider bonusRolls
+        NumberProvider bonusRolls,
+        java.util.Optional<String> name
     ) {
         this.entries = entries;
         this.conditions = conditions;
@@ -59,6 +_,7 @@
         this.compositeFunction = LootItemFunctions.compose(functions);
         this.rolls = rolls;
         this.bonusRolls = bonusRolls;
+        this.name = name.orElse(null);
     }
 
     private void addRandomItem(Consumer<ItemStack> stackConsumer, LootContext context) {
@@ -122,6 +_,57 @@
         this.bonusRolls.validate(context.forChild(".bonusRolls"));
     }
 
+    // Neo: Implement LootPool freezing to prevent manipulation outside of Neo APIs
+    private boolean isFrozen = false;
+
+    public void freeze() {
+        this.isFrozen = true;
+    }
+
+    public boolean isFrozen() {
+        return this.isFrozen;
+    }
+
+    private void checkFrozen() {
+        if (this.isFrozen())
+            throw new RuntimeException("Attempted to modify LootPool after being frozen!");
+    }
+
+    // Neo: Apply names for LootPools to allow easier targeting specific pools
+    @org.jetbrains.annotations.Nullable
+    private String name;
+
+    @org.jetbrains.annotations.Nullable
+    public String getName() {
+        return this.name;
+    }
+
+    void setName(final String name) {
+        if (this.name != null) {
+            throw new UnsupportedOperationException("Cannot change the name of a pool when it has a name set!");
+        }
+        this.name = name;
+    }
+
+    // Neo: Add getters and settings for changing the rolls for this pool
+    public NumberProvider getRolls() {
+        return this.rolls;
+    }
+
+    public NumberProvider getBonusRolls() {
+        return this.bonusRolls;
+    }
+
+    public void setRolls (NumberProvider v) {
+        checkFrozen();
+        this.rolls = v;
+    }
+
+    public void setBonusRolls (NumberProvider v) {
+        checkFrozen();
+        this.bonusRolls = v;
+    }
+
     public static LootPool.Builder lootPool() {
         return new LootPool.Builder();
     }
@@ -132,6 +_,8 @@
         private final ImmutableList.Builder<LootItemFunction> functions = ImmutableList.builder();
         private NumberProvider rolls = ConstantValue.exactly(1.0F);
         private NumberProvider bonusRolls = ConstantValue.exactly(0.0F);
+        @org.jetbrains.annotations.Nullable
+        private String name;
 
         public LootPool.Builder setRolls(NumberProvider rolls) {
             this.rolls = rolls;
@@ -162,8 +_,13 @@
             return this;
         }
 
+        public LootPool.Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+
         public LootPool build() {
-            return new LootPool(this.entries.build(), this.conditions.build(), this.functions.build(), this.rolls, this.bonusRolls);
+            return new LootPool(this.entries.build(), this.conditions.build(), this.functions.build(), this.rolls, this.bonusRolls, java.util.Optional.ofNullable(this.name));
         }
     }
 }
