--- a/net/minecraft/world/level/storage/loot/LootPool.java
+++ b/net/minecraft/world/level/storage/loot/LootPool.java
@@ -34,7 +_,8 @@
                ExtraCodecs.strictOptionalField(LootItemConditions.CODEC.listOf(), "conditions", List.of()).forGetter(p_297992_ -> p_297992_.conditions),
                ExtraCodecs.strictOptionalField(LootItemFunctions.CODEC.listOf(), "functions", List.of()).forGetter(p_297994_ -> p_297994_.functions),
                NumberProviders.CODEC.fieldOf("rolls").forGetter(p_297993_ -> p_297993_.rolls),
-               NumberProviders.CODEC.fieldOf("bonus_rolls").orElse(ConstantValue.exactly(0.0F)).forGetter(p_297997_ -> p_297997_.bonusRolls)
+               NumberProviders.CODEC.fieldOf("bonus_rolls").orElse(ConstantValue.exactly(0.0F)).forGetter(p_297997_ -> p_297997_.bonusRolls),
+               Codec.STRING.optionalFieldOf("name").forGetter(pool -> java.util.Optional.ofNullable(pool.name).filter(name -> !name.startsWith("custom#")))
             )
             .apply(p_297996_, LootPool::new)
    );
@@ -51,7 +_,8 @@
       List<LootItemCondition> p_299316_,
       List<LootItemFunction> p_298954_,
       NumberProvider p_165131_,
-      NumberProvider p_165132_
+      NumberProvider p_165132_,
+      java.util.Optional<String> name
    ) {
       this.entries = p_298764_;
       this.conditions = p_299316_;
@@ -60,6 +_,7 @@
       this.compositeFunction = LootItemFunctions.compose(p_298954_);
       this.rolls = p_165131_;
       this.bonusRolls = p_165132_;
+      this.name = name.orElse(null);
    }
 
    private void addRandomItem(Consumer<ItemStack> p_79059_, LootContext p_79060_) {
@@ -122,6 +_,29 @@
       this.rolls.validate(p_79052_.forChild(".rolls"));
       this.bonusRolls.validate(p_79052_.forChild(".bonusRolls"));
    }
+   //======================== FORGE START =============================================
+   private boolean isFrozen = false;
+   public void freeze() { this.isFrozen = true; }
+   public boolean isFrozen(){ return this.isFrozen; }
+   private void checkFrozen() {
+      if (this.isFrozen())
+         throw new RuntimeException("Attempted to modify LootPool after being frozen!");
+   }
+   @org.jetbrains.annotations.Nullable
+   private String name;
+   @org.jetbrains.annotations.Nullable
+   public String getName() { return this.name; }
+   void setName(final String name) {
+      if (this.name != null) {
+         throw new UnsupportedOperationException("Cannot change the name of a pool when it has a name set!");
+      }
+      this.name = name;
+   }
+   public NumberProvider getRolls()      { return this.rolls; }
+   public NumberProvider getBonusRolls() { return this.bonusRolls; }
+   public void setRolls     (NumberProvider v){ checkFrozen(); this.rolls = v; }
+   public void setBonusRolls(NumberProvider v){ checkFrozen(); this.bonusRolls = v; }
+   //======================== FORGE END ===============================================
 
    public static LootPool.Builder lootPool() {
       return new LootPool.Builder();
@@ -133,6 +_,8 @@
       private final ImmutableList.Builder<LootItemFunction> functions = ImmutableList.builder();
       private NumberProvider rolls = ConstantValue.exactly(1.0F);
       private NumberProvider bonusRolls = ConstantValue.exactly(0.0F);
+      @org.jetbrains.annotations.Nullable
+      private String name;
 
       public LootPool.Builder setRolls(NumberProvider p_165134_) {
          this.rolls = p_165134_;
@@ -163,8 +_,20 @@
          return this;
       }
 
+      public LootPool.Builder name(String name) {
+         this.name = name;
+         return this;
+      }
+
       public LootPool build() {
-         return new LootPool(this.entries.build(), this.conditions.build(), this.functions.build(), this.rolls, this.bonusRolls);
+            return new LootPool(
+                    this.entries.build(),
+                    this.conditions.build(),
+                    this.functions.build(),
+                    this.rolls,
+                    this.bonusRolls,
+                    java.util.Optional.ofNullable(this.name)
+            );
       }
    }
 }
