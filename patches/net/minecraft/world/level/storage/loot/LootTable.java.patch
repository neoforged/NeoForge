--- a/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/net/minecraft/world/level/storage/loot/LootTable.java
@@ -35,8 +_,8 @@
       p_297999_ -> p_297999_.group(
                LootContextParamSets.CODEC.optionalFieldOf("type", DEFAULT_PARAM_SET).forGetter(p_298001_ -> p_298001_.paramSet),
                ExtraCodecs.strictOptionalField(ResourceLocation.CODEC, "random_sequence").forGetter(p_297998_ -> p_297998_.randomSequence),
-               ExtraCodecs.strictOptionalField(LootPool.CODEC.listOf(), "pools", List.of()).forGetter(p_298002_ -> p_298002_.pools),
-               ExtraCodecs.strictOptionalField(LootItemFunctions.CODEC.listOf(), "functions", List.of()).forGetter(p_298000_ -> p_298000_.functions)
+               ExtraCodecs.strictOptionalField(net.neoforged.neoforge.common.conditions.ConditionalOps.decodeListWithElementConditionsAndConsumeIndex(LootPool.CODEC, "neoforge:conditions", (pool, i) -> { if (pool.getName() == null) pool.setName("custom#" + i); }), "pools", List.of()).forGetter(p_298002_ -> p_298002_.pools),
+               ExtraCodecs.strictOptionalField(net.neoforged.neoforge.common.conditions.ConditionalOps.decodeListWithElementConditions(LootItemFunctions.CODEC, "neoforge:conditions"), "functions", List.of()).forGetter(p_298000_ -> p_298000_.functions)
             )
             .apply(p_297999_, LootTable::new)
    );
@@ -49,7 +_,7 @@
    LootTable(LootContextParamSet p_287716_, Optional<ResourceLocation> p_299055_, List<LootPool> p_298390_, List<LootItemFunction> p_298775_) {
       this.paramSet = p_287716_;
       this.randomSequence = p_299055_;
-      this.pools = p_298390_;
+      this.pools = Lists.newArrayList(p_298390_);
       this.functions = p_298775_;
       this.compositeFunction = LootItemFunctions.compose(p_298775_);
    }
@@ -72,10 +_,12 @@
       };
    }
 
+   @Deprecated // Use a non-'Raw' version of 'getRandomItems', so that the Forge Global Loot Modifiers will be applied
    public void getRandomItemsRaw(LootParams p_287669_, Consumer<ItemStack> p_287781_) {
       this.getRandomItemsRaw(new LootContext.Builder(p_287669_).create(this.randomSequence), p_287781_);
    }
 
+   @Deprecated // Use a non-'Raw' version of 'getRandomItems', so that the Forge Global Loot Modifiers will be applied
    public void getRandomItemsRaw(LootContext p_79132_, Consumer<ItemStack> p_79133_) {
       LootContext.VisitedEntry<?> visitedentry = LootContext.createVisitedEntry(this);
       if (p_79132_.pushVisitedElement(visitedentry)) {
@@ -92,17 +_,15 @@
    }
 
    public void getRandomItems(LootParams p_287748_, long p_287729_, Consumer<ItemStack> p_287583_) {
-      this.getRandomItemsRaw(
-         new LootContext.Builder(p_287748_).withOptionalRandomSeed(p_287729_).create(this.randomSequence), createStackSplitter(p_287748_.getLevel(), p_287583_)
-      );
+      this.getRandomItems((new LootContext.Builder(p_287748_)).withOptionalRandomSeed(p_287729_).create(this.randomSequence)).forEach(p_287583_);
    }
 
    public void getRandomItems(LootParams p_287704_, Consumer<ItemStack> p_287617_) {
-      this.getRandomItemsRaw(p_287704_, createStackSplitter(p_287704_.getLevel(), p_287617_));
+      this.getRandomItems(p_287704_).forEach(p_287617_);
    }
 
    public void getRandomItems(LootContext p_79149_, Consumer<ItemStack> p_79150_) {
-      this.getRandomItemsRaw(p_79149_, createStackSplitter(p_79149_.getLevel(), p_79150_));
+      this.getRandomItems(p_79149_).forEach(p_79150_);
    }
 
    public ObjectArrayList<ItemStack> getRandomItems(LootParams p_287574_, long p_287773_) {
@@ -115,7 +_,8 @@
 
    private ObjectArrayList<ItemStack> getRandomItems(LootContext p_230923_) {
       ObjectArrayList<ItemStack> objectarraylist = new ObjectArrayList<>();
-      this.getRandomItems(p_230923_, objectarraylist::add);
+      this.getRandomItemsRaw(p_230923_, createStackSplitter(p_230923_.getLevel(), objectarraylist::add));
+      objectarraylist = net.neoforged.neoforge.common.CommonHooks.modifyLoot(this.getLootTableId(), objectarraylist, p_230923_);
       return objectarraylist;
    }
 
@@ -205,6 +_,50 @@
    public static LootTable.Builder lootTable() {
       return new LootTable.Builder();
    }
+
+   //======================== FORGE START =============================================
+   private boolean isFrozen = false;
+   public void freeze() {
+      this.isFrozen = true;
+      this.pools.forEach(LootPool::freeze);
+   }
+   public boolean isFrozen(){ return this.isFrozen; }
+   private void checkFrozen() {
+      if (this.isFrozen())
+         throw new RuntimeException("Attempted to modify LootTable after being finalized!");
+   }
+
+   private ResourceLocation lootTableId;
+   public void setLootTableId(final ResourceLocation id) {
+      if (this.lootTableId != null) throw new IllegalStateException("Attempted to rename loot table from '" + this.lootTableId + "' to '" + id + "': this is not supported");
+      this.lootTableId = java.util.Objects.requireNonNull(id);
+   }
+   public ResourceLocation getLootTableId() { return this.lootTableId; }
+
+   @org.jetbrains.annotations.Nullable
+   public LootPool getPool(String name) {
+      return pools.stream().filter(e -> name.equals(e.getName())).findFirst().orElse(null);
+   }
+
+   @org.jetbrains.annotations.Nullable
+   public LootPool removePool(String name) {
+      checkFrozen();
+      for (LootPool pool : this.pools) {
+         if (name.equals(pool.getName())) {
+            this.pools.remove(pool);
+            return pool;
+         }
+      }
+      return null;
+   }
+
+   public void addPool(LootPool pool) {
+      checkFrozen();
+      if (pools.stream().anyMatch(e -> e == pool || e.getName() != null && e.getName().equals(pool.getName())))
+         throw new RuntimeException("Attempted to add a duplicate pool to loot table: " + pool.getName());
+      this.pools.add(pool);
+   }
+   //======================== FORGE END ===============================================
 
    public static class Builder implements FunctionUserBuilder<LootTable.Builder> {
       private final ImmutableList.Builder<LootPool> pools = ImmutableList.builder();
