--- a/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/net/minecraft/world/level/storage/loot/LootTable.java
@@ -38,8 +_,8 @@
         p_338123_ -> p_338123_.group(
                     LootContextParamSets.CODEC.lenientOptionalFieldOf("type", DEFAULT_PARAM_SET).forGetter(p_298001_ -> p_298001_.paramSet),
                     ResourceLocation.CODEC.optionalFieldOf("random_sequence").forGetter(p_297998_ -> p_297998_.randomSequence),
-                    LootPool.CODEC.listOf().optionalFieldOf("pools", List.of()).forGetter(p_298002_ -> p_298002_.pools),
-                    LootItemFunctions.ROOT_CODEC.listOf().optionalFieldOf("functions", List.of()).forGetter(p_298000_ -> p_298000_.functions)
+                    net.neoforged.neoforge.common.CommonHooks.lootPoolsCodec(LootPool::setName).optionalFieldOf("pools", List.of()).forGetter(p_298002_ -> p_298002_.pools),
+                        net.neoforged.neoforge.common.conditions.ConditionalOps.decodeListWithElementConditions(LootItemFunctions.ROOT_CODEC).optionalFieldOf("functions", List.of()).forGetter(p_298000_ -> p_298000_.functions)
                 )
                 .apply(p_338123_, LootTable::new)
     );
@@ -53,7 +_,7 @@
     LootTable(LootContextParamSet paramSet, Optional<ResourceLocation> randomSequence, List<LootPool> pools, List<LootItemFunction> functions) {
         this.paramSet = paramSet;
         this.randomSequence = randomSequence;
-        this.pools = pools;
+        this.pools = Lists.newArrayList(pools);
         this.functions = functions;
         this.compositeFunction = LootItemFunctions.compose(functions);
     }
@@ -76,10 +_,12 @@
         };
     }
 
+    @Deprecated // Use a non-'Raw' version of 'getRandomItems', so that the Forge Global Loot Modifiers will be applied
     public void getRandomItemsRaw(LootParams params, Consumer<ItemStack> output) {
         this.getRandomItemsRaw(new LootContext.Builder(params).create(this.randomSequence), output);
     }
 
+    @Deprecated // Use a non-'Raw' version of 'getRandomItems', so that the Forge Global Loot Modifiers will be applied
     public void getRandomItemsRaw(LootContext context, Consumer<ItemStack> output) {
         LootContext.VisitedEntry<?> visitedentry = LootContext.createVisitedEntry(this);
         if (context.pushVisitedElement(visitedentry)) {
@@ -96,18 +_,15 @@
     }
 
     public void getRandomItems(LootParams params, long seed, Consumer<ItemStack> output) {
-        this.getRandomItemsRaw(
-            new LootContext.Builder(params).withOptionalRandomSeed(seed).create(this.randomSequence),
-            createStackSplitter(params.getLevel(), output)
-        );
+        this.getRandomItems((new LootContext.Builder(params)).withOptionalRandomSeed(seed).create(this.randomSequence)).forEach(output);
     }
 
     public void getRandomItems(LootParams params, Consumer<ItemStack> output) {
-        this.getRandomItemsRaw(params, createStackSplitter(params.getLevel(), output));
+        this.getRandomItems(params).forEach(output);
     }
 
     public void getRandomItems(LootContext contextData, Consumer<ItemStack> output) {
-        this.getRandomItemsRaw(contextData, createStackSplitter(contextData.getLevel(), output));
+        this.getRandomItems(contextData).forEach(output);
     }
 
     public ObjectArrayList<ItemStack> getRandomItems(LootParams params, RandomSource random) {
@@ -124,7 +_,8 @@
 
     private ObjectArrayList<ItemStack> getRandomItems(LootContext context) {
         ObjectArrayList<ItemStack> objectarraylist = new ObjectArrayList<>();
-        this.getRandomItems(context, objectarraylist::add);
+        this.getRandomItemsRaw(context, createStackSplitter(context.getLevel(), objectarraylist::add));
+        objectarraylist = net.neoforged.neoforge.common.CommonHooks.modifyLoot(this.getLootTableId(), objectarraylist, context);
         return objectarraylist;
     }
 
@@ -213,6 +_,62 @@
 
     public static LootTable.Builder lootTable() {
         return new LootTable.Builder();
+    }
+
+    // Neo: Implement LootTable freezing to prevent manipulation outside of Neo APIs
+    private boolean isFrozen = false;
+
+    public void freeze() {
+        this.isFrozen = true;
+        this.pools.forEach(LootPool::freeze);
+    }
+
+    public boolean isFrozen() {
+        return this.isFrozen;
+    }
+
+    private void checkFrozen() {
+        if (this.isFrozen())
+            throw new RuntimeException("Attempted to modify LootTable after being finalized!");
+    }
+
+    // Neo: Linking the LootTable to its ID for easier retrieval
+    private ResourceLocation lootTableId;
+
+    public void setLootTableId(final ResourceLocation id) {
+        if (this.lootTableId != null) throw new IllegalStateException("Attempted to rename loot table from '" + this.lootTableId + "' to '" + id + "': this is not supported");
+        this.lootTableId = java.util.Objects.requireNonNull(id);
+    }
+
+    public ResourceLocation getLootTableId() {
+        return this.lootTableId;
+    }
+
+    // Neo: Retrieve LootPools by name
+    @org.jetbrains.annotations.Nullable
+    public LootPool getPool(String name) {
+        return pools.stream().filter(e -> name.equals(e.getName())).findFirst().orElse(null);
+    }
+
+    // Neo: Remove LootPools by name
+    @org.jetbrains.annotations.Nullable
+    public LootPool removePool(String name) {
+        checkFrozen();
+        for (LootPool pool : this.pools) {
+            if (name.equals(pool.getName())) {
+                this.pools.remove(pool);
+                return pool;
+            }
+        }
+        return null;
+    }
+
+    // Neo: Allow adding new pools to LootTable
+    public void addPool(LootPool pool) {
+        checkFrozen();
+        if (pools.stream().anyMatch(e -> e == pool || e.getName() != null && e.getName().equals(pool.getName())))
+            throw new RuntimeException("Attempted to add a duplicate pool to loot table: " + pool.getName());
+        this.pools.add(pool);
     }
 
     public static class Builder implements FunctionUserBuilder<LootTable.Builder> {
