--- a/net/minecraft/world/level/storage/loot/LootDataType.java
+++ b/net/minecraft/world/level/storage/loot/LootDataType.java
@@ -17,7 +_,7 @@
 import net.minecraft.world.level.storage.loot.predicates.LootItemConditions;
 import org.slf4j.Logger;
 
-public record LootDataType<T>(ResourceKey<Registry<T>> registryKey, Codec<T> codec, String directory, LootDataType.Validator<T> validator) {
+public record LootDataType<T>(ResourceKey<Registry<T>> registryKey, Codec<T> codec, String directory, LootDataType.Validator<T> validator, @org.jetbrains.annotations.Nullable T defaultValue, Codec<Optional<T>> conditionalCodec, java.util.function.BiConsumer<T, ResourceLocation> idSetter) {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final LootDataType<LootItemCondition> PREDICATE = new LootDataType<>(
         Registries.PREDICATE, LootItemConditions.DIRECT_CODEC, "predicates", createSimpleValidator()
@@ -26,17 +_,32 @@
         Registries.ITEM_MODIFIER, LootItemFunctions.ROOT_CODEC, "item_modifiers", createSimpleValidator()
     );
     public static final LootDataType<LootTable> TABLE = new LootDataType<>(
-        Registries.LOOT_TABLE, LootTable.DIRECT_CODEC, "loot_tables", createLootTableValidator()
+        Registries.LOOT_TABLE, LootTable.DIRECT_CODEC, "loot_tables", createLootTableValidator(), LootTable.EMPTY, LootTable::setLootTableId
     );
+
+    /**
+     * @deprecated Neo: use the constructor {@link #LootDataType(ResourceKey, Codec, String, Validator, T, java.util.function.BiConsumer) with a default value and id setter} to support conditions
+     */
+    @Deprecated
+    private LootDataType(ResourceKey<Registry<T>> registryKey, Codec<T> codec, String directory, LootDataType.Validator<T> validator) {
+        this(registryKey, codec, directory, validator, null, (it, id) -> {});
+    }
+
+    private LootDataType(ResourceKey<Registry<T>> registryKey, Codec<T> codec, String directory, LootDataType.Validator<T> validator, @org.jetbrains.annotations.Nullable T defaultValue, java.util.function.BiConsumer<T, ResourceLocation> idSetter) {
+        this(registryKey, codec, directory, validator, defaultValue, net.neoforged.neoforge.common.conditions.ConditionalOps.createConditionalCodec(codec), idSetter);
+    }
 
     public void runValidation(ValidationContext p_279366_, ResourceKey<T> p_336149_, T p_279124_) {
         this.validator.run(p_279366_, p_336149_, p_279124_);
     }
 
     public <V> Optional<T> deserialize(ResourceLocation p_279253_, DynamicOps<V> p_324006_, V p_324329_) {
-        DataResult<T> dataresult = this.codec.parse(p_324006_, p_324329_);
+        var dataresult = this.conditionalCodec.parse(p_324006_, p_324329_);
         dataresult.error().ifPresent(p_297991_ -> LOGGER.error("Couldn't parse element {}:{} - {}", this.directory, p_279253_, p_297991_.message()));
-        return dataresult.result();
+        return dataresult.result().map(it -> {
+            it.ifPresent(val -> idSetter.accept(val, p_279253_));
+            return it.orElse(defaultValue);
+        });
     }
 
     public static Stream<LootDataType<?>> values() {
@@ -50,9 +_,12 @@
     }
 
     private static LootDataType.Validator<LootTable> createLootTableValidator() {
-        return (p_335318_, p_335319_, p_335320_) -> p_335320_.validate(
-                p_335318_.setParams(p_335320_.getParamSet()).enterElement("{" + p_335319_.registry() + "/" + p_335319_.location() + "}", p_335319_)
+        return (p_279333_, p_279227_, p_279406_) -> {
+            p_279406_ = net.neoforged.neoforge.event.EventHooks.loadLootTable(p_279406_.getLootTableId(), p_279406_);
+            p_279406_.validate(
+                    p_279333_.setParams(p_279406_.getParamSet()).enterElement("{" + p_279227_.registry() + ":" + p_279227_.location() + "}", p_279227_)
             );
+        };
     }
 
     @FunctionalInterface
