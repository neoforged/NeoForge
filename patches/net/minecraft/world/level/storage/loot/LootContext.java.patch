--- a/net/minecraft/world/level/storage/loot/LootContext.java
+++ b/net/minecraft/world/level/storage/loot/LootContext.java
@@ -87,15 +_,40 @@
         return new LootContext.VisitedEntry<>(LootDataType.MODIFIER, p_279163_);
     }
 
+    // Neo: Keep track of the original loot table ID through modifications
+    @org.jetbrains.annotations.Nullable
+    private ResourceLocation queriedLootTableId;
+
+    private LootContext(LootParams p_287722_, RandomSource p_287702_, HolderGetter.Provider p_287619_, ResourceLocation queriedLootTableId) {
+        this(p_287722_, p_287702_, p_287619_);
+        this.queriedLootTableId = queriedLootTableId;
+    }
+
+    public void setQueriedLootTableId(@org.jetbrains.annotations.Nullable ResourceLocation queriedLootTableId) {
+        if (this.queriedLootTableId == null && queriedLootTableId != null) this.queriedLootTableId = queriedLootTableId;
+    }
+
+    public ResourceLocation getQueriedLootTableId() {
+        return this.queriedLootTableId == null ? net.neoforged.neoforge.common.loot.LootTableIdCondition.UNKNOWN_LOOT_TABLE : this.queriedLootTableId;
+    }
+
     public static class Builder {
         private final LootParams params;
         @Nullable
         private RandomSource random;
+        @Nullable
+        private ResourceLocation queriedLootTableId; // Forge: correctly pass around loot table ID with copy constructor
 
         public Builder(LootParams p_287628_) {
             this.params = p_287628_;
         }
 
+        public Builder(LootContext context) {
+            this.params = context.params;
+            this.random = context.random;
+            this.queriedLootTableId = context.queriedLootTableId;
+        }
+
         public LootContext.Builder withOptionalRandomSeed(long p_78966_) {
             if (p_78966_ != 0L) {
                 this.random = RandomSource.create(p_78966_);
@@ -109,6 +_,11 @@
             return this;
         }
 
+        public LootContext.Builder withQueriedLootTableId(ResourceLocation queriedLootTableId) {
+            this.queriedLootTableId = queriedLootTableId;
+            return this;
+        }
+
         public ServerLevel getLevel() {
             return this.params.getLevel();
         }
@@ -119,7 +_,7 @@
             RandomSource randomsource = Optional.ofNullable(this.random)
                 .or(() -> p_298622_.map(serverlevel::getRandomSequence))
                 .orElseGet(serverlevel::getRandom);
-            return new LootContext(this.params, randomsource, minecraftserver.reloadableRegistries().lookup());
+            return new LootContext(this.params, randomsource, minecraftserver.reloadableRegistries().lookup(), queriedLootTableId);
         }
     }
 
@@ -140,6 +_,11 @@
 
         public ContextKey<? extends Entity> getParam() {
             return this.param;
+        }
+
+        // Forge: This method is patched in to expose the same name used in getByName so that ContextNbtProvider#forEntity serializes it properly
+        public String getName() {
+            return this.name;
         }
 
         public static LootContext.EntityTarget getByName(String p_79007_) {
