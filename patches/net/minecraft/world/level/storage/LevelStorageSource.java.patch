--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -463,6 +_,18 @@
             }
         }
 
+        public void readAdditionalLevelSaveData(boolean fallback) {
+            checkLock();
+            Path path = fallback ? this.levelDirectory.oldDataFile() : this.levelDirectory.dataFile();
+            try {
+                var tag = readLightweightData(path);
+                if (tag instanceof CompoundTag compoundTag)
+                    net.neoforged.neoforge.common.CommonHooks.readAdditionalLevelSaveData(compoundTag, this.levelDirectory);
+            } catch (Exception e) {
+                LOGGER.error("Exception reading {}", path, e);
+            }
+        }
+
         public PlayerDataStorage createPlayerStorage() {
             this.checkLock();
             return new PlayerDataStorage(this, LevelStorageSource.this.fixerUpper);
@@ -496,6 +_,7 @@
             CompoundTag compoundtag = serverConfiguration.createTag(registries, hostPlayerNBT);
             CompoundTag compoundtag1 = new CompoundTag();
             compoundtag1.put("Data", compoundtag);
+            net.neoforged.neoforge.common.CommonHooks.writeAdditionalLevelSaveData(serverConfiguration, compoundtag1);
             this.saveLevelData(compoundtag1);
         }
 
@@ -515,6 +_,10 @@
 
         public Optional<Path> getIconFile() {
             return !this.lock.isValid() ? Optional.empty() : Optional.of(this.levelDirectory.iconFile());
+        }
+
+        public Path getWorldDir() {
+            return baseDir;
         }
 
         public void deleteLevel() throws IOException {
