--- a/net/minecraft/world/level/material/LavaFluid.java
+++ b/net/minecraft/world/level/material/LavaFluid.java
@@ -87,7 +_,7 @@
                     BlockState blockstate = level.getBlockState(blockpos);
                     if (blockstate.isAir()) {
                         if (this.hasFlammableNeighbours(level, blockpos)) {
-                            level.setBlockAndUpdate(blockpos, BaseFireBlock.getState(level, blockpos));
+                            level.setBlockAndUpdate(blockpos, net.neoforged.neoforge.event.EventHooks.fireFluidPlaceBlockEvent(level, blockpos, pos, BaseFireBlock.getState(level, blockpos)));
                             return;
                         }
                     } else if (blockstate.blocksMotion()) {
@@ -101,8 +_,8 @@
                         return;
                     }
 
-                    if (level.isEmptyBlock(blockpos1.above()) && this.isFlammable(level, blockpos1)) {
-                        level.setBlockAndUpdate(blockpos1.above(), BaseFireBlock.getState(level, blockpos1));
+                    if (level.isEmptyBlock(blockpos1.above()) && this.isFlammable(level, blockpos1, Direction.UP)) {
+                        level.setBlockAndUpdate(blockpos1.above(), net.neoforged.neoforge.event.EventHooks.fireFluidPlaceBlockEvent(level, blockpos1.above(), pos, BaseFireBlock.getState(level, blockpos1)));
                     }
                 }
             }
@@ -111,7 +_,7 @@
 
     private boolean hasFlammableNeighbours(LevelReader level, BlockPos pos) {
         for (Direction direction : Direction.values()) {
-            if (this.isFlammable(level, pos.relative(direction))) {
+            if (this.isFlammable(level, pos.relative(direction), direction.getOpposite())) {
                 return true;
             }
         }
@@ -119,12 +_,22 @@
         return false;
     }
 
+    /** @deprecated Forge: use {@link LavaFluid#isFlammable(LevelReader,BlockPos,Direction)} instead */
+    @Deprecated
     private boolean isFlammable(LevelReader level, BlockPos pos) {
         return pos.getY() >= level.getMinBuildHeight() && pos.getY() < level.getMaxBuildHeight() && !level.hasChunkAt(pos)
             ? false
             : level.getBlockState(pos).ignitedByLava();
     }
 
+    private boolean isFlammable(LevelReader level, BlockPos pos, Direction face) {
+        if (pos.getY() >= level.getMinBuildHeight() && pos.getY() < level.getMaxBuildHeight() && !level.hasChunkAt(pos)) {
+            return false;
+        }
+        BlockState state = level.getBlockState(pos);
+        return state.ignitedByLava() && state.isFlammable(level, pos, face);
+    }
+
     @Nullable
     @Override
     public ParticleOptions getDripParticle() {
@@ -196,7 +_,7 @@
             FluidState fluidstate = level.getFluidState(pos);
             if (this.is(FluidTags.LAVA) && fluidstate.is(FluidTags.WATER)) {
                 if (blockState.getBlock() instanceof LiquidBlock) {
-                    level.setBlock(pos, Blocks.STONE.defaultBlockState(), 3);
+                    level.setBlock(pos, net.neoforged.neoforge.event.EventHooks.fireFluidPlaceBlockEvent(level, pos, pos, Blocks.STONE.defaultBlockState()), 3);
                 }
 
                 this.fizz(level, pos);
