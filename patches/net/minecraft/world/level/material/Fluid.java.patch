--- a/net/minecraft/world/level/material/Fluid.java
+++ b/net/minecraft/world/level/material/Fluid.java
@@ -20,7 +_,7 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
-public abstract class Fluid {
+public abstract class Fluid implements net.neoforged.neoforge.common.extensions.IFluidExtension {
     public static final IdMapper<FluidState> FLUID_STATE_REGISTRY = new IdMapper<>();
     protected final StateDefinition<Fluid, FluidState> stateDefinition;
     private FluidState defaultFluidState;
@@ -100,6 +_,25 @@
     }
 
     public abstract VoxelShape getShape(FluidState p_76137_, BlockGetter p_76138_, BlockPos p_76139_);
+
+    private net.neoforged.neoforge.fluids.FluidType forgeFluidType;
+    @Override
+    public net.neoforged.neoforge.fluids.FluidType getFluidType() {
+        if (forgeFluidType == null) forgeFluidType = net.neoforged.neoforge.common.CommonHooks.getVanillaFluidType(this);
+        return forgeFluidType;
+    }
+
+    public net.neoforged.neoforge.fluids.FluidStack getDefaultInstance() {
+        return getDefaultInstance(1);
+    }
+
+    public net.neoforged.neoforge.fluids.FluidStack getDefaultInstance(int amount) {
+        return new net.neoforged.neoforge.fluids.FluidStack(this, amount, null);
+    }
+
+    public net.neoforged.neoforge.fluids.FluidStack getDefaultInstance(int amount, @org.jetbrains.annotations.Nullable net.minecraft.nbt.CompoundTag attachmentsNbt) {
+        return new net.neoforged.neoforge.fluids.FluidStack(this, amount, attachmentsNbt);
+    }
 
     public Optional<SoundEvent> getPickupSound() {
         return Optional.empty();
