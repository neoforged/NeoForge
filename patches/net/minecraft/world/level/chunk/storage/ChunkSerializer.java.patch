--- a/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -180,6 +_,7 @@
             postLoadChunk(p_188231_, p_188234_),
             blendingdata
          );
+         if (p_188234_.contains("ForgeCaps")) ((LevelChunk)chunkaccess).readCapsFromNBT(p_188234_.getCompound("ForgeCaps"));
       } else {
          ProtoChunkTicks<Block> protochunkticks = ProtoChunkTicks.load(
             p_188234_.getList("block_ticks", 10), p_258992_ -> BuiltInRegistries.BLOCK.getOptional(ResourceLocation.tryParse(p_258992_)), p_188233_
@@ -238,6 +_,7 @@
       }
 
       if (chunkstatus$chunktype == ChunkStatus.ChunkType.LEVELCHUNK) {
+         net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
          return new ImposterProtoChunk((LevelChunk)chunkaccess, false);
       } else {
          ProtoChunk protochunk1 = (ProtoChunk)chunkaccess;
@@ -261,6 +_,7 @@
             protochunk1.setCarvingMask(generationstep$carving, new CarvingMask(compoundtag4.getLongArray(s1), chunkaccess.getMinBuildHeight()));
          }
 
+         net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
          return protochunk1;
       }
    }
@@ -370,6 +_,14 @@
          }
 
          compoundtag.put("CarvingMasks", compoundtag4);
+      }
+      else if (p_63456_ instanceof LevelChunk levelChunk){
+          try {
+              final CompoundTag capTag = levelChunk.writeCapsToNBT();
+              if (capTag != null) compoundtag.put("ForgeCaps", capTag);
+          } catch (Exception exception) {
+              LOGGER.error("A capability provider has thrown an exception trying to write state. It will not persist. Report this to the mod author", exception);
+          }
       }
 
       saveTicks(p_63455_, compoundtag, p_63456_.getTicksForSerialization());
