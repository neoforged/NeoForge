--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -50,7 +_,7 @@
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
 
-public class LevelChunk extends ChunkAccess {
+public class LevelChunk extends ChunkAccess implements net.neoforged.neoforge.attachment.IAttachmentHolder {
     static final Logger LOGGER = LogUtils.getLogger();
     private static final TickingBlockEntity NULL_TICKER = new TickingBlockEntity() {
         @Override
@@ -139,6 +_,7 @@
         this.setAllStarts(chunk.getAllStarts());
         this.setAllReferences(chunk.getAllReferences());
 
+        net.neoforged.neoforge.attachment.AttachmentInternals.copyChunkAttachmentsOnPromotion(level.registryAccess(), chunk.getAttachmentHolder(), this.getAttachmentHolder());
         for (Entry<Heightmap.Types, Heightmap> entry : chunk.getHeightmaps()) {
             if (ChunkStatus.FULL.heightmapsAfter().contains(entry.getKey())) {
                 this.setHeightmap(entry.getKey(), entry.getValue().getRawData());
@@ -271,14 +_,14 @@
                 boolean flag2 = blockstate.hasBlockEntity();
                 if (!this.level.isClientSide) {
                     blockstate.onRemove(this.level, pos, state, isMoving);
-                } else if (!blockstate.is(block) && flag2) {
+                } else if ((!blockstate.is(block) || !state.hasBlockEntity()) && flag2) {
                     this.removeBlockEntity(pos);
                 }
 
                 if (!levelchunksection.getBlockState(j, k, l).is(block)) {
                     return null;
                 } else {
-                    if (!this.level.isClientSide) {
+                    if (!this.level.isClientSide && !this.level.captureBlockSnapshots) {
                         state.onPlace(this.level, pos, blockstate, isMoving);
                     }
 
@@ -322,6 +_,10 @@
     @Nullable
     public BlockEntity getBlockEntity(BlockPos pos, LevelChunk.EntityCreationType creationType) {
         BlockEntity blockentity = this.blockEntities.get(pos);
+        if (blockentity != null && blockentity.isRemoved()) {
+            blockEntities.remove(pos);
+            blockentity = null;
+        }
         if (blockentity == null) {
             CompoundTag compoundtag = this.pendingBlockEntities.remove(pos);
             if (compoundtag != null) {
@@ -339,9 +_,6 @@
                     this.addAndRegisterBlockEntity(blockentity);
                 }
             }
-        } else if (blockentity.isRemoved()) {
-            this.blockEntities.remove(pos);
-            return null;
         }
 
         return blockentity;
@@ -355,6 +_,7 @@
             }
 
             this.updateBlockEntityTicker(blockEntity);
+            this.level.addFreshBlockEntities(java.util.List.of(blockEntity));
         }
     }
 
@@ -398,6 +_,7 @@
             BlockEntity blockentity = this.blockEntities.put(blockpos.immutable(), blockEntity);
             if (blockentity != null && blockentity != blockEntity) {
                 blockentity.setRemoved();
+                auxLightManager.removeLightAt(blockpos);
             }
         }
     }
@@ -407,9 +_,14 @@
     public CompoundTag getBlockEntityNbtForSaving(BlockPos pos, HolderLookup.Provider registries) {
         BlockEntity blockentity = this.getBlockEntity(pos);
         if (blockentity != null && !blockentity.isRemoved()) {
+            try {
             CompoundTag compoundtag1 = blockentity.saveWithFullMetadata(this.level.registryAccess());
             compoundtag1.putBoolean("keepPacked", false);
             return compoundtag1;
+            } catch (Exception e) {
+                LOGGER.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+                return null;
+            }
         } else {
             CompoundTag compoundtag = this.pendingBlockEntities.get(pos);
             if (compoundtag != null) {
@@ -431,6 +_,7 @@
                 }
 
                 blockentity.setRemoved();
+                auxLightManager.removeLightAt(pos);
             }
         }
 
@@ -491,7 +_,7 @@
         outputTagConsumer.accept((p_338077_, p_338078_, p_338079_) -> {
             BlockEntity blockentity = this.getBlockEntity(p_338077_, LevelChunk.EntityCreationType.IMMEDIATE);
             if (blockentity != null && p_338079_ != null && blockentity.getType() == p_338078_) {
-                blockentity.loadWithComponents(p_338079_, this.level.registryAccess());
+                blockentity.handleUpdateTag(p_338079_, this.level.registryAccess());
             }
         });
     }
@@ -599,6 +_,7 @@
     }
 
     public void clearAllBlockEntities() {
+        this.blockEntities.values().forEach(BlockEntity::onChunkUnloaded);
         this.blockEntities.values().forEach(BlockEntity::setRemoved);
         this.blockEntities.clear();
         this.tickersInLevel.values().forEach(p_187966_ -> p_187966_.rebind(NULL_TICKER));
@@ -606,6 +_,7 @@
     }
 
     public void registerAllBlockEntitiesAfterLevelLoad() {
+        this.level.addFreshBlockEntities(this.blockEntities.values());
         this.blockEntities.values().forEach(p_187988_ -> {
             if (this.level instanceof ServerLevel serverlevel) {
                 this.addGameEventListener(p_187988_, serverlevel);
@@ -657,6 +_,14 @@
         return new LevelChunk.BoundTickingBlockEntity<>(blockEntity, ticker);
     }
 
+    // Neo: Threadsafe lighting system for BlockEntities that change lighting based on dynamic data changing.
+    private final net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager auxLightManager = new net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager(this);
+
+    @Override
+    public net.neoforged.neoforge.common.world.LevelChunkAuxiliaryLightManager getAuxLightManager(ChunkPos pos) {
+        return auxLightManager;
+    }
+
     class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
         private final T blockEntity;
         private final BlockEntityTicker<T> ticker;
@@ -674,6 +_,7 @@
                 if (LevelChunk.this.isTicking(blockpos)) {
                     try {
                         ProfilerFiller profilerfiller = LevelChunk.this.level.getProfiler();
+                        net.neoforged.neoforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(blockEntity);
                         profilerfiller.push(this::getType);
                         BlockState blockstate = LevelChunk.this.getBlockState(blockpos);
                         if (this.blockEntity.getType().isValid(blockstate)) {
@@ -695,7 +_,15 @@
                         CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking block entity");
                         CrashReportCategory crashreportcategory = crashreport.addCategory("Block entity being ticked");
                         this.blockEntity.fillCrashReportCategory(crashreportcategory);
+
+                        if (net.neoforged.neoforge.common.NeoForgeConfig.SERVER.removeErroringBlockEntities.get()) {
+                            LOGGER.error("{}", crashreport.getFriendlyReport(net.minecraft.ReportType.CRASH));
+                            blockEntity.setRemoved();
+                            LevelChunk.this.removeBlockEntity(blockEntity.getBlockPos());
+                        } else
                         throw new ReportedException(crashreport);
+                    } finally {
+                        net.neoforged.neoforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackEnd(blockEntity);
                     }
                 }
             }
