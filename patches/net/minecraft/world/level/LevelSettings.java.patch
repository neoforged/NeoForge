--- a/net/minecraft/world/level/LevelSettings.java
+++ b/net/minecraft/world/level/LevelSettings.java
@@ -11,10 +_,14 @@
     private final boolean allowCommands;
     private final GameRules gameRules;
     private final WorldDataConfiguration dataConfiguration;
+    private final com.mojang.serialization.Lifecycle lifecycle;
 
     public LevelSettings(
         String levelName, GameType gameType, boolean hardcore, Difficulty difficulty, boolean allowCommands, GameRules gameRules, WorldDataConfiguration dataConfiguration
     ) {
+        this(levelName, gameType, hardcore, difficulty, allowCommands, gameRules, dataConfiguration, com.mojang.serialization.Lifecycle.stable());
+    }
+    public LevelSettings(String levelName, GameType gameType, boolean hardcore, Difficulty difficulty, boolean allowCommands, GameRules gameRules, WorldDataConfiguration dataConfiguration, com.mojang.serialization.Lifecycle lifecycle) {
         this.levelName = levelName;
         this.gameType = gameType;
         this.hardcore = hardcore;
@@ -22,6 +_,7 @@
         this.allowCommands = allowCommands;
         this.gameRules = gameRules;
         this.dataConfiguration = dataConfiguration;
+        this.lifecycle = lifecycle;
     }
 
     public static LevelSettings parse(Dynamic<?> levelData, WorldDataConfiguration dataConfiguration) {
@@ -33,7 +_,8 @@
             levelData.get("Difficulty").asNumber().map(p_46928_ -> Difficulty.byId(p_46928_.byteValue())).result().orElse(Difficulty.NORMAL),
             levelData.get("allowCommands").asBoolean(gametype == GameType.CREATIVE),
             new GameRules(levelData.get("GameRules")),
-            dataConfiguration
+            dataConfiguration,
+            net.neoforged.neoforge.common.CommonHooks.parseLifecycle(levelData.get("forgeLifecycle").asString("stable"))
         );
     }
 
@@ -66,20 +_,27 @@
     }
 
     public LevelSettings withGameType(GameType gameType) {
-        return new LevelSettings(this.levelName, gameType, this.hardcore, this.difficulty, this.allowCommands, this.gameRules, this.dataConfiguration);
+        return new LevelSettings(this.levelName, gameType, this.hardcore, this.difficulty, this.allowCommands, this.gameRules, this.dataConfiguration, this.lifecycle);
     }
 
     public LevelSettings withDifficulty(Difficulty difficulty) {
-        return new LevelSettings(this.levelName, this.gameType, this.hardcore, difficulty, this.allowCommands, this.gameRules, this.dataConfiguration);
+        net.neoforged.neoforge.common.CommonHooks.onDifficultyChange(difficulty, this.difficulty);
+        return new LevelSettings(this.levelName, this.gameType, this.hardcore, difficulty, this.allowCommands, this.gameRules, this.dataConfiguration, this.lifecycle);
     }
 
     public LevelSettings withDataConfiguration(WorldDataConfiguration dataConfiguration) {
-        return new LevelSettings(this.levelName, this.gameType, this.hardcore, this.difficulty, this.allowCommands, this.gameRules, dataConfiguration);
+        return new LevelSettings(this.levelName, this.gameType, this.hardcore, this.difficulty, this.allowCommands, this.gameRules, dataConfiguration, this.lifecycle);
     }
 
     public LevelSettings copy() {
         return new LevelSettings(
-            this.levelName, this.gameType, this.hardcore, this.difficulty, this.allowCommands, this.gameRules.copy(), this.dataConfiguration
+            this.levelName, this.gameType, this.hardcore, this.difficulty, this.allowCommands, this.gameRules.copy(), this.dataConfiguration, this.lifecycle
         );
+    }
+    public LevelSettings withLifecycle(com.mojang.serialization.Lifecycle lifecycle) {
+        return new LevelSettings(this.levelName, this.gameType, this.hardcore, this.difficulty, this.allowCommands, this.gameRules, this.dataConfiguration, lifecycle);
+    }
+    public com.mojang.serialization.Lifecycle getLifecycle() {
+        return this.lifecycle;
     }
 }
