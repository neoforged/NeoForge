--- a/net/minecraft/world/level/block/ComposterBlock.java
+++ b/net/minecraft/world/level/block/ComposterBlock.java
@@ -48,6 +_,8 @@
     public static final int MIN_LEVEL = 0;
     public static final int MAX_LEVEL = 7;
     public static final IntegerProperty LEVEL = BlockStateProperties.LEVEL_COMPOSTER;
+    /** @deprecated Neo: Use the {@link net.neoforged.neoforge.registries.datamaps.builtin.NeoForgeDataMaps#COMPOSTABLES compostable} data map instead */
+    @Deprecated
     public static final Object2FloatMap<ItemLike> COMPOSTABLES = new Object2FloatOpenHashMap<>();
     private static final int AABB_SIDE_THICKNESS = 2;
     private static final VoxelShape OUTER_SHAPE = Shapes.block();
@@ -227,6 +_,15 @@
         if (state.getValue(LEVEL) == 7) {
             level.scheduleTick(pos, state.getBlock(), 20);
         }
+        // Neo: Invalidate composter capabilities when a composter is added
+        if (!oldState.is(this)) level.invalidateCapabilities(pos);
+    }
+
+    @Override
+    protected void onRemove(BlockState state, Level level, BlockPos pos, BlockState newState, boolean movedByPiston) {
+        super.onRemove(state, level, pos, newState, movedByPiston);
+        // Neo: Invalidate composter capabilities when a composter is removed
+        if (!state.is(newState.getBlock())) level.invalidateCapabilities(pos);
     }
 
     @Override
@@ -234,7 +_,7 @@
         ItemStack stack, BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hitResult
     ) {
         int i = state.getValue(LEVEL);
-        if (i < 8 && COMPOSTABLES.containsKey(stack.getItem())) {
+        if (i < 8 && getValue(stack) > 0) {
             if (i < 7 && !level.isClientSide) {
                 BlockState blockstate = addItem(player, state, level, pos, stack);
                 level.levelEvent(1500, pos, state != blockstate ? 1 : 0);
@@ -261,7 +_,7 @@
 
     public static BlockState insertItem(Entity entity, BlockState state, ServerLevel level, ItemStack stack, BlockPos pos) {
         int i = state.getValue(LEVEL);
-        if (i < 7 && COMPOSTABLES.containsKey(stack.getItem())) {
+        if (i < 7 && getValue(stack) > 0) {
             BlockState blockstate = addItem(entity, state, level, pos, stack);
             stack.shrink(1);
             return blockstate;
@@ -292,7 +_,7 @@
 
     static BlockState addItem(@Nullable Entity entity, BlockState state, LevelAccessor level, BlockPos pos, ItemStack stack) {
         int i = state.getValue(LEVEL);
-        float f = COMPOSTABLES.getFloat(stack.getItem());
+        float f = getValue(stack);
         if ((i != 0 || !(f > 0.0F)) && !(level.getRandom().nextDouble() < (double)f)) {
             return state;
         } else {
@@ -392,7 +_,7 @@
 
         @Override
         public boolean canPlaceItemThroughFace(int index, ItemStack itemStack, @Nullable Direction direction) {
-            return !this.changed && direction == Direction.UP && ComposterBlock.COMPOSTABLES.containsKey(itemStack.getItem());
+            return !this.changed && direction == Direction.UP && getValue(itemStack) > 0f;
         }
 
         @Override
@@ -450,5 +_,11 @@
             ComposterBlock.empty(null, this.state, this.level, this.pos);
             this.changed = true;
         }
+    }
+
+    public static float getValue(ItemStack item) {
+        var value = item.getItemHolder().getData(net.neoforged.neoforge.registries.datamaps.builtin.NeoForgeDataMaps.COMPOSTABLES);
+        if (value != null) return value.chance();
+        return -1f;
     }
 }
