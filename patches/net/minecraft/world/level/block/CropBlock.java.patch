--- a/net/minecraft/world/level/block/CropBlock.java
+++ b/net/minecraft/world/level/block/CropBlock.java
@@ -54,7 +_,7 @@
 
     @Override
     protected boolean mayPlaceOn(BlockState state, BlockGetter level, BlockPos pos) {
-        return state.is(Blocks.FARMLAND);
+        return state.getBlock() instanceof net.minecraft.world.level.block.FarmBlock;
     }
 
     protected IntegerProperty getAgeProperty() {
@@ -84,12 +_,14 @@
 
     @Override
     protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
+        if (!level.isAreaLoaded(pos, 1)) return; // Forge: prevent loading unloaded chunks when checking neighbor's light
         if (level.getRawBrightness(pos, 0) >= 9) {
             int i = this.getAge(state);
             if (i < this.getMaxAge()) {
-                float f = getGrowthSpeed(this, level, pos);
-                if (random.nextInt((int)(25.0F / f) + 1) == 0) {
+                float f = getGrowthSpeed(state, level, pos);
+                if (net.neoforged.neoforge.common.CommonHooks.canCropGrow(level, pos, state, random.nextInt((int)(25.0F / f) + 1) == 0)) {
                     level.setBlock(pos, this.getStateForAge(i + 1), 2);
+                    net.neoforged.neoforge.common.CommonHooks.fireCropGrowPost(level, pos, state);
                 }
             }
         }
@@ -109,7 +_,8 @@
         return Mth.nextInt(level.random, 2, 5);
     }
 
-    protected static float getGrowthSpeed(Block block, BlockGetter level, BlockPos pos) {
+    protected static float getGrowthSpeed(BlockState blockState, BlockGetter level, BlockPos pos) {
+        Block block = blockState.getBlock();
         float f = 1.0F;
         BlockPos blockpos = pos.below();
 
@@ -117,9 +_,10 @@
             for (int j = -1; j <= 1; j++) {
                 float f1 = 0.0F;
                 BlockState blockstate = level.getBlockState(blockpos.offset(i, 0, j));
-                if (blockstate.is(Blocks.FARMLAND)) {
+                net.neoforged.neoforge.common.util.TriState soilDecision = blockstate.canSustainPlant(level, blockpos.offset(i, 0, j), net.minecraft.core.Direction.UP, blockState);
+                if (soilDecision.isDefault() ? blockstate.getBlock() instanceof net.minecraft.world.level.block.FarmBlock : soilDecision.isTrue()) {
                     f1 = 1.0F;
-                    if (blockstate.getValue(FarmBlock.MOISTURE) > 0) {
+                    if (blockstate.isFertile(level, pos.offset(i, 0, j))) {
                         f1 = 3.0F;
                     }
                 }
@@ -155,6 +_,8 @@
 
     @Override
     protected boolean canSurvive(BlockState state, LevelReader level, BlockPos pos) {
+        net.neoforged.neoforge.common.util.TriState soilDecision = level.getBlockState(pos.below()).canSustainPlant(level, pos.below(), net.minecraft.core.Direction.UP, state);
+        if (!soilDecision.isDefault()) return soilDecision.isTrue();
         return hasSufficientLight(level, pos) && super.canSurvive(state, level, pos);
     }
 
@@ -164,7 +_,7 @@
 
     @Override
     protected void entityInside(BlockState state, Level level, BlockPos pos, Entity entity) {
-        if (entity instanceof Ravager && level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+        if (entity instanceof Ravager && net.neoforged.neoforge.event.EventHooks.canEntityGrief(level, entity)) {
             level.destroyBlock(pos, true, entity);
         }
 
