--- a/net/minecraft/world/level/block/PoweredRailBlock.java
+++ b/net/minecraft/world/level/block/PoweredRailBlock.java
@@ -21,9 +_,19 @@
     public MapCodec<PoweredRailBlock> codec() {
         return CODEC;
     }
+    private final boolean isActivator;  // TRUE for an Activator Rail, FALSE for Powered Rail
 
     public PoweredRailBlock(BlockBehaviour.Properties p_55218_) {
+        this(p_55218_, false);
+    }
+
+    protected PoweredRailBlock(BlockBehaviour.Properties p_55218_, boolean isPoweredRail) {
         super(true, p_55218_);
+        this.isActivator = !isPoweredRail;
+        this.registerDefaultState();
+    }
+
+    protected void registerDefaultState() {
         this.registerDefaultState(
             this.stateDefinition
                 .any()
@@ -41,7 +_,7 @@
             int j = pos.getY();
             int k = pos.getZ();
             boolean flag = true;
-            RailShape railshape = state.getValue(SHAPE);
+            RailShape railshape = state.getValue(getShapeProperty());
             switch (railshape) {
                 case NORTH_SOUTH:
                     if (searchForward) {
@@ -110,18 +_,18 @@
 
     protected boolean isSameRailWithPower(Level level, BlockPos state, boolean searchForward, int recursionCount, RailShape shape) {
         BlockState blockstate = level.getBlockState(state);
-        if (!blockstate.is(this)) {
+        if (!(blockstate.getBlock() instanceof PoweredRailBlock other)) {
             return false;
         } else {
-            RailShape railshape = blockstate.getValue(SHAPE);
+            RailShape railshape = other.getRailDirection(blockstate, level, state, null);
             if (shape != RailShape.EAST_WEST
                 || railshape != RailShape.NORTH_SOUTH && railshape != RailShape.ASCENDING_NORTH && railshape != RailShape.ASCENDING_SOUTH) {
                 if (shape != RailShape.NORTH_SOUTH
                     || railshape != RailShape.EAST_WEST && railshape != RailShape.ASCENDING_EAST && railshape != RailShape.ASCENDING_WEST) {
-                    if (!blockstate.getValue(POWERED)) {
+                    if (isActivatorRail() != other.isActivatorRail()) {
                         return false;
                     } else {
-                        return level.hasNeighborSignal(state) ? true : this.findPoweredRailSignal(level, state, blockstate, searchForward, recursionCount + 1);
+                        return level.hasNeighborSignal(state) ? true : other.findPoweredRailSignal(level, state, blockstate, searchForward, recursionCount + 1);
                     }
                 } else {
                     return false;
@@ -141,7 +_,7 @@
         if (flag1 != flag) {
             level.setBlock(pos, state.setValue(POWERED, Boolean.valueOf(flag1)), 3);
             level.updateNeighborsAt(pos.below(), this);
-            if (state.getValue(SHAPE).isAscending()) {
+            if (state.getValue(getShapeProperty()).isAscending()) {
                 level.updateNeighborsAt(pos.above(), this);
             }
         }
@@ -173,6 +_,9 @@
                         return state.setValue(SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_EAST:
                         return state.setValue(SHAPE, RailShape.SOUTH_WEST);
+                    case NORTH_SOUTH: //Forge fix: MC-104231
+                    case EAST_WEST:
+                        return state;
                 }
             case COUNTERCLOCKWISE_90:
                 switch ((RailShape)state.getValue(SHAPE)) {
@@ -272,6 +_,10 @@
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(SHAPE, POWERED, WATERLOGGED);
+        builder.add(getShapeProperty(), POWERED, WATERLOGGED);
+    }
+
+    public boolean isActivatorRail() {
+        return isActivator;
     }
 }
