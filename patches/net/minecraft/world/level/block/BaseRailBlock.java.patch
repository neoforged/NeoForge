--- a/net/minecraft/world/level/block/BaseRailBlock.java
+++ b/net/minecraft/world/level/block/BaseRailBlock.java
@@ -20,7 +_,7 @@
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
-public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBlock {
+public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBlock, net.neoforged.neoforge.common.extensions.IBaseRailBlockExtension {
     protected static final VoxelShape FLAT_AABB = Block.box(0.0, 0.0, 0.0, 16.0, 2.0, 16.0);
     protected static final VoxelShape HALF_BLOCK_AABB = Block.box(0.0, 0.0, 0.0, 16.0, 8.0, 16.0);
     public static final BooleanProperty WATERLOGGED = BlockStateProperties.WATERLOGGED;
@@ -49,6 +_,7 @@
     @Override
     protected VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext context) {
         RailShape railshape = state.is(this) ? state.getValue(this.getShapeProperty()) : null;
+        RailShape railShape2 = state.is(this) ? getRailDirection(state, level, pos, null) : null;
         return railshape != null && railshape.isAscending() ? HALF_BLOCK_AABB : FLAT_AABB;
     }
 
@@ -76,7 +_,7 @@
     @Override
     protected void neighborChanged(BlockState state, Level level, BlockPos pos, Block block, BlockPos fromPos, boolean isMoving) {
         if (!level.isClientSide && level.getBlockState(pos).is(this)) {
-            RailShape railshape = state.getValue(this.getShapeProperty());
+            RailShape railshape = getRailDirection(state, level, pos, null);
             if (shouldBeRemoved(pos, level, railshape)) {
                 dropResources(state, level, pos);
                 level.removeBlock(pos, isMoving);
@@ -121,7 +_,7 @@
     protected void onRemove(BlockState state, Level level, BlockPos pos, BlockState newState, boolean isMoving) {
         if (!isMoving) {
             super.onRemove(state, level, pos, newState, isMoving);
-            if (state.getValue(this.getShapeProperty()).isAscending()) {
+            if (getRailDirection(state, level, pos, null).isAscending()) {
                 level.updateNeighborsAt(pos.above(), this);
             }
 
@@ -142,6 +_,11 @@
         return blockstate.setValue(this.getShapeProperty(), flag1 ? RailShape.EAST_WEST : RailShape.NORTH_SOUTH).setValue(WATERLOGGED, Boolean.valueOf(flag));
     }
 
+    /**
+     * @deprecated Forge: Use {@link BaseRailBlock#getRailDirection(BlockState, BlockGetter, BlockPos, net.minecraft.world.entity.vehicle.AbstractMinecart)} for enhanced ability
+     * If you do change this property be aware that other functions in this/subclasses may break as they can make assumptions about this property
+     */
+    @Deprecated
     public abstract Property<RailShape> getShapeProperty();
 
     @Override
@@ -158,5 +_,15 @@
     @Override
     protected FluidState getFluidState(BlockState state) {
         return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+    }
+
+    @Override
+    public boolean isFlexibleRail(BlockState state, BlockGetter world, BlockPos pos) {
+         return  !this.isStraight;
+    }
+
+    @Override
+    public RailShape getRailDirection(BlockState state, BlockGetter world, BlockPos pos, @org.jetbrains.annotations.Nullable net.minecraft.world.entity.vehicle.AbstractMinecart cart) {
+         return state.getValue(getShapeProperty());
     }
 }
