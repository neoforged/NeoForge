--- a/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -182,7 +_,7 @@
         if (!p_311951_.isAir() && p_312925_.getBlockInteraction() != Explosion.BlockInteraction.TRIGGER_BLOCK) {
             Block block = p_311951_.getBlock();
             boolean flag = p_312925_.getIndirectSourceEntity() instanceof Player;
-            if (block.dropFromExplosion(p_312925_)) {
+            if (p_311951_.canDropFromExplosion(p_365148_, p_312489_, p_312925_)) {
                 BlockEntity blockentity = p_311951_.hasBlockEntity() ? p_365148_.getBlockEntity(p_312489_) : null;
                 LootParams.Builder lootparams$builder = new LootParams.Builder(p_365148_)
                     .withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(p_312489_))
@@ -197,8 +_,7 @@
                 p_311951_.getDrops(lootparams$builder).forEach(p_311752_ -> p_312073_.accept(p_311752_, p_312489_));
             }
 
-            p_365148_.setBlock(p_312489_, Blocks.AIR.defaultBlockState(), 3);
-            block.wasExploded(p_365148_, p_312489_, p_312925_);
+            p_311951_.onBlockExploded(p_365148_, p_312489_, p_312925_);
         }
     }
 
@@ -344,8 +_,8 @@
         if (f == -1.0F) {
             return 0.0F;
         } else {
-            int i = p_60467_.hasCorrectToolForDrops(p_60466_) ? 30 : 100;
-            return p_60467_.getDestroySpeed(p_60466_) / f / (float)i;
+            int i = net.neoforged.neoforge.event.EventHooks.doPlayerHarvestCheck(p_60467_, p_60466_, p_60468_, p_60469_) ? 30 : 100;
+            return p_60467_.getDestroySpeed(p_60466_, p_60469_) / f / (float)i;
         }
     }
 
@@ -389,6 +_,7 @@
         return this.isRandomlyTicking;
     }
 
+    @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
     protected SoundType getSoundType(BlockState p_320941_) {
         return this.soundType;
     }
@@ -405,6 +_,10 @@
         return this.properties.destroyTime;
     }
 
+    protected boolean isAir(BlockState state) {
+        return ((BlockStateBase)state).isAir;
+    }
+
     public abstract static class BlockStateBase extends StateHolder<Block, BlockState> {
         private static final Direction[] DIRECTIONS = Direction.values();
         private static final VoxelShape[] EMPTY_OCCLUSION_SHAPES = Util.make(
@@ -561,12 +_,14 @@
             return this.useShapeForLightOcclusion;
         }
 
+        /** @deprecated Forge: Use {@link BlockState#getLightEmission(BlockGetter, BlockPos)} instead */
+        @Deprecated
         public int getLightEmission() {
             return this.lightEmission;
         }
 
         public boolean isAir() {
-            return this.isAir;
+            return this.getBlock().isAir((BlockState)this);
         }
 
         public boolean ignitedByLava() {
@@ -579,9 +_,11 @@
         }
 
         public MapColor getMapColor(BlockGetter p_285002_, BlockPos p_285293_) {
-            return this.mapColor;
+            return getBlock().getMapColor(this.asState(), p_285002_, p_285293_, this.mapColor);
         }
 
+        /** @deprecated use {@link BlockState#rotate(LevelAccessor, BlockPos, Rotation)} */
+        @Deprecated
         public BlockState rotate(Rotation p_60718_) {
             return this.getBlock().rotate(this.asState(), p_60718_);
         }
@@ -635,6 +_,8 @@
         }
 
         public PushReaction getPistonPushReaction() {
+            PushReaction reaction = getBlock().getPistonPushReaction(asState());
+            if (reaction != null) return reaction;
             return this.pushReaction;
         }
 
@@ -762,6 +_,9 @@
         }
 
         public InteractionResult useItemOn(ItemStack p_316374_, Level p_316651_, Player p_316623_, InteractionHand p_316469_, BlockHitResult p_316877_) {
+            var useOnContext = new net.minecraft.world.item.context.UseOnContext(p_316651_, p_316623_, p_316469_, p_316623_.getItemInHand(p_316469_).copy(), p_316877_);
+            var e = net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent(useOnContext, net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent.UsePhase.BLOCK));
+            if (e.isCanceled()) return e.getCancellationResult();
             return this.getBlock().useItemOn(p_316374_, this.asState(), p_316651_, p_316877_.getBlockPos(), p_316623_, p_316469_, p_316877_);
         }
 
@@ -871,6 +_,7 @@
             return this.getBlock().getSeed(this.asState(), p_60727_);
         }
 
+        @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
         public SoundType getSoundType() {
             return this.getBlock().getSoundType(this.asState());
         }
@@ -996,7 +_,7 @@
         BlockBehaviour.StateArgumentPredicate<EntityType<?>> isValidSpawn = (p_360193_, p_360194_, p_360195_, p_360196_) -> p_360193_.isFaceSturdy(
                     p_360194_, p_360195_, Direction.UP
                 )
-                && p_360193_.getLightEmission() < 14;
+                && p_360193_.getLightEmission(p_360194_, p_360195_) < 14;
         BlockBehaviour.StatePredicate isRedstoneConductor = (p_360190_, p_360191_, p_360192_) -> p_360190_.isCollisionShapeFullBlock(p_360191_, p_360192_);
         BlockBehaviour.StatePredicate isSuffocating = (p_360187_, p_360188_, p_360189_) -> p_360187_.blocksMotion()
                 && p_360187_.isCollisionShapeFullBlock(p_360188_, p_360189_);
