--- a/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -111,6 +_,17 @@
         this.dynamicShape = properties.dynamicShape;
         this.requiredFeatures = properties.requiredFeatures;
         this.properties = properties;
+        final ResourceKey<LootTable> lootTableCache = properties.drops;
+        if (lootTableCache != null) {
+            this.lootTableSupplier = () -> lootTableCache;
+        } else if (properties.lootTableSupplier != null) {
+            this.lootTableSupplier = properties.lootTableSupplier;
+        } else {
+            this.lootTableSupplier = () -> {
+                ResourceLocation resourcelocation = BuiltInRegistries.BLOCK.getKey(this.asBlock());
+                return ResourceKey.create(Registries.LOOT_TABLE, resourcelocation.withPrefix("blocks/"));
+            };
+        }
     }
 
     public BlockBehaviour.Properties properties() {
@@ -159,7 +_,7 @@
     }
 
     protected void onRemove(BlockState state, Level level, BlockPos pos, BlockState newState, boolean movedByPiston) {
-        if (state.hasBlockEntity() && !state.is(newState.getBlock())) {
+        if (state.hasBlockEntity() && (!state.is(newState.getBlock()) || !newState.hasBlockEntity())) {
             level.removeBlockEntity(pos);
         }
     }
@@ -168,7 +_,7 @@
         if (!state.isAir() && explosion.getBlockInteraction() != Explosion.BlockInteraction.TRIGGER_BLOCK) {
             Block block = state.getBlock();
             boolean flag = explosion.getIndirectSourceEntity() instanceof Player;
-            if (block.dropFromExplosion(explosion) && level instanceof ServerLevel serverlevel) {
+            if (state.canDropFromExplosion(level, pos, explosion) && level instanceof ServerLevel serverlevel) {
                 BlockEntity blockentity = state.hasBlockEntity() ? level.getBlockEntity(pos) : null;
                 LootParams.Builder lootparams$builder = new LootParams.Builder(serverlevel)
                     .withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(pos))
@@ -183,8 +_,7 @@
                 state.getDrops(lootparams$builder).forEach(p_311752_ -> dropConsumer.accept(p_311752_, pos));
             }
 
-            level.setBlock(pos, Blocks.AIR.defaultBlockState(), 3);
-            block.wasExploded(level, pos, explosion);
+            state.onBlockExploded(level, pos, explosion);
         }
     }
 
@@ -335,8 +_,8 @@
         if (f == -1.0F) {
             return 0.0F;
         } else {
-            int i = player.hasCorrectToolForDrops(state) ? 30 : 100;
-            return player.getDestroySpeed(state) / f / (float)i;
+            int i = net.neoforged.neoforge.event.EventHooks.doPlayerHarvestCheck(player, state, level, pos) ? 30 : 100;
+            return player.getDigSpeed(state, pos) / f / (float)i;
         }
     }
 
@@ -359,8 +_,7 @@
 
     public final ResourceKey<LootTable> getLootTable() {
         if (this.drops == null) {
-            ResourceLocation resourcelocation = BuiltInRegistries.BLOCK.getKey(this.asBlock());
-            this.drops = ResourceKey.create(Registries.LOOT_TABLE, resourcelocation.withPrefix("blocks/"));
+            this.drops = this.lootTableSupplier.get();
         }
 
         return this.drops;
@@ -377,6 +_,7 @@
         return this.isRandomlyTicking;
     }
 
+    @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
     protected SoundType getSoundType(BlockState state) {
         return this.soundType;
     }
@@ -393,6 +_,13 @@
         return this.properties.destroyTime;
     }
 
+    protected boolean isAir(BlockState state) {
+        return ((BlockStateBase)state).isAir;
+    }
+
+    // Neo: Holds the loot table for this block's drops. Used for getLootTable method.
+    private final java.util.function.Supplier<ResourceKey<LootTable>> lootTableSupplier;
+
     public abstract static class BlockStateBase extends StateHolder<Block, BlockState> {
         private final int lightEmission;
         private final boolean useShapeForLightOcclusion;
@@ -523,12 +_,14 @@
             return this.useShapeForLightOcclusion;
         }
 
+        /** @deprecated Forge: Use {@link BlockState#getLightEmission(BlockGetter, BlockPos)} instead */
+        @Deprecated
         public int getLightEmission() {
             return this.lightEmission;
         }
 
         public boolean isAir() {
-            return this.isAir;
+            return this.getBlock().isAir((BlockState)this);
         }
 
         public boolean ignitedByLava() {
@@ -541,9 +_,11 @@
         }
 
         public MapColor getMapColor(BlockGetter level, BlockPos pos) {
-            return this.mapColor;
+            return getBlock().getMapColor(this.asState(), level, pos, this.mapColor);
         }
 
+        /** @deprecated use {@link BlockState#rotate(LevelAccessor, BlockPos, Rotation)} */
+        @Deprecated
         public BlockState rotate(Rotation rotation) {
             return this.getBlock().rotate(this.asState(), rotation);
         }
@@ -597,6 +_,8 @@
         }
 
         public PushReaction getPistonPushReaction() {
+            PushReaction reaction = getBlock().getPistonPushReaction(asState());
+            if (reaction != null) return reaction;
             return this.pushReaction;
         }
 
@@ -724,6 +_,9 @@
         }
 
         public ItemInteractionResult useItemOn(ItemStack stack, Level level, Player player, InteractionHand hand, BlockHitResult hitResult) {
+            var useOnContext = new net.minecraft.world.item.context.UseOnContext(level, player, hand, player.getItemInHand(hand).copy(), hitResult);
+            var e = net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent(useOnContext, net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent.UsePhase.BLOCK));
+            if (e.isCanceled()) return e.getCancellationResult();
             return this.getBlock().useItemOn(stack, this.asState(), level, hitResult.getBlockPos(), player, hand, hitResult);
         }
 
@@ -825,6 +_,7 @@
             return this.getBlock().getSeed(this.asState(), pos);
         }
 
+        @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
         public SoundType getSoundType() {
             return this.getBlock().getSoundType(this.asState());
         }
@@ -959,11 +_,12 @@
         PushReaction pushReaction = PushReaction.NORMAL;
         boolean spawnTerrainParticles = true;
         NoteBlockInstrument instrument = NoteBlockInstrument.HARP;
+        private java.util.function.Supplier<ResourceKey<LootTable>> lootTableSupplier;
         boolean replaceable;
         BlockBehaviour.StateArgumentPredicate<EntityType<?>> isValidSpawn = (p_284893_, p_284894_, p_284895_, p_284896_) -> p_284893_.isFaceSturdy(
                     p_284894_, p_284895_, Direction.UP
                 )
-                && p_284893_.getLightEmission() < 14;
+                && p_284893_.getLightEmission(p_284894_, p_284895_) < 14;
         BlockBehaviour.StatePredicate isRedstoneConductor = (p_284888_, p_284889_, p_284890_) -> p_284888_.isCollisionShapeFullBlock(p_284889_, p_284890_);
         BlockBehaviour.StatePredicate isSuffocating = (p_284885_, p_284886_, p_284887_) -> p_284885_.blocksMotion()
                 && p_284885_.isCollisionShapeFullBlock(p_284886_, p_284887_);
@@ -1105,9 +_,15 @@
             return this;
         }
 
+        @Deprecated // FORGE: Use the variant that takes a Supplier below
         public BlockBehaviour.Properties dropsLike(Block block) {
-            this.drops = block.getLootTable();
+            this.lootTableSupplier = () -> block.getLootTable();
             return this;
+        }
+
+        public BlockBehaviour.Properties lootFrom(java.util.function.Supplier<? extends Block> blockIn) {
+             this.lootTableSupplier = () -> blockIn.get().getLootTable();
+             return this;
         }
 
         public BlockBehaviour.Properties ignitedByLava() {
