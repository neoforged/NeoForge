--- a/net/minecraft/world/level/block/ConcretePowderBlock.java
+++ b/net/minecraft/world/level/block/ConcretePowderBlock.java
@@ -34,7 +_,7 @@
 
     @Override
     public void onLand(Level level, BlockPos pos, BlockState state, BlockState replaceableState, FallingBlockEntity fallingBlock) {
-        if (shouldSolidify(level, pos, replaceableState)) {
+        if (shouldSolidify(level, pos, state, replaceableState.getFluidState())) { // Forge: Use block of falling entity instead of block at replaced position, and check if shouldSolidify with the FluidState of the replaced block
             level.setBlock(pos, this.concrete.defaultBlockState(), 3);
         }
     }
@@ -47,20 +_,24 @@
         return shouldSolidify(blockgetter, blockpos, blockstate) ? this.concrete.defaultBlockState() : super.getStateForPlacement(context);
     }
 
+    private static boolean shouldSolidify(BlockGetter level, BlockPos pos, BlockState state, net.minecraft.world.level.material.FluidState fluidState) {
+        return state.canBeHydrated(level, pos, fluidState, pos) || touchesLiquid(level, pos, state);
+    }
+
     private static boolean shouldSolidify(BlockGetter level, BlockPos pos, BlockState state) {
-        return canSolidify(state) || touchesLiquid(level, pos);
+        return shouldSolidify(level, pos, state, level.getFluidState(pos));
     }
 
-    private static boolean touchesLiquid(BlockGetter level, BlockPos pos) {
+    private static boolean touchesLiquid(BlockGetter level, BlockPos pos, BlockState state) {
         boolean flag = false;
         BlockPos.MutableBlockPos blockpos$mutableblockpos = pos.mutable();
 
         for (Direction direction : Direction.values()) {
             BlockState blockstate = level.getBlockState(blockpos$mutableblockpos);
-            if (direction != Direction.DOWN || canSolidify(blockstate)) {
+            if (direction != Direction.DOWN || state.canBeHydrated(level, pos, blockstate.getFluidState(), blockpos$mutableblockpos)) {
                 blockpos$mutableblockpos.setWithOffset(pos, direction);
                 blockstate = level.getBlockState(blockpos$mutableblockpos);
-                if (canSolidify(blockstate) && !blockstate.isFaceSturdy(level, pos, direction.getOpposite())) {
+                if (state.canBeHydrated(level, pos, blockstate.getFluidState(), blockpos$mutableblockpos) && !blockstate.isFaceSturdy(level, pos, direction.getOpposite())) {
                     flag = true;
                     break;
                 }
@@ -76,7 +_,7 @@
 
     @Override
     protected BlockState updateShape(BlockState state, Direction facing, BlockState facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
-        return touchesLiquid(level, currentPos)
+        return touchesLiquid(level, currentPos, state)
             ? this.concrete.defaultBlockState()
             : super.updateShape(state, facing, facingState, level, currentPos, facingPos);
     }
