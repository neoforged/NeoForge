--- a/net/minecraft/world/level/block/FlowerPotBlock.java
+++ b/net/minecraft/world/level/block/FlowerPotBlock.java
@@ -35,6 +_,7 @@
     private static final Map<Block, Block> POTTED_BY_CONTENT = Maps.newHashMap();
     public static final float AABB_SIZE = 3.0F;
     protected static final VoxelShape SHAPE = Block.box(5.0, 0.0, 5.0, 11.0, 6.0, 11.0);
+    /** Neo: Field accesses are redirected to {@link #getPotted()} with a coremod. */
     private final Block potted;
 
     @Override
@@ -42,10 +_,31 @@
         return CODEC;
     }
 
+    @Deprecated // Mods should use the constructor below
     public FlowerPotBlock(Block p_53528_, BlockBehaviour.Properties p_53529_) {
-        super(p_53529_);
-        this.potted = p_53528_;
-        POTTED_BY_CONTENT.put(p_53528_, this);
+        this(Blocks.FLOWER_POT == null ? null : () -> (FlowerPotBlock) Blocks.FLOWER_POT, () -> p_53528_, p_53529_);
+        if (Blocks.FLOWER_POT != null) {
+            ((FlowerPotBlock)Blocks.FLOWER_POT).addPlant(net.minecraft.core.registries.BuiltInRegistries.BLOCK.getKey(p_53528_), () -> this);
+        }
+    }
+
+    /**
+     * For mod use, eliminates the need to extend this class, and prevents modded
+     * flower pots from altering vanilla behavior.
+     *
+     * @param emptyPot The empty pot for this pot, or null for self.
+     */
+    public FlowerPotBlock(@org.jetbrains.annotations.Nullable java.util.function.Supplier<FlowerPotBlock> emptyPot, java.util.function.Supplier<? extends Block> p_53528_, BlockBehaviour.Properties properties) {
+        super(properties);
+        this.potted = null; // Unused, redirected by coremod
+        this.flowerDelegate = p_53528_;
+        if (emptyPot == null) {
+            this.fullPots = Maps.newHashMap();
+            this.emptyPot = null;
+        } else {
+            this.fullPots = java.util.Collections.emptyMap();
+            this.emptyPot = emptyPot;
+        }
     }
 
     @Override
@@ -58,7 +_,7 @@
         ItemStack p_316610_, BlockState p_316240_, Level p_316456_, BlockPos p_316502_, Player p_316491_, InteractionHand p_316444_, BlockHitResult p_316826_
     ) {
         BlockState blockstate = (p_316610_.getItem() instanceof BlockItem blockitem
-                ? POTTED_BY_CONTENT.getOrDefault(blockitem.getBlock(), Blocks.AIR)
+                ? getEmptyPot().fullPots.getOrDefault(net.minecraft.core.registries.BuiltInRegistries.BLOCK.getKey(blockitem.getBlock()), () -> Blocks.AIR).get()
                 : Blocks.AIR)
             .defaultBlockState();
         if (blockstate.isAir()) {
@@ -84,7 +_,7 @@
                 p_316338_.drop(itemstack, false);
             }
 
-            p_316655_.setBlock(p_316654_, Blocks.FLOWER_POT.defaultBlockState(), 3);
+            p_316655_.setBlock(p_316654_, getEmptyPot().defaultBlockState(), 3);
             p_316655_.gameEvent(p_316338_, GameEvent.BLOCK_CHANGE, p_316654_);
             return InteractionResult.SUCCESS;
         }
@@ -116,11 +_,44 @@
     }
 
     public Block getPotted() {
-        return this.potted;
+        return flowerDelegate.get();
     }
 
     @Override
     protected boolean isPathfindable(BlockState p_53535_, PathComputationType p_53538_) {
         return false;
+    }
+
+    // Neo: Maps flower blocks to the filled flower pot equivalent
+    private final Map<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<? extends Block>> fullPots;
+
+    @org.jetbrains.annotations.Nullable
+    private final java.util.function.Supplier<FlowerPotBlock> emptyPot;
+
+    private final java.util.function.Supplier<? extends Block> flowerDelegate;
+
+    public FlowerPotBlock getEmptyPot() {
+         return emptyPot == null ? this : emptyPot.get();
+    }
+
+    /**
+     * Maps the given flower to the filled pot it is for.
+     * Call this on the empty pot block. Attempting to call this on a filled pot will throw an exception.
+     *
+     * @param flower The ResourceLocation of the flower block. Not flower item
+     * @param fullPot The filled flower pot to map the flower block to
+     */
+    public void addPlant(net.minecraft.resources.ResourceLocation flower, java.util.function.Supplier<? extends Block> fullPot) {
+         if (getEmptyPot() != this) {
+              throw new IllegalArgumentException("Cannot add plant to non-empty pot: " + this + " (Please call addPlant on the empty pot instead)");
+         }
+         fullPots.put(flower, fullPot);
+    }
+
+    /**
+     * Returns all the filled pots that can be spawned from filling this pot. (If this pot is filled, returned map will be empty)
+     */
+    public Map<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<? extends Block>> getFullPotsView() {
+        return java.util.Collections.unmodifiableMap(fullPots);
     }
 }
