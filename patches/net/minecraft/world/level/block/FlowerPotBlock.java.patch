--- a/net/minecraft/world/level/block/FlowerPotBlock.java
+++ b/net/minecraft/world/level/block/FlowerPotBlock.java
@@ -35,6 +_,7 @@
     private static final Map<Block, Block> POTTED_BY_CONTENT = Maps.newHashMap();
     public static final float AABB_SIZE = 3.0F;
     protected static final VoxelShape SHAPE = Block.box(5.0, 0.0, 5.0, 11.0, 6.0, 11.0);
+    /** Neo: Field accesses are redirected to {@link #getPotted()} with a coremod. */
     private final Block potted;
 
     @Override
@@ -42,10 +_,31 @@
         return CODEC;
     }
 
+    @Deprecated // Mods should use the constructor below
     public FlowerPotBlock(Block p_53528_, BlockBehaviour.Properties p_53529_) {
-        super(p_53529_);
-        this.potted = p_53528_;
-        POTTED_BY_CONTENT.put(p_53528_, this);
+        this(Blocks.FLOWER_POT == null ? null : () -> (FlowerPotBlock) Blocks.FLOWER_POT, () -> p_53528_, p_53529_);
+        if (Blocks.FLOWER_POT != null) {
+            ((FlowerPotBlock)Blocks.FLOWER_POT).addPlant(net.minecraft.core.registries.BuiltInRegistries.BLOCK.getKey(p_53528_), () -> this);
+        }
+    }
+
+    /**
+     * For mod use, eliminates the need to extend this class, and prevents modded
+     * flower pots from altering vanilla behavior.
+     *
+     * @param emptyPot The empty pot for this pot, or null for self.
+     */
+    public FlowerPotBlock(@org.jetbrains.annotations.Nullable java.util.function.Supplier<FlowerPotBlock> emptyPot, java.util.function.Supplier<? extends Block> p_53528_, BlockBehaviour.Properties properties) {
+        super(properties);
+        this.potted = null; // Unused, redirected by coremod
+        this.flowerDelegate = p_53528_;
+        if (emptyPot == null) {
+            this.fullPots = Maps.newHashMap();
+            this.emptyPot = null;
+        } else {
+            this.fullPots = java.util.Collections.emptyMap();
+            this.emptyPot = emptyPot;
+        }
     }
 
     @Override
@@ -62,7 +_,7 @@
     public InteractionResult use(BlockState p_53540_, Level p_53541_, BlockPos p_53542_, Player p_53543_, InteractionHand p_53544_, BlockHitResult p_53545_) {
         ItemStack itemstack = p_53543_.getItemInHand(p_53544_);
         Item item = itemstack.getItem();
-        BlockState blockstate = (item instanceof BlockItem ? POTTED_BY_CONTENT.getOrDefault(((BlockItem)item).getBlock(), Blocks.AIR) : Blocks.AIR)
+        BlockState blockstate = (item instanceof BlockItem ? getEmptyPot().fullPots.getOrDefault(net.minecraft.core.registries.BuiltInRegistries.BLOCK.getKey(((BlockItem)item).getBlock()), () -> Blocks.AIR).get() : Blocks.AIR)
             .defaultBlockState();
         boolean flag = blockstate.is(Blocks.AIR);
         boolean flag1 = this.isEmpty();
@@ -81,7 +_,7 @@
                     p_53543_.drop(itemstack1, false);
                 }
 
-                p_53541_.setBlock(p_53542_, Blocks.FLOWER_POT.defaultBlockState(), 3);
+                p_53541_.setBlock(p_53542_, getEmptyPot().defaultBlockState(), 3);
             }
 
             p_53541_.gameEvent(p_53543_, GameEvent.BLOCK_CHANGE, p_53542_);
@@ -108,11 +_,32 @@
     }
 
     public Block getPotted() {
-        return this.potted;
+        return flowerDelegate.get();
     }
 
     @Override
     public boolean isPathfindable(BlockState p_53535_, BlockGetter p_53536_, BlockPos p_53537_, PathComputationType p_53538_) {
         return false;
     }
+
+    //Forge Start
+    private final Map<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<? extends Block>> fullPots;
+    private final java.util.function.Supplier<FlowerPotBlock> emptyPot;
+    private final java.util.function.Supplier<? extends Block> flowerDelegate;
+
+    public FlowerPotBlock getEmptyPot() {
+         return emptyPot == null ? this : emptyPot.get();
+    }
+
+    public void addPlant(net.minecraft.resources.ResourceLocation flower, java.util.function.Supplier<? extends Block> fullPot) {
+         if (getEmptyPot() != this) {
+              throw new IllegalArgumentException("Cannot add plant to non-empty pot: " + this);
+         }
+         fullPots.put(flower, fullPot);
+    }
+
+    public Map<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<? extends Block>> getFullPotsView() {
+        return java.util.Collections.unmodifiableMap(fullPots);
+    }
+    //Forge End
 }
