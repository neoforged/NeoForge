--- a/net/minecraft/world/level/block/FireBlock.java
+++ b/net/minecraft/world/level/block/FireBlock.java
@@ -132,13 +_,13 @@
     protected BlockState getStateForPlacement(BlockGetter level, BlockPos pos) {
         BlockPos blockpos = pos.below();
         BlockState blockstate = level.getBlockState(blockpos);
-        if (!this.canBurn(blockstate) && !blockstate.isFaceSturdy(level, blockpos, Direction.UP)) {
+        if (!this.canCatchFire(level, blockpos, Direction.UP) && !blockstate.isFaceSturdy(level, blockpos, Direction.UP)) {
             BlockState blockstate1 = this.defaultBlockState();
 
             for (Direction direction : Direction.values()) {
                 BooleanProperty booleanproperty = PROPERTY_BY_DIRECTION.get(direction);
                 if (booleanproperty != null) {
-                    blockstate1 = blockstate1.setValue(booleanproperty, Boolean.valueOf(this.canBurn(level.getBlockState(pos.relative(direction)))));
+                    blockstate1 = blockstate1.setValue(booleanproperty, Boolean.valueOf(this.canCatchFire(level, pos.relative(direction), direction.getOpposite())));
                 }
             }
 
@@ -163,7 +_,7 @@
             }
 
             BlockState blockstate = level.getBlockState(pos.below());
-            boolean flag = blockstate.is(level.dimensionType().infiniburn());
+            boolean flag = blockstate.isFireSource(level, pos, Direction.UP);
             int i = state.getValue(AGE);
             if (!flag && level.isRaining() && this.isNearRain(level, pos) && random.nextFloat() < 0.2F + (float)i * 0.03F) {
                 level.removeBlock(pos, false);
@@ -184,7 +_,7 @@
                         return;
                     }
 
-                    if (i == 15 && random.nextInt(4) == 0 && !this.canBurn(level.getBlockState(pos.below()))) {
+                    if (i == 15 && random.nextInt(4) == 0 && !this.canCatchFire(level, pos.below(), Direction.UP)) {
                         level.removeBlock(pos, false);
                         return;
                     }
@@ -192,12 +_,12 @@
 
                 boolean flag1 = level.getBiome(pos).is(BiomeTags.INCREASED_FIRE_BURNOUT);
                 int k = flag1 ? -50 : 0;
-                this.checkBurnOut(level, pos.east(), 300 + k, random, i);
-                this.checkBurnOut(level, pos.west(), 300 + k, random, i);
-                this.checkBurnOut(level, pos.below(), 250 + k, random, i);
-                this.checkBurnOut(level, pos.above(), 250 + k, random, i);
-                this.checkBurnOut(level, pos.north(), 300 + k, random, i);
-                this.checkBurnOut(level, pos.south(), 300 + k, random, i);
+                this.checkBurnOut(level, pos.east(), 300 + k, random, i, Direction.WEST);
+                this.checkBurnOut(level, pos.west(), 300 + k, random, i, Direction.EAST);
+                this.checkBurnOut(level, pos.below(), 250 + k, random, i, Direction.UP);
+                this.checkBurnOut(level, pos.above(), 250 + k, random, i, Direction.DOWN);
+                this.checkBurnOut(level, pos.north(), 300 + k, random, i, Direction.SOUTH);
+                this.checkBurnOut(level, pos.south(), 300 + k, random, i, Direction.NORTH);
                 BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
                 for (int l = -1; l <= 1; l++) {
@@ -240,33 +_,32 @@
             || level.isRainingAt(pos.south());
     }
 
+    @Deprecated //Forge: Use IForgeBlockState.getFlammability, Public for default implementation only.
     public int getBurnOdds(BlockState state) {
         return state.hasProperty(BlockStateProperties.WATERLOGGED) && state.getValue(BlockStateProperties.WATERLOGGED)
             ? 0
             : this.burnOdds.getInt(state.getBlock());
     }
 
+    @Deprecated //Forge: Use IForgeBlockState.getFireSpreadSpeed
     public int getIgniteOdds(BlockState state) {
         return state.hasProperty(BlockStateProperties.WATERLOGGED) && state.getValue(BlockStateProperties.WATERLOGGED)
             ? 0
             : this.igniteOdds.getInt(state.getBlock());
     }
 
-    private void checkBurnOut(Level level, BlockPos pos, int chance, RandomSource random, int age) {
-        int i = this.getBurnOdds(level.getBlockState(pos));
+    private void checkBurnOut(Level level, BlockPos pos, int chance, RandomSource random, int age, Direction face) {
+        int i = level.getBlockState(pos).getFlammability(level, pos, face);
         if (random.nextInt(chance) < i) {
             BlockState blockstate = level.getBlockState(pos);
+            blockstate.onCaughtFire(level, pos, face, null);
+
             if (random.nextInt(age + 10) < 5 && !level.isRainingAt(pos)) {
                 int j = Math.min(age + random.nextInt(5) / 4, 15);
                 level.setBlock(pos, this.getStateWithAge(level, pos, j), 3);
             } else {
                 level.removeBlock(pos, false);
             }
-
-            Block block = blockstate.getBlock();
-            if (block instanceof TntBlock) {
-                TntBlock.explode(level, pos);
-            }
         }
     }
 
@@ -277,7 +_,7 @@
 
     private boolean isValidFireLocation(BlockGetter level, BlockPos pos) {
         for (Direction direction : Direction.values()) {
-            if (this.canBurn(level.getBlockState(pos.relative(direction)))) {
+            if (this.canCatchFire(level, pos.relative(direction), direction.getOpposite())) {
                 return true;
             }
         }
@@ -293,7 +_,7 @@
 
             for (Direction direction : Direction.values()) {
                 BlockState blockstate = level.getBlockState(pos.relative(direction));
-                i = Math.max(this.getIgniteOdds(blockstate), i);
+                i = Math.max(blockstate.getFireSpreadSpeed(level, pos.relative(direction), direction.getOpposite()), i);
             }
 
             return i;
@@ -301,6 +_,7 @@
     }
 
     @Override
+    @Deprecated //Forge: Use canCatchFire with more context
     protected boolean canBurn(BlockState state) {
         return this.getIgniteOdds(state) > 0;
     }
@@ -321,8 +_,21 @@
     }
 
     public void setFlammable(Block block, int encouragement, int flammability) {
+        if (block == Blocks.AIR) throw new IllegalArgumentException("Tried to set air on fire... This is bad.");
         this.igniteOdds.put(block, encouragement);
         this.burnOdds.put(block, flammability);
+    }
+
+    /**
+     * Side sensitive version that calls the block function.
+     *
+     * @param world The current world
+     * @param pos Block position
+     * @param face The side the fire is coming from
+     * @return True if the face can catch fire.
+     */
+    public boolean canCatchFire(BlockGetter world, BlockPos pos, Direction face) {
+        return world.getBlockState(pos).isFlammable(world, pos, face);
     }
 
     public static void bootStrap() {
