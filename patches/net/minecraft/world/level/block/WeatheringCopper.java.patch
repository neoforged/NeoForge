--- a/net/minecraft/world/level/block/WeatheringCopper.java
+++ b/net/minecraft/world/level/block/WeatheringCopper.java
@@ -10,6 +_,9 @@
 import net.minecraft.world.level.block.state.BlockState;
 
 public interface WeatheringCopper extends ChangeOverTimeBlock<WeatheringCopper.WeatherState> {
+    /**
+     * @deprecated Use the DataMap {@link net.neoforged.neoforge.registries.datamaps.builtin.NeoForgeDataMaps#OXIDIZING_BLOCKS}
+     */
     Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(
         () -> ImmutableBiMap.<Block, Block>builder()
                 .put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER)
@@ -41,16 +_,20 @@
                 .put(Blocks.WEATHERED_COPPER_BULB, Blocks.OXIDIZED_COPPER_BULB)
                 .build()
     );
+    /**
+     * @deprecated Use the Inverse map generated from the DataMap {@link WeatheringCopper#INVERSE_DATAMAP}
+     */
     Supplier<BiMap<Block, Block>> PREVIOUS_BY_BLOCK = Suppliers.memoize(() -> NEXT_BY_BLOCK.get().inverse());
+    java.util.HashMap<Block, Block> INVERSE_DATAMAP = new java.util.HashMap<>();
 
     static Optional<Block> getPrevious(Block p_154891_) {
-        return Optional.ofNullable(PREVIOUS_BY_BLOCK.get().get(p_154891_));
+        return Optional.ofNullable(INVERSE_DATAMAP.get(p_154891_));
     }
 
     static Block getFirst(Block p_154898_) {
         Block block = p_154898_;
 
-        for (Block block1 = PREVIOUS_BY_BLOCK.get().get(p_154898_); block1 != null; block1 = PREVIOUS_BY_BLOCK.get().get(block1)) {
+        for (Block block1 = INVERSE_DATAMAP.get(p_154898_); block1 != null; block1 = INVERSE_DATAMAP.get(block1)) {
             block = block1;
         }
 
@@ -62,7 +_,9 @@
     }
 
     static Optional<Block> getNext(Block p_154905_) {
-        return Optional.ofNullable(NEXT_BY_BLOCK.get().get(p_154905_));
+        net.neoforged.neoforge.registries.datamaps.builtin.Oxidizable oxidizable = p_154905_.builtInRegistryHolder().getData(net.neoforged.neoforge.registries.datamaps.builtin.NeoForgeDataMaps.OXIDIZING_BLOCKS);
+        Block block = oxidizable != null ? oxidizable.after() : null;
+        return Optional.ofNullable(block);
     }
 
     static BlockState getFirst(BlockState p_154907_) {
