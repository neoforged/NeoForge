--- a/net/minecraft/world/level/block/WeatheringCopper.java
+++ b/net/minecraft/world/level/block/WeatheringCopper.java
@@ -4,6 +_,7 @@
 import com.google.common.collect.BiMap;
 import com.google.common.collect.ImmutableBiMap;
 import com.mojang.serialization.Codec;
+
 import java.util.Optional;
 import java.util.function.Supplier;
 import net.minecraft.util.StringRepresentable;
@@ -11,7 +_,7 @@
 
 public interface WeatheringCopper extends ChangeOverTimeBlock<WeatheringCopper.WeatherState> {
     Supplier<BiMap<Block, Block>> NEXT_BY_BLOCK = Suppliers.memoize(
-        () -> ImmutableBiMap.<Block, Block>builder()
+        () -> com.google.common.collect.HashBiMap.create(ImmutableBiMap.<Block, Block>builder()
                 .put(Blocks.COPPER_BLOCK, Blocks.EXPOSED_COPPER)
                 .put(Blocks.EXPOSED_COPPER, Blocks.WEATHERED_COPPER)
                 .put(Blocks.WEATHERED_COPPER, Blocks.OXIDIZED_COPPER)
@@ -39,7 +_,7 @@
                 .put(Blocks.COPPER_BULB, Blocks.EXPOSED_COPPER_BULB)
                 .put(Blocks.EXPOSED_COPPER_BULB, Blocks.WEATHERED_COPPER_BULB)
                 .put(Blocks.WEATHERED_COPPER_BULB, Blocks.OXIDIZED_COPPER_BULB)
-                .build()
+                .build())
     );
     Supplier<BiMap<Block, Block>> PREVIOUS_BY_BLOCK = Suppliers.memoize(() -> NEXT_BY_BLOCK.get().inverse());
 
@@ -77,6 +_,21 @@
     @Override
     default float getChanceModifier() {
         return this.getAge() == WeatheringCopper.WeatherState.UNAFFECTED ? 0.75F : 1.0F;
+    }
+
+    /**
+     * Registers a before and after blocks that can oxidize and de-oxidize
+     * <p>
+     * Important: This should be done during {@link net.neoforged.fml.event.lifecycle.FMLCommonSetupEvent} as the map behind this is NOT thread safe.
+     *
+     * @param before block with less oxidization
+     * @param after  block with more oxidization
+     */
+    static void registerOxidizableBlock(Block before, Block after) {
+        java.util.Objects.requireNonNull(before, "Oxidizable Block before must not be null");
+        java.util.Objects.requireNonNull(after, "Oxidizable Block after must not be null");
+
+        WeatheringCopper.NEXT_BY_BLOCK.get().put(before, after);
     }
 
     public static enum WeatherState implements StringRepresentable {
