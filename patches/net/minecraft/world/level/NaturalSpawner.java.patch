--- a/net/minecraft/world/level/NaturalSpawner.java
+++ b/net/minecraft/world/level/NaturalSpawner.java
@@ -45,6 +_,7 @@
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
 
+// TODO: ForgeHooks.canEntitySpawn
 public final class NaturalSpawner {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int MIN_SPAWN_DISTANCE = 24;
@@ -69,7 +_,7 @@
                 continue;
             }
 
-            MobCategory mobcategory = entity.getType().getCategory();
+            MobCategory mobcategory = entity.getClassification(true);
             if (mobcategory != MobCategory.MISC) {
                 BlockPos blockpos = entity.blockPosition();
                 chunkGetter.query(
@@ -199,7 +_,7 @@
                                     l1++;
                                     level.addFreshEntityWithPassengers(mob);
                                     callback.run(mob, chunk);
-                                    if (j >= mob.getMaxSpawnClusterSize()) {
+                                    if (j >= net.neoforged.neoforge.event.EventHooks.getMaxSpawnClusterSize(mob)) {
                                         return;
                                     }
 
@@ -272,7 +_,7 @@
         return distance > (double)(mob.getType().getCategory().getDespawnDistance() * mob.getType().getCategory().getDespawnDistance())
                 && mob.removeWhenFarAway(distance)
             ? false
-            : mob.checkSpawnRules(level, MobSpawnType.NATURAL) && mob.checkSpawnObstruction(level);
+            : net.neoforged.neoforge.event.EventHooks.checkSpawnPosition(mob, level, MobSpawnType.NATURAL);
     }
 
     private static Optional<MobSpawnSettings.SpawnerData> getRandomSpawnMobAt(
@@ -303,9 +_,14 @@
         BlockPos pos,
         @Nullable Holder<Biome> biome
     ) {
-        return isInNetherFortressBounds(pos, level, category, structureManager)
-            ? NetherFortressStructure.FORTRESS_ENEMIES
-            : generator.getMobsAt(biome != null ? biome : level.getBiome(pos), structureManager, category, pos);
+        // Forge: Add in potential spawns, and replace hardcoded nether fortress mob list
+        if (isInNetherFortressBounds(pos, level, category, structureManager)) {
+            var monsterSpawns = structureManager.registryAccess().registryOrThrow(Registries.STRUCTURE).getOrThrow(BuiltinStructures.FORTRESS).spawnOverrides().get(MobCategory.MONSTER);
+            if (monsterSpawns != null) { // structure modifiers can clear the spawn overrides
+                return net.neoforged.neoforge.event.EventHooks.getPotentialSpawns(level, category, pos, monsterSpawns.spawns());
+            }
+        }
+        return net.neoforged.neoforge.event.EventHooks.getPotentialSpawns(level, category, pos, generator.getMobsAt(biome != null ? biome : level.getBiome(pos), structureManager, category, pos));
     }
 
     public static boolean isInNetherFortressBounds(BlockPos pos, ServerLevel level, MobCategory category, StructureManager structureManager) {
@@ -392,8 +_,7 @@
 
                                 entity.moveTo(d0, (double)blockpos.getY(), d1, random.nextFloat() * 360.0F, 0.0F);
                                 if (entity instanceof Mob mob
-                                    && mob.checkSpawnRules(levelAccessor, MobSpawnType.CHUNK_GENERATION)
-                                    && mob.checkSpawnObstruction(levelAccessor)) {
+                                    && net.neoforged.neoforge.event.EventHooks.checkSpawnPosition(mob, levelAccessor, MobSpawnType.CHUNK_GENERATION)) {
                                     spawngroupdata = mob.finalizeSpawn(
                                         levelAccessor, levelAccessor.getCurrentDifficultyAt(mob.blockPosition()), MobSpawnType.CHUNK_GENERATION, spawngroupdata
                                     );
