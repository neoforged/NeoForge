--- a/net/minecraft/world/item/BucketItem.java
+++ b/net/minecraft/world/item/BucketItem.java
@@ -31,9 +_,21 @@
 public class BucketItem extends Item implements DispensibleContainerItem {
    private final Fluid content;
 
+   // Forge: Use the other constructor that takes a Supplier
+   @Deprecated
    public BucketItem(Fluid p_40689_, Item.Properties p_40690_) {
       super(p_40690_);
       this.content = p_40689_;
+      this.fluidSupplier = net.neoforged.neoforge.registries.ForgeRegistries.FLUIDS.getDelegateOrThrow(p_40689_);
+   }
+
+   /**
+    * @param supplier A fluid supplier such as {@link net.neoforged.neoforge.registries.RegistryObject<Fluid>}
+    */
+   public BucketItem(java.util.function.Supplier<? extends Fluid> supplier, Item.Properties builder) {
+      super(builder);
+      this.content = null;
+      this.fluidSupplier = supplier;
    }
 
    @Override
@@ -42,6 +_,8 @@
       BlockHitResult blockhitresult = getPlayerPOVHitResult(
          p_40703_, p_40704_, this.content == Fluids.EMPTY ? ClipContext.Fluid.SOURCE_ONLY : ClipContext.Fluid.NONE
       );
+      InteractionResultHolder<ItemStack> ret = net.neoforged.neoforge.event.EventHooks.onBucketUse(p_40704_, p_40703_, itemstack, blockhitresult);
+      if (ret != null) return ret;
       if (blockhitresult.getType() == HitResult.Type.MISS) {
          return InteractionResultHolder.pass(itemstack);
       } else if (blockhitresult.getType() != HitResult.Type.BLOCK) {
@@ -59,7 +_,7 @@
                ItemStack itemstack2 = bucketpickup.pickupBlock(p_40704_, p_40703_, blockpos, blockstate1);
                if (!itemstack2.isEmpty()) {
                   p_40704_.awardStat(Stats.ITEM_USED.get(this));
-                  bucketpickup.getPickupSound().ifPresent(p_150709_ -> p_40704_.playSound(p_150709_, 1.0F, 1.0F));
+                  bucketpickup.getPickupSound(blockstate1).ifPresent(p_150709_ -> p_40704_.playSound(p_150709_, 1.0F, 1.0F));
                   p_40703_.gameEvent(p_40704_, GameEvent.FLUID_PICKUP, blockpos);
                   ItemStack itemstack1 = ItemUtils.createFilledResult(itemstack, p_40704_, itemstack2);
                   if (!p_40703_.isClientSide) {
@@ -73,8 +_,8 @@
             return InteractionResultHolder.fail(itemstack);
          } else {
             BlockState blockstate = p_40703_.getBlockState(blockpos);
-            BlockPos blockpos2 = blockstate.getBlock() instanceof LiquidBlockContainer && this.content == Fluids.WATER ? blockpos : blockpos1;
-            if (this.emptyContents(p_40704_, p_40703_, blockpos2, blockhitresult)) {
+               BlockPos blockpos2 = canBlockContainFluid(p_40704_, p_40703_, blockpos, blockstate) ? blockpos : blockpos1;
+               if (this.emptyContents(p_40704_, p_40703_, blockpos2, blockhitresult, itemstack)) {
                this.checkExtraContent(p_40704_, p_40703_, itemstack, blockpos2);
                if (p_40704_ instanceof ServerPlayer) {
                   CriteriaTriggers.PLACED_BLOCK.trigger((ServerPlayer)p_40704_, blockpos2, itemstack);
@@ -98,24 +_,29 @@
    }
 
    @Override
+   @Deprecated //Forge: use the ItemStack sensitive version
    public boolean emptyContents(@Nullable Player p_150716_, Level p_150717_, BlockPos p_150718_, @Nullable BlockHitResult p_150719_) {
       Fluid $$6 = this.content;
-      if (!($$6 instanceof FlowingFluid)) {
+      return this.emptyContents(p_150716_, p_150717_, p_150718_, p_150719_, null);
+   }
+
+   public boolean emptyContents(@Nullable Player p_150716_, Level p_150717_, BlockPos p_150718_, @Nullable BlockHitResult p_150719_, @Nullable ItemStack container) {
+      if (!(this.content instanceof FlowingFluid)) {
          return false;
       } else {
          FlowingFluid flowingfluid;
-         Block $$7;
-         boolean $$8;
+         Block block;
+         boolean canBeReplaced;
          boolean flag2;
          BlockState blockstate;
          label82: {
-            flowingfluid = (FlowingFluid)$$6;
+            flowingfluid = (FlowingFluid)this.content;
             blockstate = p_150717_.getBlockState(p_150718_);
-            $$7 = blockstate.getBlock();
-            $$8 = blockstate.canBeReplaced(this.content);
+            block = blockstate.getBlock();
+            canBeReplaced = blockstate.canBeReplaced(this.content);
             label70:
-            if (!blockstate.isAir() && !$$8) {
-               if ($$7 instanceof LiquidBlockContainer liquidblockcontainer
+            if (!blockstate.isAir() && !canBeReplaced) {
+               if (block instanceof LiquidBlockContainer liquidblockcontainer
                   && liquidblockcontainer.canPlaceLiquid(p_150716_, p_150717_, p_150718_, blockstate, this.content)) {
                   break label70;
                }
@@ -128,8 +_,12 @@
          }
 
          boolean flag1 = flag2;
+         java.util.Optional<net.neoforged.neoforge.fluids.FluidStack> containedFluidStack = java.util.Optional.ofNullable(container).flatMap(net.neoforged.neoforge.fluids.FluidUtil::getFluidContained);
          if (!flag1) {
-            return p_150719_ != null && this.emptyContents(p_150716_, p_150717_, p_150719_.getBlockPos().relative(p_150719_.getDirection()), null);
+            return p_150719_ != null && this.emptyContents(p_150716_, p_150717_, p_150719_.getBlockPos().relative(p_150719_.getDirection()), (BlockHitResult)null, container);
+         } else if (containedFluidStack.isPresent() && this.content.getFluidType().isVaporizedOnPlacement(p_150717_, p_150718_, containedFluidStack.get())) {
+            this.content.getFluidType().onVaporize(p_150716_, p_150717_, p_150718_, containedFluidStack.get());
+            return true;
          } else if (p_150717_.dimensionType().ultraWarm() && this.content.is(FluidTags.WATER)) {
             int l = p_150718_.getX();
             int i = p_150718_.getY();
@@ -149,13 +_,13 @@
 
             return true;
          } else {
-            if ($$7 instanceof LiquidBlockContainer liquidblockcontainer1 && this.content == Fluids.WATER) {
+            if (block instanceof LiquidBlockContainer liquidblockcontainer1 && liquidblockcontainer1.canPlaceLiquid(p_150716_, p_150717_, p_150718_, blockstate,content)) {
                liquidblockcontainer1.placeLiquid(p_150717_, p_150718_, blockstate, flowingfluid.getSource(false));
                this.playEmptySound(p_150716_, p_150717_, p_150718_);
                return true;
             }
 
-            if (!p_150717_.isClientSide && $$8 && !blockstate.liquid()) {
+            if (!p_150717_.isClientSide && canBeReplaced && !blockstate.liquid()) {
                p_150717_.destroyBlock(p_150718_, true);
             }
 
@@ -170,8 +_,25 @@
    }
 
    protected void playEmptySound(@Nullable Player p_40696_, LevelAccessor p_40697_, BlockPos p_40698_) {
-      SoundEvent soundevent = this.content.is(FluidTags.LAVA) ? SoundEvents.BUCKET_EMPTY_LAVA : SoundEvents.BUCKET_EMPTY;
+      SoundEvent soundevent = this.content.getFluidType().getSound(p_40696_, p_40697_, p_40698_, net.neoforged.neoforge.common.SoundActions.BUCKET_EMPTY);
+      if(soundevent == null) soundevent = this.content.is(FluidTags.LAVA) ? SoundEvents.BUCKET_EMPTY_LAVA : SoundEvents.BUCKET_EMPTY;
       p_40697_.playSound(p_40696_, p_40698_, soundevent, SoundSource.BLOCKS, 1.0F, 1.0F);
       p_40697_.gameEvent(p_40696_, GameEvent.FLUID_PLACE, p_40698_);
+   }
+
+   @Override
+   public net.neoforged.neoforge.common.capabilities.ICapabilityProvider initCapabilities(ItemStack stack, @Nullable net.minecraft.nbt.CompoundTag nbt) {
+      if (this.getClass() == BucketItem.class)
+         return new net.neoforged.neoforge.fluids.capability.wrappers.FluidBucketWrapper(stack);
+      else
+         return super.initCapabilities(stack, nbt);
+   }
+
+   private final java.util.function.Supplier<? extends Fluid> fluidSupplier;
+   public Fluid getFluid() { return fluidSupplier.get(); }
+
+   protected boolean canBlockContainFluid(@Nullable Player player, Level worldIn, BlockPos posIn, BlockState blockstate)
+   {
+      return blockstate.getBlock() instanceof LiquidBlockContainer && ((LiquidBlockContainer)blockstate.getBlock()).canPlaceLiquid(player, worldIn, posIn, blockstate, this.content);
    }
 }
