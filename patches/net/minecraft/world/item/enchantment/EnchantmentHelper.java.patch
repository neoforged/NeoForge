--- a/net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ b/net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -47,7 +_,19 @@
 import org.apache.commons.lang3.mutable.MutableObject;
 
 public class EnchantmentHelper {
+    /**
+     * @deprecated Neo: Use {@link #getTagEnchantmentLevel(Holder, ItemStack)} for NBT enchantments, or {@link ItemStack#getEnchantmentLevel(Holder)} for gameplay.
+     */
+    @Deprecated
     public static int getItemEnchantmentLevel(Holder<Enchantment> enchantment, ItemStack stack) {
+        // Neo: To reduce patch size, update this method to always check gameplay enchantments, and add getTagEnchantmentLevel as a helper for mods.
+        return stack.getEnchantmentLevel(enchantment);
+    }
+
+    /**
+     * Gets the level of an enchantment from NBT. Use {@link ItemStack#getEnchantmentLevel(Holder)} for gameplay logic.
+     */
+    public static int getTagEnchantmentLevel(Holder<Enchantment> enchantment, ItemStack stack) {
         ItemEnchantments itemenchantments = stack.getOrDefault(DataComponents.ENCHANTMENTS, ItemEnchantments.EMPTY);
         return itemenchantments.getLevel(enchantment);
     }
@@ -122,6 +_,12 @@
     private static void runIterationOnItem(ItemStack stack, EnchantmentHelper.EnchantmentVisitor visitor) {
         ItemEnchantments itemenchantments = stack.getOrDefault(DataComponents.ENCHANTMENTS, ItemEnchantments.EMPTY);
 
+        // Neo: Respect gameplay-only enchantments when doing iterations
+        var lookup = net.neoforged.neoforge.common.CommonHooks.resolveLookup(net.minecraft.core.registries.Registries.ENCHANTMENT);
+        if (lookup != null) {
+            itemenchantments = stack.getAllEnchantments(lookup);
+        }
+
         for (Entry<Holder<Enchantment>> entry : itemenchantments.entrySet()) {
             visitor.accept(entry.getKey(), entry.getIntValue());
         }
@@ -132,6 +_,10 @@
     ) {
         if (!stack.isEmpty()) {
             ItemEnchantments itemenchantments = stack.get(DataComponents.ENCHANTMENTS);
+
+            // Neo: Respect gameplay-only enchantments when doing iterations
+            itemenchantments = stack.getAllEnchantments(entity.registryAccess().lookupOrThrow(net.minecraft.core.registries.Registries.ENCHANTMENT));
+
             if (itemenchantments != null && !itemenchantments.isEmpty()) {
                 EnchantedItemInUse enchantediteminuse = new EnchantedItemInUse(stack, slot, entity);
 
@@ -417,6 +_,12 @@
     public static boolean hasTag(ItemStack stack, TagKey<Enchantment> tag) {
         ItemEnchantments itemenchantments = stack.getOrDefault(DataComponents.ENCHANTMENTS, ItemEnchantments.EMPTY);
 
+        // Neo: Respect gameplay-only enchantments when enchantment effect tag checks
+        var lookup = net.neoforged.neoforge.common.CommonHooks.resolveLookup(net.minecraft.core.registries.Registries.ENCHANTMENT);
+        if (lookup != null) {
+            itemenchantments = stack.getAllEnchantments(lookup);
+        }
+
         for (Entry<Holder<Enchantment>> entry : itemenchantments.entrySet()) {
             Holder<Enchantment> holder = entry.getKey();
             if (holder.is(tag)) {
@@ -484,7 +_,7 @@
 
     public static int getEnchantmentCost(RandomSource random, int enchantNum, int power, ItemStack stack) {
         Item item = stack.getItem();
-        int i = item.getEnchantmentValue();
+        int i = stack.getEnchantmentValue();
         if (i <= 0) {
             return 0;
         } else {
@@ -529,7 +_,7 @@
     public static List<EnchantmentInstance> selectEnchantment(RandomSource random, ItemStack stack, int level, Stream<Holder<Enchantment>> possibleEnchantments) {
         List<EnchantmentInstance> list = Lists.newArrayList();
         Item item = stack.getItem();
-        int i = item.getEnchantmentValue();
+        int i = stack.getEnchantmentValue();
         if (i <= 0) {
             return list;
         } else {
@@ -575,7 +_,9 @@
     public static List<EnchantmentInstance> getAvailableEnchantmentResults(int level, ItemStack stack, Stream<Holder<Enchantment>> possibleEnchantments) {
         List<EnchantmentInstance> list = Lists.newArrayList();
         boolean flag = stack.is(Items.BOOK);
-        possibleEnchantments.filter(p_344529_ -> p_344529_.value().isPrimaryItem(stack) || flag).forEach(p_344478_ -> {
+        // Neo: Rewrite filter logic to call isPrimaryItemFor instead of hardcoded vanilla logic.
+        // The original logic is recorded in the default implementation of IItemExtension#isPrimaryItemFor.
+        possibleEnchantments.filter(stack::isPrimaryItemFor).forEach(p_344478_ -> {
             Enchantment enchantment = p_344478_.value();
 
             for (int i = enchantment.getMaxLevel(); i >= enchantment.getMinLevel(); i--) {
