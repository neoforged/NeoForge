--- a/net/minecraft/world/item/alchemy/PotionBrewing.java
+++ b/net/minecraft/world/item/alchemy/PotionBrewing.java
@@ -19,15 +_,37 @@
     private final List<Ingredient> containers;
     private final List<PotionBrewing.Mix<Potion>> potionMixes;
     private final List<PotionBrewing.Mix<Item>> containerMixes;
+    private final net.neoforged.neoforge.common.brewing.BrewingRecipeRegistry registry;
 
     PotionBrewing(List<Ingredient> containers, List<PotionBrewing.Mix<Potion>> potionMixes, List<PotionBrewing.Mix<Item>> containerMixes) {
+        this(containers, potionMixes, containerMixes, List.of());
+    }
+
+    PotionBrewing(List<Ingredient> containers, List<PotionBrewing.Mix<Potion>> potionMixes, List<PotionBrewing.Mix<Item>> containerMixes, List<net.neoforged.neoforge.common.brewing.IBrewingRecipe> recipes) {
         this.containers = containers;
         this.potionMixes = potionMixes;
         this.containerMixes = containerMixes;
+        this.registry = new net.neoforged.neoforge.common.brewing.BrewingRecipeRegistry(recipes);
     }
 
     public boolean isIngredient(ItemStack stack) {
-        return this.isContainerIngredient(stack) || this.isPotionIngredient(stack);
+        return this.registry.isValidIngredient(stack) || this.isContainerIngredient(stack) || this.isPotionIngredient(stack);
+    }
+
+    /**
+     * Checks if an item stack is a valid input for brewing,
+     * for use in the lower 3 slots where water bottles would normally go.
+     */
+    public boolean isInput(ItemStack stack) {
+        return this.registry.isValidInput(stack) || isContainer(stack);
+    }
+
+    /**
+     * Retrieves recipes that use the more general interface.
+     * This does NOT include the container and potion mixes.
+     */
+    public List<net.neoforged.neoforge.common.brewing.IBrewingRecipe> getRecipes() {
+        return registry.recipes();
     }
 
     private boolean isContainer(ItemStack stack) {
@@ -71,6 +_,7 @@
     }
 
     public boolean hasMix(ItemStack reagent, ItemStack potionItem) {
+        if (registry.hasOutput(reagent, potionItem)) return true;
         return !this.isContainer(reagent) ? false : this.hasContainerMix(reagent, potionItem) || this.hasPotionMix(reagent, potionItem);
     }
 
@@ -103,6 +_,8 @@
         if (potionItem.isEmpty()) {
             return potionItem;
         } else {
+            var customMix = registry.getOutput(potionItem, potion); // Parameters are swapped compared to what vanilla passes!
+            if (!customMix.isEmpty()) return customMix;
             Optional<Holder<Potion>> optional = potionItem.getOrDefault(DataComponents.POTION_CONTENTS, PotionContents.EMPTY).potion();
             if (optional.isEmpty()) {
                 return potionItem;
@@ -127,6 +_,7 @@
     public static PotionBrewing bootstrap(FeatureFlagSet enabledFeatures) {
         PotionBrewing.Builder potionbrewing$builder = new PotionBrewing.Builder(enabledFeatures);
         addVanillaMixes(potionbrewing$builder);
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.brewing.RegisterBrewingRecipesEvent(potionbrewing$builder));
         return potionbrewing$builder.build();
     }
 
@@ -194,6 +_,7 @@
         private final List<Ingredient> containers = new ArrayList<>();
         private final List<PotionBrewing.Mix<Potion>> potionMixes = new ArrayList<>();
         private final List<PotionBrewing.Mix<Item>> containerMixes = new ArrayList<>();
+        private final List<net.neoforged.neoforge.common.brewing.IBrewingRecipe> recipes = new ArrayList<>();
         private final FeatureFlagSet enabledFeatures;
 
         public Builder(FeatureFlagSet enabledFeatures) {
@@ -237,8 +_,26 @@
             }
         }
 
+        /**
+         * Adds a new simple brewing recipe.
+         *
+         * @param input      the ingredient that goes in the same slot as water bottles would
+         * @param ingredient the ingredient that goes in the same slot as nether wart would
+         * @param output     the item stack that will replace the input once brewing is done
+         */
+        public void addRecipe(Ingredient input, Ingredient ingredient, ItemStack output) {
+            addRecipe(new net.neoforged.neoforge.common.brewing.BrewingRecipe(input, ingredient, output));
+        }
+
+        /**
+         * Adds a new brewing recipe with custom logic.
+         */
+        public void addRecipe(net.neoforged.neoforge.common.brewing.IBrewingRecipe recipe) {
+            this.recipes.add(recipe);
+        }
+
         public PotionBrewing build() {
-            return new PotionBrewing(List.copyOf(this.containers), List.copyOf(this.potionMixes), List.copyOf(this.containerMixes));
+            return new PotionBrewing(List.copyOf(this.containers), List.copyOf(this.potionMixes), List.copyOf(this.containerMixes), List.copyOf(this.recipes));
         }
     }
 
