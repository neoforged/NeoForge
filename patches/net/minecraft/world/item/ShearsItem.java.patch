--- a/net/minecraft/world/item/ShearsItem.java
+++ b/net/minecraft/world/item/ShearsItem.java
@@ -59,20 +_,57 @@
             || p_43080_.is(BlockTags.WOOL);
     }
 
+    /**
+     * Neo: Migrate shear behavior into {@link ShearsItem#interactLivingEntity} to call into IShearable instead of relying on {@link net.minecraft.world.entity.Mob#mobInteract}
+     * <p>
+     * To preserve vanilla behavior, this method retains the original flow shared by the various mobInteract overrides.
+     */
+    @Override
+    public InteractionResult interactLivingEntity(ItemStack stack, Player player, LivingEntity entity, net.minecraft.world.InteractionHand hand) {
+        if (entity instanceof net.neoforged.neoforge.common.IShearable target) {
+            BlockPos pos = entity.blockPosition();
+            boolean isClient = entity.level().isClientSide();
+            // Check isShearable on both sides (mirrors vanilla readyForShearing())
+            if (target.isShearable(player, stack, entity.level(), pos)) {
+                // Call onSheared on both sides (mirrors vanilla shear())
+                List<ItemStack> drops = target.onSheared(player, stack, entity.level(), pos);
+                // Spawn drops on the server side using spawnShearedDrop to retain vanilla mob-specific behavior
+                if (entity.level() instanceof net.minecraft.server.level.ServerLevel serverLevel) {
+                    for(ItemStack drop : drops) {
+                        target.spawnShearedDrop(serverLevel, pos, drop);
+                    }
+                }
+                // Call GameEvent.SHEAR on both sides
+                entity.gameEvent(GameEvent.SHEAR, player);
+                // Damage the shear item stack by 1 on the server side
+                if (!isClient) {
+                    stack.hurtAndBreak(1, player, LivingEntity.getSlotForHand(hand));
+                }
+                // Return sided success if the entity was shearable
+                return InteractionResult.SUCCESS;
+            }
+        }
+        return InteractionResult.PASS;
+    }
+
+    @Override
+    public boolean canPerformAction(ItemStack stack, net.neoforged.neoforge.common.ItemAbility itemAbility) {
+        return net.neoforged.neoforge.common.ItemAbilities.DEFAULT_SHEARS_ACTIONS.contains(itemAbility);
+    }
+
     @Override
     public InteractionResult useOn(UseOnContext p_186371_) {
         Level level = p_186371_.getLevel();
         BlockPos blockpos = p_186371_.getClickedPos();
         BlockState blockstate = level.getBlockState(blockpos);
-        if (blockstate.getBlock() instanceof GrowingPlantHeadBlock growingplantheadblock && !growingplantheadblock.isMaxAge(blockstate)) {
+        BlockState blockstate1 = blockstate.getToolModifiedState(p_186371_, net.neoforged.neoforge.common.ItemAbilities.SHEARS_TRIM, false);
+        if (blockstate1 != null) {
             Player player = p_186371_.getPlayer();
             ItemStack itemstack = p_186371_.getItemInHand();
             if (player instanceof ServerPlayer) {
                 CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger((ServerPlayer)player, blockpos, itemstack);
             }
 
-            level.playSound(player, blockpos, SoundEvents.GROWING_PLANT_CROP, SoundSource.BLOCKS, 1.0F, 1.0F);
-            BlockState blockstate1 = growingplantheadblock.getMaxAgeState(blockstate);
             level.setBlockAndUpdate(blockpos, blockstate1);
             level.gameEvent(GameEvent.BLOCK_CHANGE, blockpos, GameEvent.Context.of(p_186371_.getPlayer(), blockstate1));
             if (player != null) {
