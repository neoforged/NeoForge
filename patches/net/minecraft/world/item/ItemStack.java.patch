--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -92,7 +_,7 @@
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.slf4j.Logger;
 
-public final class ItemStack implements DataComponentHolder {
+public final class ItemStack implements DataComponentHolder, net.neoforged.neoforge.common.extensions.IItemStackExtension, net.neoforged.neoforge.common.MutableComponentHolder {
     public static final Codec<Holder<Item>> ITEM_NON_AIR_CODEC = BuiltInRegistries.ITEM
         .holderByNameCodec()
         .validate(
@@ -234,6 +_,10 @@
         return !this.isEmpty() ? this.components.asPatch() : DataComponentPatch.EMPTY;
     }
 
+    public boolean isComponentsPatchEmpty() {
+        return !this.isEmpty() ? this.components.isPatchEmpty() : true;
+    }
+
     public ItemStack(ItemLike p_41599_) {
         this(p_41599_, 1);
     }
@@ -327,7 +_,7 @@
     }
 
     public boolean is(Holder<Item> p_220166_) {
-        return this.getItem().builtInRegistryHolder() == p_220166_;
+        return is(p_220166_.value()); // Neo: Fix comparing for custom holders such as DeferredHolders
     }
 
     public boolean is(HolderSet<Item> p_298683_) {
@@ -339,13 +_,30 @@
     }
 
     public InteractionResult useOn(UseOnContext p_41662_) {
+        if (p_41662_.getPlayer() != null) { // TODO 1.20.5: Make event accept nullable player, and remove this check.
+            var e = net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent(p_41662_, net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent.UsePhase.ITEM_AFTER_BLOCK));
+            if (e.isCanceled()) return e.getCancellationResult().result();
+        }
+        if (!p_41662_.getLevel().isClientSide) return net.neoforged.neoforge.common.CommonHooks.onPlaceItemIntoWorld(p_41662_);
+        return onItemUse(p_41662_, (c) -> getItem().useOn(p_41662_));
+    }
+
+    public InteractionResult onItemUseFirst(UseOnContext p_41662_) {
+        if (p_41662_.getPlayer() != null) { // TODO 1.20.5: Make event accept nullable player, and remove this check.
+            var e = net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent(p_41662_, net.neoforged.neoforge.event.entity.player.UseItemOnBlockEvent.UsePhase.ITEM_BEFORE_BLOCK));
+            if (e.isCanceled()) return e.getCancellationResult().result();
+        }
+        return onItemUse(p_41662_, (c) -> getItem().onItemUseFirst(this, p_41662_));
+    }
+
+    private InteractionResult onItemUse(UseOnContext p_41662_, java.util.function.Function<UseOnContext, InteractionResult> callback) {
         Player player = p_41662_.getPlayer();
         BlockPos blockpos = p_41662_.getClickedPos();
         if (player != null && !player.getAbilities().mayBuild && !this.canPlaceOnBlockInAdventureMode(new BlockInWorld(p_41662_.getLevel(), blockpos, false))) {
             return InteractionResult.PASS;
         } else {
             Item item = this.getItem();
-            InteractionResult interactionresult = item.useOn(p_41662_);
+            InteractionResult interactionresult = callback.apply(p_41662_);
             if (player != null && interactionresult.indicateItemUse()) {
                 player.awardStat(Stats.ITEM_USED.get(item));
             }
@@ -387,7 +_,7 @@
     }
 
     public int getMaxStackSize() {
-        return this.getOrDefault(DataComponents.MAX_STACK_SIZE, Integer.valueOf(1));
+        return this.getItem().getMaxStackSize(this);
     }
 
     public boolean isStackable() {
@@ -399,23 +_,28 @@
     }
 
     public boolean isDamaged() {
-        return this.isDamageableItem() && this.getDamageValue() > 0;
+        return this.isDamageableItem() && getItem().isDamaged(this);
     }
 
     public int getDamageValue() {
-        return Mth.clamp(this.getOrDefault(DataComponents.DAMAGE, Integer.valueOf(0)), 0, this.getMaxDamage());
+        return this.getItem().getDamage(this);
     }
 
     public void setDamageValue(int p_41722_) {
-        this.set(DataComponents.DAMAGE, Mth.clamp(p_41722_, 0, this.getMaxDamage()));
+        this.getItem().setDamage(this, p_41722_);
     }
 
     public int getMaxDamage() {
-        return this.getOrDefault(DataComponents.MAX_DAMAGE, Integer.valueOf(0));
+        return this.getItem().getMaxDamage(this);
     }
 
     public void hurtAndBreak(int p_220158_, RandomSource p_220159_, @Nullable ServerPlayer p_220160_, Runnable p_320659_) {
+        hurtAndBreak(p_220158_, p_220159_, (LivingEntity) p_220160_, p_320659_);
+    }
+
+    public void hurtAndBreak(int p_220158_, RandomSource p_220159_, @Nullable LivingEntity p_220160_, Runnable p_320659_) {
         if (this.isDamageableItem()) {
+            p_220158_ = getItem().damageItem(this, p_220158_, p_220160_, p_320659_);
             if (p_220158_ > 0) {
                 int i = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.UNBREAKING, this);
                 int j = 0;
@@ -432,8 +_,8 @@
                 }
             }
 
-            if (p_220160_ != null && p_220158_ != 0) {
-                CriteriaTriggers.ITEM_DURABILITY_CHANGED.trigger(p_220160_, this, this.getDamageValue() + p_220158_);
+            if (p_220160_ instanceof ServerPlayer sp && p_220158_ != 0) {
+                CriteriaTriggers.ITEM_DURABILITY_CHANGED.trigger(sp, this, this.getDamageValue() + p_220158_);
             }
 
             int l = this.getDamageValue() + p_220158_;
@@ -450,7 +_,7 @@
                 return;
             }
 
-            this.hurtAndBreak(p_41623_, p_41624_.getRandom(), p_41624_ instanceof ServerPlayer serverplayer ? serverplayer : null, () -> {
+            this.hurtAndBreak(p_41623_, p_41624_.getRandom(), p_41624_, () -> {
                 p_41624_.broadcastBreakEvent(p_319898_);
                 Item item = this.getItem();
                 this.shrink(1);
@@ -706,7 +_,7 @@
             return List.of();
         } else {
             List<Component> list = Lists.newArrayList();
-            MutableComponent mutablecomponent = Component.empty().append(this.getHoverName()).withStyle(this.getRarity().color());
+            MutableComponent mutablecomponent = Component.empty().append(this.getHoverName()).withStyle(this.getRarity().getStyleModifier());
             if (this.has(DataComponents.CUSTOM_NAME)) {
                 mutablecomponent.withStyle(ChatFormatting.ITALIC);
             }
@@ -761,6 +_,7 @@
                 list.add(DISABLED_ITEM_TOOLTIP);
             }
 
+            net.neoforged.neoforge.event.EventHooks.onItemTooltip(this, p_41652_, list, p_41653_, p_339637_);
             return list;
         }
     }
@@ -901,11 +_,15 @@
 
     public void forEachModifier(EquipmentSlot p_332001_, BiConsumer<Holder<Attribute>, AttributeModifier> p_330882_) {
         ItemAttributeModifiers itemattributemodifiers = this.getOrDefault(DataComponents.ATTRIBUTE_MODIFIERS, ItemAttributeModifiers.EMPTY);
+        com.google.common.collect.Multimap<Holder<Attribute>, AttributeModifier> multimap;
+        multimap = com.google.common.collect.LinkedHashMultimap.create();
         if (!itemattributemodifiers.modifiers().isEmpty()) {
-            itemattributemodifiers.forEach(p_332001_, p_330882_);
+            itemattributemodifiers.forEach(p_332001_, multimap::put);
         } else {
-            this.getItem().getDefaultAttributeModifiers().forEach(p_332001_, p_330882_);
+            this.getItem().getAttributeModifiers(this).forEach(p_332001_, multimap::put);
         }
+        multimap = net.neoforged.neoforge.common.CommonHooks.getAttributeModifiers(this, p_332001_, multimap);
+        multimap.forEach(p_330882_);
     }
 
     public Component getDisplayName() {
@@ -916,7 +_,7 @@
 
         MutableComponent mutablecomponent1 = ComponentUtils.wrapInSquareBrackets(mutablecomponent);
         if (!this.isEmpty()) {
-            mutablecomponent1.withStyle(this.getRarity().color())
+            mutablecomponent1.withStyle(this.getRarity().getStyleModifier())
                 .withStyle(p_220170_ -> p_220170_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this))));
         }
 
@@ -973,6 +_,8 @@
         this.getItem().onUseTick(p_41732_, p_41733_, this, p_41734_);
     }
 
+    /** @deprecated Forge: Use {@linkplain net.neoforged.neoforge.common.extensions.IItemStackExtension#onDestroyed(ItemEntity, net.minecraft.world.damagesource.DamageSource) damage source sensitive version} */
+    @Deprecated
     public void onDestroyed(ItemEntity p_150925_) {
         this.getItem().onDestroyed(p_150925_);
     }
