--- a/net/minecraft/world/item/Item.java
+++ b/net/minecraft/world/item/Item.java
@@ -55,9 +_,9 @@
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
 
-public class Item implements FeatureElement, ItemLike {
+public class Item implements FeatureElement, ItemLike, net.neoforged.neoforge.common.extensions.IItemExtension {
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final Map<Block, Item> BY_BLOCK = Maps.newHashMap();
+    public static final Map<Block, Item> BY_BLOCK = net.neoforged.neoforge.registries.GameData.getBlockItemMap();
     public static final UUID BASE_ATTACK_DAMAGE_UUID = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
     public static final UUID BASE_ATTACK_SPEED_UUID = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
     public static final int DEFAULT_MAX_STACK_SIZE = 64;
@@ -88,12 +_,14 @@
         this.components = p_41383_.buildAndValidateComponents();
         this.craftingRemainingItem = p_41383_.craftingRemainingItem;
         this.requiredFeatures = p_41383_.requiredFeatures;
-        if (SharedConstants.IS_RUNNING_IN_IDE) {
+        if (SharedConstants.IS_RUNNING_IN_IDE && false) {
             String s = this.getClass().getSimpleName();
             if (!s.endsWith("Item")) {
                 LOGGER.error("Item classes should end with Item and {} doesn't.", s);
             }
         }
+        this.canRepair = p_41383_.canRepair;
+        initClient();
     }
 
     @Deprecated
@@ -112,6 +_,8 @@
     public void onUseTick(Level p_41428_, LivingEntity p_41429_, ItemStack p_41430_, int p_41431_) {
     }
 
+    /** @deprecated Forge: {@link IItemExtension#onDestroyed(ItemEntity, DamageSource) Use damage source sensitive version} */
+    @Deprecated
     public void onDestroyed(ItemEntity p_150887_) {
     }
 
@@ -138,7 +_,7 @@
 
     public InteractionResultHolder<ItemStack> use(Level p_41432_, Player p_41433_, InteractionHand p_41434_) {
         ItemStack itemstack = p_41433_.getItemInHand(p_41434_);
-        FoodProperties foodproperties = itemstack.get(DataComponents.FOOD);
+        FoodProperties foodproperties = itemstack.getFoodProperties(p_41433_);
         if (foodproperties != null) {
             if (p_41433_.canEat(foodproperties.canAlwaysEat())) {
                 p_41433_.startUsingItem(p_41434_);
@@ -160,12 +_,13 @@
     }
 
     public int getBarWidth(ItemStack p_150900_) {
-        return Mth.clamp(Math.round(13.0F - (float)p_150900_.getDamageValue() * 13.0F / (float)p_150900_.getMaxDamage()), 0, 13);
+        return Math.round(13.0F - (float)p_150900_.getDamageValue() * 13.0F / (float)this.getMaxDamage(p_150900_));
     }
 
     public int getBarColor(ItemStack p_150901_) {
         int i = p_150901_.getMaxDamage();
-        float f = Math.max(0.0F, ((float)i - (float)p_150901_.getDamageValue()) / (float)i);
+        float stackMaxDamage = this.getMaxDamage(p_150901_);
+        float f = Math.max(0.0F, (stackMaxDamage - (float)p_150901_.getDamageValue()) / stackMaxDamage);
         return Mth.hsvToRgb(f / 3.0F, 1.0F, 1.0F);
     }
 
@@ -215,7 +_,7 @@
 
     @Override
     public String toString() {
-        return BuiltInRegistries.ITEM.getKey(this).getPath();
+        return BuiltInRegistries.ITEM.getKey(this).toString();
     }
 
     protected String getOrCreateDescriptionId() {
@@ -235,10 +_,12 @@
     }
 
     @Nullable
+    @Deprecated // Use ItemStack sensitive version.
     public final Item getCraftingRemainingItem() {
         return this.craftingRemainingItem;
     }
 
+    @Deprecated // Use ItemStack sensitive version.
     public boolean hasCraftingRemainingItem() {
         return this.craftingRemainingItem != null;
     }
@@ -262,7 +_,7 @@
     }
 
     public int getUseDuration(ItemStack p_41454_) {
-        FoodProperties foodproperties = p_41454_.get(DataComponents.FOOD);
+        FoodProperties foodproperties = p_41454_.getFoodProperties(null);
         return foodproperties != null ? foodproperties.eatDurationTicks() : 0;
     }
 
@@ -294,6 +_,8 @@
         return p_41436_.clip(new ClipContext(vec3, vec31, ClipContext.Block.OUTLINE, p_41438_, p_41437_));
     }
 
+    /** @deprecated Neo: Use ItemStack sensitive version. */
+    @Deprecated
     public int getEnchantmentValue() {
         return 0;
     }
@@ -302,13 +_,20 @@
         return false;
     }
 
-    @Deprecated
+    @Deprecated // Use ItemStack sensitive version or data components. (deprecated by vanilla too)
     public Multimap<Holder<Attribute>, AttributeModifier> getDefaultAttributeModifiers(EquipmentSlot p_41388_) {
         return ImmutableMultimap.of();
     }
 
+    protected final boolean canRepair;
+
+    @Override
+    public boolean isRepairable(ItemStack stack) {
+        return canRepair && isDamageable(stack);
+    }
+
     public boolean useOnRelease(ItemStack p_41464_) {
-        return false;
+        return p_41464_.getItem() == Items.CROSSBOW;
     }
 
     public ItemStack getDefaultInstance() {
@@ -336,6 +_,32 @@
         return this.requiredFeatures;
     }
 
+    // NEO START
+    private Object renderProperties;
+
+    /*
+        DO NOT CALL, IT WILL DISAPPEAR IN THE FUTURE
+        Call RenderProperties.get instead
+    */
+    public Object getRenderPropertiesInternal() {
+        return renderProperties;
+    }
+
+    private void initClient() {
+        // Minecraft instance isn't available in datagen, so don't call initializeClient if in datagen
+                if (net.neoforged.fml.loading.FMLEnvironment.dist == net.neoforged.api.distmarker.Dist.CLIENT && !net.neoforged.fml.loading.FMLLoader.getLaunchHandler().isData()) {
+                initializeClient(properties -> {
+                        if (properties == this)
+                                throw new IllegalStateException("Don't extend IItemRenderProperties in your item, use an anonymous class instead.");
+                        this.renderProperties = properties;
+                    });
+            }
+    }
+
+    public void initializeClient(java.util.function.Consumer<net.neoforged.neoforge.client.extensions.common.IClientItemExtensions> consumer) {
+    }
+    // END NEO
+
     public static class Properties {
         private static final Interner<DataComponentMap> COMPONENT_INTERNER = Interners.newStrongInterner();
         @Nullable
@@ -343,6 +_,7 @@
         @Nullable
         Item craftingRemainingItem;
         FeatureFlagSet requiredFeatures = FeatureFlags.VANILLA_SET;
+        private boolean canRepair = true;
 
         public Item.Properties food(FoodProperties p_41490_) {
             return this.component(DataComponents.FOOD, p_41490_);
@@ -372,12 +_,18 @@
             return this.component(DataComponents.FIRE_RESISTANT, Unit.INSTANCE);
         }
 
+        public Item.Properties setNoRepair() {
+            canRepair = false;
+            return this;
+        }
+
         public Item.Properties requiredFeatures(FeatureFlag... p_250948_) {
             this.requiredFeatures = FeatureFlags.REGISTRY.subset(p_250948_);
             return this;
         }
 
         public <T> Item.Properties component(DataComponentType<T> p_330871_, T p_330323_) {
+            net.neoforged.neoforge.common.CommonHooks.validateComponent(p_330323_);
             if (this.components == null) {
                 this.components = DataComponentMap.builder().addAll(DataComponents.COMMON_ITEM_COMPONENTS);
             }
