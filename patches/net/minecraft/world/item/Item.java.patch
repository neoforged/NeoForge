--- a/net/minecraft/world/item/Item.java
+++ b/net/minecraft/world/item/Item.java
@@ -56,9 +_,9 @@
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
 
-public class Item implements FeatureElement, ItemLike {
+public class Item implements FeatureElement, ItemLike, net.neoforged.neoforge.common.extensions.IItemExtension {
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final Map<Block, Item> BY_BLOCK = Maps.newHashMap();
+    public static final Map<Block, Item> BY_BLOCK = net.neoforged.neoforge.registries.GameData.getBlockItemMap();
     public static final ResourceLocation BASE_ATTACK_DAMAGE_ID = ResourceLocation.withDefaultNamespace("base_attack_damage");
     public static final ResourceLocation BASE_ATTACK_SPEED_ID = ResourceLocation.withDefaultNamespace("base_attack_speed");
     public static final int DEFAULT_MAX_STACK_SIZE = 64;
@@ -71,6 +_,7 @@
     @Nullable
     private String descriptionId;
     private final FeatureFlagSet requiredFeatures;
+    private final java.util.Set<net.neoforged.neoforge.flag.Flag> requiredFlags;
 
     public static int getId(Item p_41394_) {
         return p_41394_ == null ? 0 : BuiltInRegistries.ITEM.getId(p_41394_);
@@ -89,12 +_,14 @@
         this.components = p_41383_.buildAndValidateComponents();
         this.craftingRemainingItem = p_41383_.craftingRemainingItem;
         this.requiredFeatures = p_41383_.requiredFeatures;
-        if (SharedConstants.IS_RUNNING_IN_IDE) {
+        this.requiredFlags = java.util.Collections.unmodifiableSet(p_41383_.requiredFlags);
+        if (SharedConstants.IS_RUNNING_IN_IDE && false) {
             String s = this.getClass().getSimpleName();
             if (!s.endsWith("Item")) {
                 LOGGER.error("Item classes should end with Item and {} doesn't.", s);
             }
         }
+        this.canRepair = p_41383_.canRepair;
     }
 
     @Deprecated
@@ -106,6 +_,15 @@
         return this.components;
     }
 
+    /** @deprecated Neo: do not use, use {@link net.neoforged.neoforge.event.ModifyDefaultComponentsEvent the event} instead */
+    @org.jetbrains.annotations.ApiStatus.Internal @Deprecated
+    public void modifyDefaultComponentsFrom(net.minecraft.core.component.DataComponentPatch patch) {
+        if (!net.neoforged.neoforge.internal.RegistrationEvents.canModifyComponents()) throw new IllegalStateException("Default components cannot be modified now!");
+        var builder = DataComponentMap.builder().addAll(components);
+        patch.entrySet().forEach(entry -> builder.set((DataComponentType)entry.getKey(), entry.getValue().orElse(null)));
+        components = Properties.COMPONENT_INTERNER.intern(Properties.validateComponents(builder.build()));
+    }
+
     public int getDefaultMaxStackSize() {
         return this.components.getOrDefault(DataComponents.MAX_STACK_SIZE, 1);
     }
@@ -113,6 +_,8 @@
     public void onUseTick(Level p_41428_, LivingEntity p_41429_, ItemStack p_41430_, int p_41431_) {
     }
 
+    /** @deprecated Forge: {@link net.neoforged.neoforge.common.extensions.IItemExtension#onDestroyed(ItemEntity, DamageSource) Use damage source sensitive version} */
+    @Deprecated
     public void onDestroyed(ItemEntity p_150887_) {
     }
 
@@ -139,7 +_,7 @@
 
     public InteractionResultHolder<ItemStack> use(Level p_41432_, Player p_41433_, InteractionHand p_41434_) {
         ItemStack itemstack = p_41433_.getItemInHand(p_41434_);
-        FoodProperties foodproperties = itemstack.get(DataComponents.FOOD);
+        FoodProperties foodproperties = itemstack.getFoodProperties(p_41433_);
         if (foodproperties != null) {
             if (p_41433_.canEat(foodproperties.canAlwaysEat())) {
                 p_41433_.startUsingItem(p_41434_);
@@ -153,7 +_,7 @@
     }
 
     public ItemStack finishUsingItem(ItemStack p_41409_, Level p_41410_, LivingEntity p_41411_) {
-        FoodProperties foodproperties = p_41409_.get(DataComponents.FOOD);
+        FoodProperties foodproperties = p_41409_.getFoodProperties(p_41411_);
         return foodproperties != null ? p_41411_.eat(p_41410_, p_41409_, foodproperties) : p_41409_;
     }
 
@@ -162,12 +_,13 @@
     }
 
     public int getBarWidth(ItemStack p_150900_) {
-        return Mth.clamp(Math.round(13.0F - (float)p_150900_.getDamageValue() * 13.0F / (float)p_150900_.getMaxDamage()), 0, 13);
+        return Math.round(13.0F - (float)p_150900_.getDamageValue() * 13.0F / (float)this.getMaxDamage(p_150900_));
     }
 
     public int getBarColor(ItemStack p_150901_) {
         int i = p_150901_.getMaxDamage();
-        float f = Math.max(0.0F, ((float)i - (float)p_150901_.getDamageValue()) / (float)i);
+        float stackMaxDamage = this.getMaxDamage(p_150901_);
+        float f = Math.max(0.0F, (stackMaxDamage - (float)p_150901_.getDamageValue()) / stackMaxDamage);
         return Mth.hsvToRgb(f / 3.0F, 1.0F, 1.0F);
     }
 
@@ -240,10 +_,12 @@
     }
 
     @Nullable
+    @Deprecated // Use ItemStack sensitive version.
     public final Item getCraftingRemainingItem() {
         return this.craftingRemainingItem;
     }
 
+    @Deprecated // Use ItemStack sensitive version.
     public boolean hasCraftingRemainingItem() {
         return this.craftingRemainingItem != null;
     }
@@ -267,7 +_,7 @@
     }
 
     public int getUseDuration(ItemStack p_41454_, LivingEntity p_344979_) {
-        FoodProperties foodproperties = p_41454_.get(DataComponents.FOOD);
+        FoodProperties foodproperties = p_41454_.getFoodProperties(null);
         return foodproperties != null ? foodproperties.eatDurationTicks() : 0;
     }
 
@@ -299,6 +_,8 @@
         return p_41436_.clip(new ClipContext(vec3, vec31, ClipContext.Block.OUTLINE, p_41438_, p_41437_));
     }
 
+    /** @deprecated Neo: Use ItemStack sensitive version. */
+    @Deprecated
     public int getEnchantmentValue() {
         return 0;
     }
@@ -307,13 +_,23 @@
         return false;
     }
 
+    /**
+     * @deprecated Neo: Use {@link Item#getDefaultAttributeModifiers(ItemStack)}
+     */
     @Deprecated
     public ItemAttributeModifiers getDefaultAttributeModifiers() {
         return ItemAttributeModifiers.EMPTY;
     }
 
+    protected final boolean canRepair;
+
+    @Override
+    public boolean isRepairable(ItemStack stack) {
+        return canRepair && isDamageable(stack);
+    }
+
     public boolean useOnRelease(ItemStack p_41464_) {
-        return false;
+        return p_41464_.getItem() == Items.CROSSBOW;
     }
 
     public ItemStack getDefaultInstance() {
@@ -341,13 +_,28 @@
         return this.requiredFeatures;
     }
 
-    public static class Properties {
+    @Override
+    public final java.util.Set<net.neoforged.neoforge.flag.Flag> requiredFlags() {
+        return requiredFlags;
+    }
+
+    /**
+     * Neo: Allowing mods to define client behavior for their Items
+     * @deprecated Use {@link net.neoforged.neoforge.client.extensions.common.RegisterClientExtensionsEvent} instead
+     */
+    @Deprecated(forRemoval = true, since = "1.21")
+    public void initializeClient(java.util.function.Consumer<net.neoforged.neoforge.client.extensions.common.IClientItemExtensions> consumer) {
+    }
+
+    public static class Properties implements net.neoforged.neoforge.common.extensions.IItemPropertiesExtensions {
         private static final Interner<DataComponentMap> COMPONENT_INTERNER = Interners.newStrongInterner();
         @Nullable
         private DataComponentMap.Builder components;
         @Nullable
         Item craftingRemainingItem;
         FeatureFlagSet requiredFeatures = FeatureFlags.VANILLA_SET;
+        private boolean canRepair = true;
+        java.util.Set<net.neoforged.neoforge.flag.Flag> requiredFlags = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<>();
 
         public Item.Properties food(FoodProperties p_41490_) {
             return this.component(DataComponents.FOOD, p_41490_);
@@ -381,12 +_,27 @@
             return this.component(DataComponents.JUKEBOX_PLAYABLE, new JukeboxPlayable(new EitherHolder<>(p_350862_), true));
         }
 
+        public Item.Properties setNoRepair() {
+            canRepair = false;
+            return this;
+        }
+
+        /**
+         * @deprecated Prefer {@linkplain #requiredFlags(net.neoforged.neoforge.flag.Flag...)}
+         */
+        @Deprecated
         public Item.Properties requiredFeatures(FeatureFlag... p_250948_) {
             this.requiredFeatures = FeatureFlags.REGISTRY.subset(p_250948_);
             return this;
         }
 
+        public Item.Properties requiredFlags(net.neoforged.neoforge.flag.Flag... requiredFlags) {
+            java.util.Collections.addAll(this.requiredFlags, requiredFlags);
+            return this;
+        }
+
         public <T> Item.Properties component(DataComponentType<T> p_330871_, T p_330323_) {
+            net.neoforged.neoforge.common.CommonHooks.validateComponent(p_330323_);
             if (this.components == null) {
                 this.components = DataComponentMap.builder().addAll(DataComponents.COMMON_ITEM_COMPONENTS);
             }
@@ -401,6 +_,10 @@
 
         DataComponentMap buildAndValidateComponents() {
             DataComponentMap datacomponentmap = this.buildComponents();
+            return validateComponents(datacomponentmap);
+        }
+
+        public static DataComponentMap validateComponents(DataComponentMap datacomponentmap) {
             if (datacomponentmap.has(DataComponents.DAMAGE) && datacomponentmap.getOrDefault(DataComponents.MAX_STACK_SIZE, 1) > 1) {
                 throw new IllegalStateException("Item cannot have both durability and be stackable");
             } else {
@@ -441,6 +_,14 @@
         @Nullable
         MapItemSavedData mapData(MapId p_339670_);
 
+        /**
+         * Neo: Returns the level if it's available.
+         */
+        @Nullable
+        default Level level() {
+            return null;
+        }
+
         static Item.TooltipContext of(@Nullable final Level p_339599_) {
             return p_339599_ == null ? EMPTY : new Item.TooltipContext() {
                 @Override
@@ -456,6 +_,11 @@
                 @Override
                 public MapItemSavedData mapData(MapId p_339628_) {
                     return p_339599_.getMapData(p_339628_);
+                }
+
+                @Override
+                public Level level() {
+                    return p_339599_;
                 }
             };
         }
