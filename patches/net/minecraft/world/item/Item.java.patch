--- a/net/minecraft/world/item/Item.java
+++ b/net/minecraft/world/item/Item.java
@@ -70,7 +_,7 @@
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
 
-public class Item implements FeatureElement, ItemLike {
+public class Item implements FeatureElement, ItemLike, net.neoforged.neoforge.common.extensions.IItemExtension {
     public static final Codec<Holder<Item>> CODEC = BuiltInRegistries.ITEM
         .holderByNameCodec()
         .validate(
@@ -79,7 +_,7 @@
                     : DataResult.success(p_381630_)
         );
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final Map<Block, Item> BY_BLOCK = Maps.newHashMap();
+    public static final Map<Block, Item> BY_BLOCK = net.neoforged.neoforge.registries.GameData.getBlockItemMap();
     public static final ResourceLocation BASE_ATTACK_DAMAGE_ID = ResourceLocation.withDefaultNamespace("base_attack_damage");
     public static final ResourceLocation BASE_ATTACK_SPEED_ID = ResourceLocation.withDefaultNamespace("base_attack_speed");
     public static final int DEFAULT_MAX_STACK_SIZE = 64;
@@ -110,7 +_,7 @@
         this.components = p_41383_.buildAndValidateComponents(Component.translatable(this.descriptionId), p_41383_.effectiveModel());
         this.craftingRemainingItem = p_41383_.craftingRemainingItem;
         this.requiredFeatures = p_41383_.requiredFeatures;
-        if (SharedConstants.IS_RUNNING_IN_IDE) {
+        if (SharedConstants.IS_RUNNING_IN_IDE && false) {
             String s = this.getClass().getSimpleName();
             if (!s.endsWith("Item")) {
                 LOGGER.error("Item classes should end with Item and {} doesn't.", s);
@@ -127,6 +_,15 @@
         return this.components;
     }
 
+    /** @deprecated Neo: do not use, use {@link net.neoforged.neoforge.event.ModifyDefaultComponentsEvent the event} instead */
+    @org.jetbrains.annotations.ApiStatus.Internal @Deprecated
+    public void modifyDefaultComponentsFrom(net.minecraft.core.component.DataComponentPatch patch) {
+        if (!net.neoforged.neoforge.internal.RegistrationEvents.canModifyComponents()) throw new IllegalStateException("Default components cannot be modified now!");
+        var builder = DataComponentMap.builder().addAll(components);
+        patch.entrySet().forEach(entry -> builder.set((DataComponentType)entry.getKey(), entry.getValue().orElse(null)));
+        components = Properties.validateComponents(builder.build());
+    }
+
     public int getDefaultMaxStackSize() {
         return this.components.getOrDefault(DataComponents.MAX_STACK_SIZE, 1);
     }
@@ -134,6 +_,8 @@
     public void onUseTick(Level p_41428_, LivingEntity p_41429_, ItemStack p_41430_, int p_41431_) {
     }
 
+    /** @deprecated Forge: {@link net.neoforged.neoforge.common.extensions.IItemExtension#onDestroyed(ItemEntity, DamageSource) Use damage source sensitive version} */
+    @Deprecated
     public void onDestroyed(ItemEntity p_150887_) {
     }
 
@@ -181,12 +_,13 @@
     }
 
     public int getBarWidth(ItemStack p_150900_) {
-        return Mth.clamp(Math.round(13.0F - (float)p_150900_.getDamageValue() * 13.0F / (float)p_150900_.getMaxDamage()), 0, 13);
+        return Math.round(13.0F - (float)p_150900_.getDamageValue() * 13.0F / (float)this.getMaxDamage(p_150900_));
     }
 
     public int getBarColor(ItemStack p_150901_) {
         int i = p_150901_.getMaxDamage();
-        float f = Math.max(0.0F, ((float)i - (float)p_150901_.getDamageValue()) / (float)i);
+        float stackMaxDamage = this.getMaxDamage(p_150901_);
+        float f = Math.max(0.0F, (stackMaxDamage - (float)p_150901_.getDamageValue()) / stackMaxDamage);
         return Mth.hsvToRgb(f / 3.0F, 1.0F, 1.0F);
     }
 
@@ -243,6 +_,7 @@
         return BuiltInRegistries.ITEM.wrapAsHolder(this).getRegisteredName();
     }
 
+    @Deprecated // Use ItemStack sensitive version.
     public final ItemStack getCraftingRemainder() {
         return this.craftingRemainingItem == null ? ItemStack.EMPTY : new ItemStack(this.craftingRemainingItem);
     }
@@ -302,7 +_,12 @@
     }
 
     public boolean useOnRelease(ItemStack p_41464_) {
-        return false;
+        return p_41464_.getItem() == Items.CROSSBOW;
+    }
+
+    @Override
+    public boolean isRepairable(ItemStack stack) {
+        return stack.has(DataComponents.REPAIRABLE) && isDamageable(stack);
     }
 
     public ItemStack getDefaultInstance() {
@@ -322,7 +_,7 @@
         return this.requiredFeatures;
     }
 
-    public static class Properties {
+    public static class Properties implements net.neoforged.neoforge.common.extensions.IItemPropertiesExtensions {
         private static final DependantName<Item, String> BLOCK_DESCRIPTION_ID = p_371954_ -> Util.makeDescriptionId("block", p_371954_.location());
         private static final DependantName<Item, String> ITEM_DESCRIPTION_ID = p_371511_ -> Util.makeDescriptionId("item", p_371511_.location());
         private final DataComponentMap.Builder components = DataComponentMap.builder().addAll(DataComponents.COMMON_ITEM_COMPONENTS);
@@ -438,6 +_,7 @@
         }
 
         public <T> Item.Properties component(DataComponentType<T> p_330871_, T p_330323_) {
+            net.neoforged.neoforge.common.CommonHooks.validateComponent(p_330323_);
             this.components.set(p_330871_, p_330323_);
             return this;
         }
@@ -448,6 +_,10 @@
 
         DataComponentMap buildAndValidateComponents(Component p_371796_, ResourceLocation p_371450_) {
             DataComponentMap datacomponentmap = this.components.set(DataComponents.ITEM_NAME, p_371796_).set(DataComponents.ITEM_MODEL, p_371450_).build();
+            return validateComponents(datacomponentmap);
+        }
+
+        public static DataComponentMap validateComponents(DataComponentMap datacomponentmap) {
             if (datacomponentmap.has(DataComponents.DAMAGE) && datacomponentmap.getOrDefault(DataComponents.MAX_STACK_SIZE, 1) > 1) {
                 throw new IllegalStateException("Item cannot have both durability and be stackable");
             } else {
@@ -484,6 +_,14 @@
         @Nullable
         MapItemSavedData mapData(MapId p_339670_);
 
+        /**
+         * Neo: Returns the level if it's available.
+         */
+        @Nullable
+        default Level level() {
+            return null;
+        }
+
         static Item.TooltipContext of(@Nullable final Level p_339599_) {
             return p_339599_ == null ? EMPTY : new Item.TooltipContext() {
                 @Override
@@ -499,6 +_,11 @@
                 @Override
                 public MapItemSavedData mapData(MapId p_339628_) {
                     return p_339599_.getMapData(p_339628_);
+                }
+
+                @Override
+                public Level level() {
+                    return p_339599_;
                 }
             };
         }
