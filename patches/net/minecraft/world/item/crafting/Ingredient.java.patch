--- a/net/minecraft/world/item/crafting/Ingredient.java
+++ b/net/minecraft/world/item/crafting/Ingredient.java
@@ -24,18 +_,22 @@
 import net.minecraft.world.level.ItemLike;
 
 public final class Ingredient implements Predicate<ItemStack> {
-    public static final StreamCodec<RegistryFriendlyByteBuf, Ingredient> CONTENTS_STREAM_CODEC = ByteBufCodecs.holderSet(Registries.ITEM)
-        .map(Ingredient::new, p_360055_ -> p_360055_.values);
-    public static final StreamCodec<RegistryFriendlyByteBuf, Optional<Ingredient>> OPTIONAL_CONTENTS_STREAM_CODEC = ByteBufCodecs.holderSet(Registries.ITEM)
+    public static final StreamCodec<RegistryFriendlyByteBuf, Ingredient> CONTENTS_STREAM_CODEC = net.neoforged.neoforge.common.crafting.IngredientCodecs.streamCodec(ByteBufCodecs.holderSet(Registries.ITEM)
+        .map(Ingredient::new, p_360055_ -> p_360055_.getValuesForSync()));
+    public static final StreamCodec<RegistryFriendlyByteBuf, Optional<Ingredient>> OPTIONAL_CONTENTS_STREAM_CODEC = net.neoforged.neoforge.common.crafting.IngredientCodecs.optionalStreamCodec(ByteBufCodecs.holderSet(Registries.ITEM)
         .map(
             p_360058_ -> p_360058_.size() == 0 ? Optional.empty() : Optional.of(new Ingredient((HolderSet<Item>)p_360058_)),
-            p_360056_ -> p_360056_.map(p_360062_ -> p_360062_.values).orElse(HolderSet.direct())
-        );
+            p_360056_ -> p_360056_.map(p_360062_ -> p_360062_.getValuesForSync()).orElse(HolderSet.direct())
+        ));
     public static final Codec<HolderSet<Item>> NON_AIR_HOLDER_SET_CODEC = HolderSetCodec.create(Registries.ITEM, ItemStack.ITEM_NON_AIR_CODEC, false);
-    public static final Codec<Ingredient> CODEC = ExtraCodecs.nonEmptyHolderSet(NON_AIR_HOLDER_SET_CODEC).xmap(Ingredient::new, p_360061_ -> p_360061_.values);
+    public static final Codec<Ingredient> CODEC = net.neoforged.neoforge.common.crafting.IngredientCodecs.codec(ExtraCodecs.nonEmptyHolderSet(NON_AIR_HOLDER_SET_CODEC).xmap(Ingredient::new, p_360061_ -> p_360061_.values));
     private final HolderSet<Item> values;
     @Nullable
     private List<Holder<Item>> items;
+    @Nullable
+    private List<ItemStack> stacks;
+    @Nullable
+    private net.neoforged.neoforge.common.crafting.ICustomIngredient customIngredient = null;
 
     private Ingredient(HolderSet<Item> p_365027_) {
         p_365027_.unwrap().ifRight(p_360057_ -> {
@@ -48,19 +_,50 @@
         this.values = p_365027_;
     }
 
+    public Ingredient(net.neoforged.neoforge.common.crafting.ICustomIngredient customIngredient) {
+        this.values = HolderSet.empty();
+        this.customIngredient = customIngredient;
+    }
+
     public static boolean testOptionalIngredient(Optional<Ingredient> p_362504_, ItemStack p_363604_) {
         return p_362504_.<Boolean>map(p_360060_ -> p_360060_.test(p_363604_)).orElseGet(p_363604_::isEmpty);
     }
 
+    /** @deprecated Neo: Prefer {@link #stacks}. */
+    @Deprecated
     public List<Holder<Item>> items() {
         if (this.items == null) {
-            this.items = ImmutableList.copyOf(this.values);
+            if (this.customIngredient != null) {
+                this.items = this.customIngredient.stacks().map(ItemStack::getItemHolder).distinct().toList();
+            } else {
+                this.items = ImmutableList.copyOf(this.values);
+            }
         }
 
         return this.items;
     }
 
+    /**
+     * NBT-aware version of {@link #items}.
+     *
+     * @see net.neoforged.neoforge.common.crafting.ICustomIngredient#stacks
+     */
+    public List<ItemStack> stacks() {
+        if (this.stacks == null) {
+            if (this.customIngredient != null) {
+                this.stacks = this.customIngredient.stacks().toList();
+            } else {
+                this.stacks = this.values.stream().map(ItemStack::new).toList();
+            }
+        }
+
+        return this.stacks;
+    }
+
     public boolean test(ItemStack p_43914_) {
+        if (this.customIngredient != null) {
+            return this.customIngredient.test(p_43914_);
+        }
         List<Holder<Item>> list = this.items();
 
         for (int i = 0; i < list.size(); i++) {
@@ -72,9 +_,68 @@
         return false;
     }
 
+    /**
+     * Returns {@code true} if this ingredient has an empty stack list.
+     * This will catch "accidentally empty" ingredients, for example a tag ingredient that has an empty tag.
+     */
+    // TODO 1.21.2: Do we want to keep this?
+    public boolean hasNoItems() {
+        var stacks = stacks();
+        if (stacks.isEmpty())
+            return true;
+        if (stacks.size() == 1) {
+            // If we potentially added a barrier due to the ingredient being an empty tag, try and check if it is the stack we added
+            ItemStack stack = stacks.getFirst();
+            return stack.getItem() == net.minecraft.world.item.Items.BARRIER && stack.getHoverName() instanceof net.minecraft.network.chat.MutableComponent hoverName && hoverName.getString().startsWith("Empty Tag: ");
+        }
+        return false;
+    }
+
     @Override
     public boolean equals(Object p_301003_) {
-        return p_301003_ instanceof Ingredient ingredient ? Objects.equals(this.values, ingredient.values) : false;
+        return p_301003_ instanceof Ingredient ingredient ? java.util.Objects.equals(this.customIngredient, ingredient.customIngredient) && Objects.equals(this.values, ingredient.values) : false;
+    }
+
+    @Override
+    public int hashCode() {
+        if (this.customIngredient != null) {
+            return this.customIngredient.hashCode();
+        }
+        return this.values.hashCode();
+    }
+
+    /**
+      * Retrieves the underlying values of this ingredient.
+      * If this is a {@linkplain #isCustom custom ingredient}, an exception is thrown.
+      */
+    public HolderSet<Item> getValues() {
+        if (isCustom()) {
+            throw new IllegalStateException("Cannot retrieve values from custom ingredient!");
+        }
+        return this.values;
+    }
+
+    /**
+     * Retrieves the holder set to use for syncing {@linkplain #isSimple() simple} ingredients
+     */
+    private HolderSet<Item> getValuesForSync() {
+        if (isCustom()) {
+            return HolderSet.direct(this.items());
+        }
+        return this.values;
+    }
+
+    public boolean isSimple() {
+        return this.customIngredient == null || this.customIngredient.isSimple();
+    }
+
+    @Nullable
+    public net.neoforged.neoforge.common.crafting.ICustomIngredient getCustomIngredient() {
+        return this.customIngredient;
+    }
+
+    public boolean isCustom() {
+        return this.customIngredient != null;
     }
 
     public static Ingredient of(ItemLike p_364285_) {
