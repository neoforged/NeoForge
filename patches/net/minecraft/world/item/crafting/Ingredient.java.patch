--- a/net/minecraft/world/item/crafting/Ingredient.java
+++ b/net/minecraft/world/item/crafting/Ingredient.java
@@ -29,22 +_,63 @@
 
 public class Ingredient implements Predicate<ItemStack> {
     public static final Ingredient EMPTY = new Ingredient(Stream.empty());
-    public static final StreamCodec<RegistryFriendlyByteBuf, Ingredient> CONTENTS_STREAM_CODEC = ItemStack.LIST_STREAM_CODEC
-        .map(p_319730_ -> fromValues(p_319730_.stream().map(Ingredient.ItemValue::new)), p_319731_ -> Arrays.asList(p_319731_.getItems()));
+    public static final StreamCodec<RegistryFriendlyByteBuf, Ingredient> CONTENTS_STREAM_CODEC = new StreamCodec<>() {
+        private static final StreamCodec<RegistryFriendlyByteBuf, Ingredient> CODEC_STREAM_CODEC = net.neoforged.neoforge.network.codec.NeoForgeStreamCodecs.lazy(() -> net.minecraft.network.codec.ByteBufCodecs.fromCodecWithRegistries(CODEC));
+
+        @Override
+        public void encode(RegistryFriendlyByteBuf buf, Ingredient ingredient) {
+            if (ingredient.synchronizeWithContents()) {
+                ItemStack.LIST_STREAM_CODEC.encode(buf, Arrays.asList(ingredient.getItems()));
+            } else {
+                buf.writeVarInt(-1);
+                CODEC_STREAM_CODEC.encode(buf, ingredient);
+            }
+        }
+
+        @Override
+        public Ingredient decode(RegistryFriendlyByteBuf buf) {
+            var size = buf.readVarInt();
+            if (size == -1) {
+                return CODEC_STREAM_CODEC.decode(buf);
+            }
+            return fromValues(Stream.generate(() -> ItemStack.STREAM_CODEC.decode(buf)).limit(size).map(Ingredient.ItemValue::new));
+        }
+    };
     public final Ingredient.Value[] values;
     @Nullable
     private ItemStack[] itemStacks;
     @Nullable
     private IntList stackingIds;
-    public static final Codec<Ingredient> CODEC = codec(true);
-    public static final Codec<Ingredient> CODEC_NONEMPTY = codec(false);
+    private final java.util.function.Supplier<? extends net.neoforged.neoforge.common.crafting.IngredientType<?>> type;
+    @Nullable private Boolean areAllStacksEmpty;
+
+    public static final Codec<Ingredient> VANILLA_CODEC = codec(true);
+    public static final Codec<Ingredient> VANILLA_CODEC_NONEMPTY = codec(false);
+    public static final Codec<Ingredient> CODEC = net.neoforged.neoforge.common.crafting.CraftingHelper.makeIngredientCodec(true, VANILLA_CODEC);
+    public static final Codec<Ingredient> CODEC_NONEMPTY = net.neoforged.neoforge.common.crafting.CraftingHelper.makeIngredientCodec(false, VANILLA_CODEC_NONEMPTY);
+    public static final Codec<List<Ingredient>> LIST_CODEC = CODEC.listOf();
+    public static final Codec<List<Ingredient>> LIST_CODEC_NONEMPTY = CODEC_NONEMPTY.listOf();
 
     protected Ingredient(Stream<? extends Ingredient.Value> p_43907_) {
-        this.values = p_43907_.toArray(Ingredient.Value[]::new);
+        this(p_43907_, net.neoforged.neoforge.common.NeoForgeMod.VANILLA_INGREDIENT_TYPE);
     }
 
     private Ingredient(Ingredient.Value[] p_301044_) {
+        this(p_301044_, net.neoforged.neoforge.common.NeoForgeMod.VANILLA_INGREDIENT_TYPE);
+    }
+
+    protected Ingredient(Stream<? extends Ingredient.Value> p_43907_, java.util.function.Supplier<? extends net.neoforged.neoforge.common.crafting.IngredientType<?>> type) {
+        this.values = p_43907_.toArray(Value[]::new);
+        this.type = type;
+    }
+
+    private Ingredient(Ingredient.Value[] p_301044_, java.util.function.Supplier<? extends net.neoforged.neoforge.common.crafting.IngredientType<?>> type) {
         this.values = p_301044_;
+        this.type = type;
+    }
+
+    public net.neoforged.neoforge.common.crafting.IngredientType<?> getType() {
+        return type.get();
     }
 
     public ItemStack[] getItems() {
@@ -62,7 +_,7 @@
             return p_43914_.isEmpty();
         } else {
             for (ItemStack itemstack : this.getItems()) {
-                if (itemstack.is(p_43914_.getItem())) {
+                if (areStacksEqual(itemstack, p_43914_)) {
                     return true;
                 }
             }
@@ -71,6 +_,10 @@
         }
     }
 
+    protected boolean areStacksEqual(ItemStack left, ItemStack right) {
+        return left.is(right.getItem());
+    }
+
     public IntList getStackingIds() {
         if (this.stackingIds == null) {
             ItemStack[] aitemstack = this.getItems();
@@ -86,8 +_,23 @@
         return this.stackingIds;
     }
 
+    private boolean areAllStacksEmpty() {
+        Boolean empty = this.areAllStacksEmpty;
+        if (empty == null) {
+            boolean allEmpty = true;
+            for (ItemStack stack : this.getItems()) {
+                if (!stack.isEmpty()) {
+                    allEmpty = false;
+                    break;
+                }
+            }
+            this.areAllStacksEmpty = empty = allEmpty;
+        }
+        return empty;
+    }
+
     public boolean isEmpty() {
-        return this.values.length == 0;
+        return this.values.length == 0 || this.areAllStacksEmpty();
     }
 
     @Override
@@ -95,6 +_,17 @@
         return p_301003_ instanceof Ingredient ingredient ? Arrays.equals((Object[])this.values, (Object[])ingredient.values) : false;
     }
 
+    public boolean isSimple() {
+        return true;
+    }
+
+    /**
+     * {@return if {@code true}, this ingredient will be synchronized using its contents, as in vanilla, otherwise it will be synchronized via the {@link #codec(boolean) codec}}
+     */
+    public boolean synchronizeWithContents() {
+        return true;
+    }
+
     public static Ingredient fromValues(Stream<? extends Ingredient.Value> p_43939_) {
         Ingredient ingredient = new Ingredient(p_43939_);
         return ingredient.isEmpty() ? EMPTY : ingredient;
@@ -143,7 +_,11 @@
             );
     }
 
-    public static record ItemValue(ItemStack item) implements Ingredient.Value {
+    public static record ItemValue(ItemStack item, java.util.function.BiFunction<net.minecraft.world.item.ItemStack, net.minecraft.world.item.ItemStack, Boolean> comparator) implements Ingredient.Value {
+        public ItemValue(ItemStack item) {
+            this(item, ItemValue::areStacksEqual);
+        }
+
         static final Codec<Ingredient.ItemValue> CODEC = RecordCodecBuilder.create(
             p_330109_ -> p_330109_.group(ItemStack.SIMPLE_ITEM_CODEC.fieldOf("item").forGetter(p_300919_ -> p_300919_.item))
                     .apply(p_330109_, Ingredient.ItemValue::new)
@@ -153,13 +_,18 @@
         public boolean equals(Object p_301316_) {
             return !(p_301316_ instanceof Ingredient.ItemValue ingredient$itemvalue)
                 ? false
-                : ingredient$itemvalue.item.getItem().equals(this.item.getItem()) && ingredient$itemvalue.item.getCount() == this.item.getCount();
+                : comparator().apply(item(), ingredient$itemvalue.item());
         }
 
         @Override
         public Collection<ItemStack> getItems() {
             return Collections.singleton(this.item);
         }
+
+        private static boolean areStacksEqual(ItemStack left, ItemStack right) {
+            return left.getItem().equals(right.getItem())
+                    && left.getCount() == right.getCount();
+        }
     }
 
     public static record TagValue(TagKey<Item> tag) implements Ingredient.Value {
@@ -181,6 +_,11 @@
                 list.add(new ItemStack(holder));
             }
 
+            if (list.isEmpty()) {
+                net.minecraft.world.item.ItemStack itemStack = new net.minecraft.world.item.ItemStack(net.minecraft.world.level.block.Blocks.BARRIER);
+                itemStack.set(net.minecraft.core.component.DataComponents.CUSTOM_NAME, net.minecraft.network.chat.Component.literal("Empty Tag: " + this.tag.location()));
+                list.add(itemStack);
+            }
             return list;
         }
     }
@@ -198,5 +_,9 @@
             });
 
         Collection<ItemStack> getItems();
+    }
+
+    public final Value[] getValues() {
+        return values;
     }
 }
