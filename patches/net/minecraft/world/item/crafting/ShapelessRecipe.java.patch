--- a/net/minecraft/world/item/crafting/ShapelessRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapelessRecipe.java
@@ -19,12 +_,14 @@
    final CraftingBookCategory category;
    final ItemStack result;
    final NonNullList<Ingredient> ingredients;
+   private final boolean isSimple;
 
    public ShapelessRecipe(String p_249640_, CraftingBookCategory p_249390_, ItemStack p_252071_, NonNullList<Ingredient> p_250689_) {
       this.group = p_249640_;
       this.category = p_249390_;
       this.result = p_252071_;
       this.ingredients = p_250689_;
+      this.isSimple = p_250689_.stream().allMatch(Ingredient::isSimple);
    }
 
    @Override
@@ -54,17 +_,20 @@
 
    public boolean matches(CraftingContainer p_44262_, Level p_44263_) {
       StackedContents stackedcontents = new StackedContents();
+      java.util.List<ItemStack> inputs = new java.util.ArrayList<>();
       int i = 0;
 
       for(int j = 0; j < p_44262_.getContainerSize(); ++j) {
          ItemStack itemstack = p_44262_.getItem(j);
          if (!itemstack.isEmpty()) {
             ++i;
+            if (isSimple)
             stackedcontents.accountStack(itemstack, 1);
+            else inputs.add(itemstack);
          }
       }
 
-      return i == this.ingredients.size() && stackedcontents.canCraft(this, null);
+      return i == this.ingredients.size() && (isSimple ? stackedcontents.canCraft(this, null) : net.neoforged.neoforge.common.util.RecipeMatcher.findMatches(inputs,  this.ingredients) != null);
    }
 
    public ItemStack assemble(CraftingContainer p_44260_, RegistryAccess p_266797_) {
@@ -77,6 +_,7 @@
    }
 
    public static class Serializer implements RecipeSerializer<ShapelessRecipe> {
+      private static final net.minecraft.resources.ResourceLocation NAME = new net.minecraft.resources.ResourceLocation("minecraft", "crafting_shapeless");
       private static final Codec<ShapelessRecipe> CODEC = RecordCodecBuilder.create(
          p_300958_ -> p_300958_.group(
                   ExtraCodecs.strictOptionalField(Codec.STRING, "group", "").forGetter(p_301127_ -> p_301127_.group),
@@ -87,14 +_,13 @@
                      .fieldOf("ingredients")
                      .flatXmap(
                         p_301021_ -> {
-                           Ingredient[] aingredient = p_301021_.stream()
-                              .filter(p_300883_ -> !p_300883_.isEmpty())
-                              .toArray(p_300865_ -> new Ingredient[p_300865_]);
+                           Ingredient[] aingredient = p_301021_
+                                   .toArray(Ingredient[]::new); //Forge skip the empty check and immediatly create the array.
                            if (aingredient.length == 0) {
                               return DataResult.error(() -> "No ingredients for shapeless recipe");
                            } else {
-                              return aingredient.length > 9
-                                 ? DataResult.error(() -> "Too many ingredients for shapeless recipe")
+                              return aingredient.length > ShapedRecipe.MAX_HEIGHT * ShapedRecipe.MAX_WIDTH
+                                 ? DataResult.error(() -> "Too many ingredients for shapeless recipe. The maximum is: %s".formatted(ShapedRecipe.MAX_HEIGHT * ShapedRecipe.MAX_WIDTH))
                                  : DataResult.success(NonNullList.of(Ingredient.EMPTY, aingredient));
                            }
                         },
