--- a/net/minecraft/world/item/crafting/ShapelessRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapelessRecipe.java
@@ -18,12 +_,14 @@
     final CraftingBookCategory category;
     final ItemStack result;
     final NonNullList<Ingredient> ingredients;
+    private final boolean isSimple;
 
     public ShapelessRecipe(String group, CraftingBookCategory category, ItemStack result, NonNullList<Ingredient> ingredients) {
         this.group = group;
         this.category = category;
         this.result = result;
         this.ingredients = ingredients;
+        this.isSimple = ingredients.stream().allMatch(Ingredient::isSimple);
     }
 
     @Override
@@ -54,6 +_,12 @@
     public boolean matches(CraftingInput input, Level level) {
         if (input.ingredientCount() != this.ingredients.size()) {
             return false;
+        } else if (!isSimple) {
+            var nonEmptyItems = new java.util.ArrayList<ItemStack>(input.ingredientCount());
+            for (var item : input.items())
+                if (!item.isEmpty())
+                    nonEmptyItems.add(item);
+            return net.neoforged.neoforge.common.util.RecipeMatcher.findMatches(nonEmptyItems, this.ingredients) != null;
         } else {
             return input.size() == 1 && this.ingredients.size() == 1
                 ? this.ingredients.getFirst().test(input.getItem(0))
@@ -81,12 +_,12 @@
                             .fieldOf("ingredients")
                             .flatXmap(
                                 p_301021_ -> {
-                                    Ingredient[] aingredient = p_301021_.stream().filter(p_300883_ -> !p_300883_.isEmpty()).toArray(Ingredient[]::new);
+                                    Ingredient[] aingredient = p_301021_.toArray(Ingredient[]::new); // Neo skip the empty check and immediately create the array.
                                     if (aingredient.length == 0) {
                                         return DataResult.error(() -> "No ingredients for shapeless recipe");
                                     } else {
-                                        return aingredient.length > 9
-                                            ? DataResult.error(() -> "Too many ingredients for shapeless recipe")
+                                        return aingredient.length > ShapedRecipePattern.maxHeight * ShapedRecipePattern.maxWidth
+                                            ? DataResult.error(() -> "Too many ingredients for shapeless recipe. The maximum is: %s".formatted(ShapedRecipePattern.maxHeight * ShapedRecipePattern.maxWidth))
                                             : DataResult.success(NonNullList.of(Ingredient.EMPTY, aingredient));
                                     }
                                 },
