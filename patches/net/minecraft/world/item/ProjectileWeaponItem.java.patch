--- a/net/minecraft/world/item/ProjectileWeaponItem.java
+++ b/net/minecraft/world/item/ProjectileWeaponItem.java
@@ -24,12 +_,42 @@
         super(p_43009_);
     }
 
+    /**
+     * @deprecated Use ItemStack sensitive version {@link ProjectileWeaponItem#getSupportedHeldProjectiles(ItemStack)}
+     */
+    @Deprecated
     public Predicate<ItemStack> getSupportedHeldProjectiles() {
         return this.getAllSupportedProjectiles();
     }
 
+    /**
+     * @deprecated Use ItemStack sensitive version {@link ProjectileWeaponItem#getAllSupportedProjectiles(ItemStack)}
+     */
+    @Deprecated
     public abstract Predicate<ItemStack> getAllSupportedProjectiles();
 
+    /**
+     * Override this method if the weapon stack allows special projectile that would only be used if it's in hand.
+     * The default return value is a union-predicate of {@link ProjectileWeaponItem#getAllSupportedProjectiles(ItemStack)}
+     * and {@link ProjectileWeaponItem#getSupportedHeldProjectiles()}
+     *
+     * @param stack The ProjectileWeapon stack
+     * @return A predicate that returns true for supported projectile stack in hand
+     */
+    public Predicate<ItemStack> getSupportedHeldProjectiles(ItemStack stack) {
+        return getAllSupportedProjectiles(stack).or(getSupportedHeldProjectiles());
+    }
+
+    /**
+     * Override this method if the allowed projectile is weapon stack dependent.
+     *
+     * @param stack The ProjectileWeapon stack
+     * @return A predicate that returns true for all supported projectile stack
+     */
+    public Predicate<ItemStack> getAllSupportedProjectiles(ItemStack stack) {
+        return getAllSupportedProjectiles();
+    }
+
     public static ItemStack getHeldProjectile(LivingEntity p_43011_, Predicate<ItemStack> p_43012_) {
         if (p_43012_.test(p_43011_.getItemInHand(InteractionHand.OFF_HAND))) {
             return p_43011_.getItemInHand(InteractionHand.OFF_HAND);
@@ -91,7 +_,7 @@
             abstractarrow.setCritArrow(true);
         }
 
-        return abstractarrow;
+        return customArrow(abstractarrow, p_331497_, p_330846_);
     }
 
     protected static List<ItemStack> draw(ItemStack p_331565_, ItemStack p_330406_, LivingEntity p_330823_) {
@@ -114,7 +_,8 @@
     }
 
     protected static ItemStack useAmmo(ItemStack p_331207_, ItemStack p_331434_, LivingEntity p_330302_, boolean p_330934_) {
-        int i = !p_330934_ && !p_330302_.hasInfiniteMaterials() && p_330302_.level() instanceof ServerLevel serverlevel
+        // Neo: Adjust this check to respect ArrowItem#isInfinite, bypassing processAmmoUse if true.
+        int i = !p_330934_ && p_330302_.level() instanceof ServerLevel serverlevel && !(p_330302_.hasInfiniteMaterials() || (p_331434_.getItem() instanceof ArrowItem ai && ai.isInfinite(p_331434_, p_331207_, p_330302_)))
             ? EnchantmentHelper.processAmmoUse(serverlevel, p_331207_, p_331434_, 1)
             : 0;
         if (i > p_331434_.getCount()) {
@@ -131,5 +_,20 @@
 
             return itemstack;
         }
+    }
+
+    public AbstractArrow customArrow(AbstractArrow arrow, ItemStack projectileStack, ItemStack weaponStack) {
+        return arrow;
+    }
+
+    /**
+     * Neo: Controls what ammo ItemStack that Creative Mode should return if the player has no valid ammo in inventory.
+     * Modded weapons should override this to return their own ammo if they do not use vanilla arrows.
+     * @param player The player (if in context) firing the weapon
+     * @param projectileWeaponItem The weapon ItemStack the ammo is for
+     * @return The default ammo ItemStack for this weapon
+     */
+    public ItemStack getDefaultCreativeAmmo(@Nullable Player player, ItemStack projectileWeaponItem) {
+        return Items.ARROW.getDefaultInstance();
     }
 }
