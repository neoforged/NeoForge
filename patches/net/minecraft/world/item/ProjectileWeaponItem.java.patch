--- a/net/minecraft/world/item/ProjectileWeaponItem.java
+++ b/net/minecraft/world/item/ProjectileWeaponItem.java
@@ -92,7 +_,7 @@
             abstractarrow.setCritArrow(true);
         }
 
-        return abstractarrow;
+        return customArrow(abstractarrow, ammo, weapon);
     }
 
     protected static List<ItemStack> draw(ItemStack weapon, ItemStack ammo, LivingEntity shooter) {
@@ -115,7 +_,8 @@
     }
 
     protected static ItemStack useAmmo(ItemStack weapon, ItemStack ammo, LivingEntity shooter, boolean intangable) {
-        int i = !intangable && !shooter.hasInfiniteMaterials() && shooter.level() instanceof ServerLevel serverlevel
+        // Neo: Adjust this check to respect ArrowItem#isInfinite, bypassing processAmmoUse if true.
+        int i = !intangable && shooter.level() instanceof ServerLevel serverlevel && !(shooter.hasInfiniteMaterials() || (ammo.getItem() instanceof ArrowItem ai && ai.isInfinite(ammo, weapon, shooter)))
             ? EnchantmentHelper.processAmmoUse(serverlevel, weapon, ammo, 1)
             : 0;
         if (i > ammo.getCount()) {
@@ -132,5 +_,20 @@
 
             return itemstack;
         }
+    }
+
+    public AbstractArrow customArrow(AbstractArrow arrow, ItemStack projectileStack, ItemStack weaponStack) {
+        return arrow;
+    }
+
+    /**
+     * Neo: Controls what ammo ItemStack that Creative Mode should return if the player has no valid ammo in inventory.
+     * Modded weapons should override this to return their own ammo if they do not use vanilla arrows.
+     * @param player The player (if in context) firing the weapon
+     * @param projectileWeaponItem The weapon ItemStack the ammo is for
+     * @return The default ammo ItemStack for this weapon
+     */
+    public ItemStack getDefaultCreativeAmmo(@Nullable Player player, ItemStack projectileWeaponItem) {
+        return Items.ARROW.getDefaultInstance();
     }
 }
