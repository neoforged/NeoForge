--- a/net/minecraft/world/item/ProjectileWeaponItem.java
+++ b/net/minecraft/world/item/ProjectileWeaponItem.java
@@ -67,9 +_,16 @@
                 float f4 = f2 + f3 * (float)((i + 1) / 2) * f1;
                 f3 = -f3;
                 Projectile projectile = this.createProjectile(p_346125_, p_330728_, p_330646_, itemstack, p_331107_);
+                var event = net.neoforged.neoforge.event.EventHooks.onProjectileWeaponShootPre(p_330728_, projectile, p_331167_, p_330646_, itemstack, p_331007_, p_331445_);
+                if (event.isCanceled()) continue;
+                projectile = event.getProjectile();
+                p_331007_ = event.getPower();
+                p_331445_ = event.getDivergence();
                 this.shootProjectile(p_330728_, projectile, i, p_331007_, p_331445_, f4, p_331167_);
                 p_346125_.addFreshEntity(projectile);
-                p_330646_.hurtAndBreak(this.getDurabilityUse(itemstack), p_330728_, LivingEntity.getSlotForHand(p_331152_));
+                int damage = net.neoforged.neoforge.event.EventHooks.onProjectileWeaponShootPost(p_330728_, projectile, p_331167_, p_330646_, itemstack, this.getDurabilityUse(itemstack));
+                if (damage > 0)
+                    p_330646_.hurtAndBreak(damage, p_330728_, LivingEntity.getSlotForHand(p_331152_));
                 if (p_330646_.isEmpty()) {
                     break;
                 }
@@ -92,7 +_,7 @@
             abstractarrow.setCritArrow(true);
         }
 
-        return abstractarrow;
+        return customArrow(abstractarrow, p_331497_, p_330846_);
     }
 
     protected static List<ItemStack> draw(ItemStack p_331565_, ItemStack p_330406_, LivingEntity p_330823_) {
@@ -115,7 +_,8 @@
     }
 
     protected static ItemStack useAmmo(ItemStack p_331207_, ItemStack p_331434_, LivingEntity p_330302_, boolean p_330934_) {
-        int i = !p_330934_ && !p_330302_.hasInfiniteMaterials() && p_330302_.level() instanceof ServerLevel serverlevel
+        // Neo: Adjust this check to respect ArrowItem#isInfinite, bypassing processAmmoUse if true.
+        int i = !p_330934_ && p_330302_.level() instanceof ServerLevel serverlevel && !(p_330302_.hasInfiniteMaterials() || (p_331434_.getItem() instanceof ArrowItem ai && ai.isInfinite(p_331434_, p_331207_, p_330302_)))
             ? EnchantmentHelper.processAmmoUse(serverlevel, p_331207_, p_331434_, 1)
             : 0;
         if (i > p_331434_.getCount()) {
@@ -132,5 +_,20 @@
 
             return itemstack;
         }
+    }
+
+    public AbstractArrow customArrow(AbstractArrow arrow, ItemStack projectileStack, ItemStack weaponStack) {
+        return arrow;
+    }
+
+    /**
+     * Neo: Controls what ammo ItemStack that Creative Mode should return if the player has no valid ammo in inventory.
+     * Modded weapons should override this to return their own ammo if they do not use vanilla arrows.
+     * @param player The player (if in context) firing the weapon
+     * @param projectileWeaponItem The weapon ItemStack the ammo is for
+     * @return The default ammo ItemStack for this weapon
+     */
+    public ItemStack getDefaultCreativeAmmo(@Nullable Player player, ItemStack projectileWeaponItem) {
+        return Items.ARROW.getDefaultInstance();
     }
 }
