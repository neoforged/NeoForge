--- a/net/minecraft/world/entity/Mob.java
+++ b/net/minecraft/world/entity/Mob.java
@@ -131,6 +_,9 @@
     private Leashable.LeashData leashData;
     private BlockPos restrictCenter = BlockPos.ZERO;
     private float restrictRadius = -1.0F;
+    @Nullable
+    private MobSpawnType spawnType;
+    private boolean spawnCancelled = false;
 
     protected Mob(EntityType<? extends Mob> p_21368_, Level p_21369_) {
         super(p_21368_, p_21369_);
@@ -237,7 +_,10 @@
     }
 
     public void setTarget(@Nullable LivingEntity p_21544_) {
-        this.target = p_21544_;
+        net.neoforged.neoforge.event.entity.living.LivingChangeTargetEvent changeTargetEvent = net.neoforged.neoforge.common.CommonHooks.onLivingChangeTarget(this, p_21544_, net.neoforged.neoforge.event.entity.living.LivingChangeTargetEvent.LivingTargetType.MOB_TARGET);
+        if(!changeTargetEvent.isCanceled()) {
+             this.target = changeTargetEvent.getNewAboutToBeSetTarget();
+        }
     }
 
     @Override
@@ -346,6 +_,12 @@
         if (!this.level().isClientSide && this.tickCount % 5 == 0) {
             this.updateControlFlags();
         }
+
+        // Neo: Animal armor tick patch
+        if (this.canUseSlot(EquipmentSlot.BODY)) {
+            ItemStack stack = this.getBodyArmorItem();
+            if (isBodyArmorItem(stack)) stack.onAnimalArmorTick(level(), this);
+        }
     }
 
     protected void updateControlFlags() {
@@ -425,6 +_,9 @@
         if (this.isNoAi()) {
             p_21484_.putBoolean("NoAI", this.isNoAi());
         }
+        if (this.spawnType != null) {
+            p_21484_.putString("neoforge:spawn_type", this.spawnType.name());
+        }
     }
 
     @Override
@@ -484,6 +_,14 @@
         }
 
         this.setNoAi(p_21450_.getBoolean("NoAI"));
+
+        if (p_21450_.contains("neoforge:spawn_type")) {
+            try {
+                this.spawnType = MobSpawnType.valueOf(p_21450_.getString("neoforge:spawn_type"));
+            } catch (Exception ex) {
+                p_21450_.remove("neoforge:spawn_type");
+            }
+        }
     }
 
     @Override
@@ -539,7 +_,7 @@
             && this.canPickUpLoot()
             && this.isAlive()
             && !this.dead
-            && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+            && net.neoforged.neoforge.event.EventHooks.canEntityGrief(this.level(), this)) {
             Vec3i vec3i = this.getPickupReach();
 
             for (ItemEntity itementity : this.level()
@@ -666,6 +_,10 @@
 
     private double getApproximateAttackDamageWithItem(ItemStack p_330413_) {
         ItemAttributeModifiers itemattributemodifiers = p_330413_.getOrDefault(DataComponents.ATTRIBUTE_MODIFIERS, ItemAttributeModifiers.EMPTY);
+
+        // Neo: Respect gameplay modifiers
+        itemattributemodifiers = p_330413_.getAttributeModifiers();
+
         return itemattributemodifiers.compute(this.getAttributeBaseValue(Attributes.ATTACK_DAMAGE), EquipmentSlot.MAINHAND);
     }
 
@@ -701,6 +_,7 @@
 
     @Override
     public void checkDespawn() {
+        if (net.neoforged.neoforge.event.EventHooks.checkMobDespawn(this)) return;
         if (this.level().getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
             this.discard();
         } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
@@ -1133,6 +_,11 @@
         }
     }
 
+    /**
+     * @deprecated Override-Only. External callers should call via {@link net.neoforged.neoforge.event.EventHooks#finalizeMobSpawn}.
+     */
+    @Deprecated
+    @org.jetbrains.annotations.ApiStatus.OverrideOnly
     @Nullable
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor p_21434_, DifficultyInstance p_21435_, MobSpawnType p_21436_, @Nullable SpawnGroupData p_21437_) {
         RandomSource randomsource = p_21434_.getRandom();
@@ -1144,6 +_,7 @@
         }
 
         this.setLeftHanded(randomsource.nextFloat() < 0.05F);
+        this.spawnType = p_21436_;
         return p_21437_;
     }
 
@@ -1470,14 +_,24 @@
     }
 
     @Override
+    @Deprecated // FORGE: use jumpInFluid instead
     protected void jumpInLiquid(TagKey<Fluid> p_204045_) {
+        this.jumpInLiquidInternal(() -> super.jumpInLiquid(p_204045_));
+    }
+
+    private void jumpInLiquidInternal(Runnable onSuper) {
         if (this.getNavigation().canFloat()) {
-            super.jumpInLiquid(p_204045_);
+            onSuper.run();
         } else {
             this.setDeltaMovement(this.getDeltaMovement().add(0.0, 0.3, 0.0));
         }
     }
 
+    @Override
+    public void jumpInFluid(net.neoforged.neoforge.fluids.FluidType type) {
+        this.jumpInLiquidInternal(() -> super.jumpInFluid(type));
+    }
+
     @VisibleForTesting
     public void removeFreeWill() {
         this.removeAllGoals(p_351790_ -> true);
@@ -1503,5 +_,40 @@
     public ItemStack getPickResult() {
         SpawnEggItem spawneggitem = SpawnEggItem.byId(this.getType());
         return spawneggitem == null ? null : new ItemStack(spawneggitem);
+    }
+
+    /**
+    * Returns the type of spawn that created this mob, if applicable.
+    * If it could not be determined, this will return null.
+    * <p>
+    * This is set via {@link Mob#finalizeSpawn}, so you should not call this from within that method, instead using the parameter.
+    */
+    @Nullable
+    public final MobSpawnType getSpawnType() {
+        return this.spawnType;
+    }
+
+    /**
+     * This method exists so that spawns can be cancelled from the {@link net.neoforged.neoforge.event.entity.living.MobSpawnEvent.FinalizeSpawn FinalizeSpawnEvent}
+     * without needing to hook up an additional handler for the {@link net.neoforged.neoforge.event.entity.EntityJoinLevelEvent EntityJoinLevelEvent}.
+     * @return if this mob will be blocked from spawning during {@link Level#addFreshEntity(Entity)}
+     * @apiNote Not public-facing API.
+     */
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public final boolean isSpawnCancelled() {
+        return this.spawnCancelled;
+    }
+
+    /**
+     * Marks this mob as being disallowed to spawn during {@link Level#addFreshEntity(Entity)}.<p>
+     * @throws UnsupportedOperationException if this entity has already been {@link Entity#isAddedToLevel()} added to the level.
+     * @apiNote Not public-facing API.
+     */
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public final void setSpawnCancelled(boolean cancel) {
+        if (this.isAddedToLevel()) {
+            throw new UnsupportedOperationException("Late invocations of Mob#setSpawnCancelled are not permitted.");
+        }
+        this.spawnCancelled = cancel;
     }
 }
