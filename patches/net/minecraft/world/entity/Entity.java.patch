--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -136,7 +_,7 @@
 import net.minecraft.world.scores.Team;
 import org.slf4j.Logger;
 
-public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess, ScoreHolder {
+public abstract class Entity extends net.neoforged.neoforge.attachment.AttachmentHolder implements SyncedDataHolder, Nameable, EntityAccess, ScoreHolder, net.neoforged.neoforge.common.extensions.IEntityExtension {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final String ID_TAG = "id";
     public static final String PASSENGERS_TAG = "Passengers";
@@ -157,6 +_,7 @@
     private static final double LAVA_SLOW_FLOW_SCALE = 0.0023333333333333335;
     public static final String UUID_TAG = "UUID";
     private static double viewScale = 1.0;
+    @Deprecated // Forge: Use the getter to allow overriding in mods
     private final EntityType<?> type;
     private int id = ENTITY_COUNTER.incrementAndGet();
     public boolean blocksBuilding;
@@ -201,8 +_,10 @@
     public int tickCount;
     private int remainingFireTicks = -this.getFireImmuneTicks();
     protected boolean wasTouchingWater;
+    @Deprecated // Forge: Use forgeFluidTypeHeight instead
     protected Object2DoubleMap<TagKey<Fluid>> fluidHeight = new Object2DoubleArrayMap<>(2);
     protected boolean wasEyeInWater;
+    @Deprecated // Forge: Use forgeFluidTypeOnEyes instead
     private final Set<TagKey<Fluid>> fluidOnEyes = new HashSet<>();
     public int invulnerableTime;
     protected boolean firstTick = true;
@@ -271,7 +_,10 @@
         this.defineSynchedData(synchedentitydata$builder);
         this.entityData = synchedentitydata$builder.build();
         this.setPos(0.0, 0.0, 0.0);
+        net.neoforged.neoforge.event.entity.EntityEvent.Size sizeEvent = net.neoforged.neoforge.event.EventHooks.getEntitySizeForge(this, Pose.STANDING, this.dimensions);
+        this.dimensions = sizeEvent.getNewSize();
         this.eyeHeight = this.dimensions.eyeHeight();
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityEvent.EntityConstructing(this));
     }
 
     public boolean isColliding(BlockPos p_20040_, BlockState p_20041_) {
@@ -478,7 +_,7 @@
 
         if (this.isInLava()) {
             this.lavaHurt();
-            this.fallDistance *= 0.5F;
+            this.fallDistance *= this.getFluidFallDistanceModifier(net.neoforged.neoforge.common.NeoForgeMod.LAVA_TYPE.value());
         }
 
         this.checkBelowWorld();
@@ -760,12 +_,12 @@
                     this.setRemainingFireTicks(-this.getFireImmuneTicks());
                 }
 
-                if (this.wasOnFire && (this.isInPowderSnow || this.isInWaterRainOrBubble())) {
+                if (this.wasOnFire && (this.isInPowderSnow || this.isInWaterRainOrBubble()|| this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType)))) {
                     this.playEntityOnFireExtinguishedSound();
                 }
             }
 
-            if (this.isOnFire() && (this.isInPowderSnow || this.isInWaterRainOrBubble())) {
+            if (this.isOnFire() && (this.isInPowderSnow || this.isInWaterRainOrBubble()|| this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType)))) {
                 this.setRemainingFireTicks(-this.getFireImmuneTicks());
             }
         }
@@ -845,9 +_,7 @@
                 return blockpos;
             } else {
                 BlockState blockstate = this.level().getBlockState(blockpos);
-                return (!((double)p_216987_ <= 0.5) || !blockstate.is(BlockTags.FENCES))
-                        && !blockstate.is(BlockTags.WALLS)
-                        && !(blockstate.getBlock() instanceof FenceGateBlock)
+                return (!((double)p_216987_ <= 0.5) || !blockstate.collisionExtendsVertically(this.level(), blockpos, this))
                     ? blockpos.atY(Mth.floor(this.position.y - (double)p_216987_))
                     : blockpos;
             }
@@ -1129,19 +_,19 @@
         return !blockstate.is(BlockTags.INSIDE_STEP_SOUND_BLOCKS) && !blockstate.is(BlockTags.COMBINATION_STEP_SOUND_BLOCKS) ? p_278049_ : blockpos;
     }
 
-    protected void playCombinationStepSounds(BlockState p_277472_, BlockState p_277630_) {
-        SoundType soundtype = p_277472_.getSoundType();
+    protected void playCombinationStepSounds(BlockState p_277472_, BlockState p_277630_, BlockPos primaryPos, BlockPos secondaryPos) {
+        SoundType soundtype = p_277472_.getSoundType(this.level, primaryPos, this);
         this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.15F, soundtype.getPitch());
-        this.playMuffledStepSound(p_277630_);
+        this.playMuffledStepSound(p_277630_, secondaryPos);
     }
 
-    protected void playMuffledStepSound(BlockState p_283110_) {
-        SoundType soundtype = p_283110_.getSoundType();
+    protected void playMuffledStepSound(BlockState p_283110_, BlockPos pos) {
+        SoundType soundtype = p_283110_.getSoundType(this.level, pos, this);
         this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.05F, soundtype.getPitch() * 0.8F);
     }
 
     protected void playStepSound(BlockPos p_20135_, BlockState p_20136_) {
-        SoundType soundtype = p_20136_.getSoundType();
+        SoundType soundtype = p_20136_.getSoundType(this.level, p_20135_, this);
         this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.15F, soundtype.getPitch());
     }
 
@@ -1294,20 +_,23 @@
 
     public void updateSwimming() {
         if (this.isSwimming()) {
-            this.setSwimming(this.isSprinting() && this.isInWater() && !this.isPassenger());
+            this.setSwimming(this.isSprinting() && (this.isInWater() || this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType))) && !this.isPassenger());
         } else {
             this.setSwimming(
-                this.isSprinting() && this.isUnderWater() && !this.isPassenger() && this.level().getFluidState(this.blockPosition).is(FluidTags.WATER)
+                this.isSprinting() && (this.isUnderWater() || this.canStartSwimming()) && !this.isPassenger()
             );
         }
     }
 
     protected boolean updateInWaterStateAndDoFluidPushing() {
         this.fluidHeight.clear();
+        this.forgeFluidTypeHeight.clear();
         this.updateInWaterStateAndDoWaterCurrentPushing();
-        double d0 = this.level().dimensionType().ultraWarm() ? 0.007 : 0.0023333333333333335;
-        boolean flag = this.updateFluidHeightAndDoFluidPushing(FluidTags.LAVA, d0);
-        return this.isInWater() || flag;
+        if (this.isInFluidType() && !(this.getVehicle() instanceof AbstractBoat)) {
+            this.fallDistance *= this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().filter(e -> !e.getKey().isAir() && !e.getKey().isVanilla()).map(e -> this.getFluidFallDistanceModifier(e.getKey())).min(Float::compare).orElse(1F);
+            if (this.isInFluidType((fluidType, height) -> !fluidType.isAir() && !fluidType.isVanilla() && this.canFluidExtinguish(fluidType))) this.clearFire();
+        }
+        return this.isInFluidType();
     }
 
     void updateInWaterStateAndDoWaterCurrentPushing() {
@@ -1332,6 +_,7 @@
     private void updateFluidOnEyes() {
         this.wasEyeInWater = this.isEyeInFluid(FluidTags.WATER);
         this.fluidOnEyes.clear();
+        this.forgeFluidTypeOnEyes = net.neoforged.neoforge.common.NeoForgeMod.EMPTY_TYPE.value();
         double d0 = this.getEyeY();
         if (this.getVehicle() instanceof AbstractBoat abstractboat
             && !abstractboat.isUnderWater()
@@ -1344,7 +_,7 @@
         FluidState fluidstate = this.level().getFluidState(blockpos);
         double d1 = (double)((float)blockpos.getY() + fluidstate.getHeight(this.level(), blockpos));
         if (d1 > d0) {
-            fluidstate.getTags().forEach(this.fluidOnEyes::add);
+            this.forgeFluidTypeOnEyes = fluidstate.getFluidType();
         }
     }
 
@@ -1389,12 +_,13 @@
     }
 
     public boolean canSpawnSprintParticle() {
-        return this.isSprinting() && !this.isInWater() && !this.isSpectator() && !this.isCrouching() && !this.isInLava() && this.isAlive();
+        return this.isSprinting() && !this.isInWater() && !this.isSpectator() && !this.isCrouching() && !this.isInLava() && this.isAlive() && !this.isInFluidType();
     }
 
     protected void spawnSprintParticle() {
         BlockPos blockpos = this.getOnPosLegacy();
         BlockState blockstate = this.level().getBlockState(blockpos);
+        if(!blockstate.addRunningEffects(level, blockpos, this))
         if (blockstate.getRenderShape() != RenderShape.INVISIBLE) {
             Vec3 vec3 = this.getDeltaMovement();
             BlockPos blockpos1 = this.blockPosition();
@@ -1408,16 +_,19 @@
                 d1 = Mth.clamp(d1, (double)blockpos.getZ(), (double)blockpos.getZ() + 1.0);
             }
 
-            this.level().addParticle(new BlockParticleOption(ParticleTypes.BLOCK, blockstate), d0, this.getY() + 0.1, d1, vec3.x * -4.0, 1.5, vec3.z * -4.0);
+            this.level().addParticle(new BlockParticleOption(ParticleTypes.BLOCK, blockstate).setPos(blockpos), d0, this.getY() + 0.1, d1, vec3.x * -4.0, 1.5, vec3.z * -4.0);
         }
     }
 
+    @Deprecated // Forge: Use isEyeInFluidType instead
     public boolean isEyeInFluid(TagKey<Fluid> p_204030_) {
+        if (p_204030_ == FluidTags.WATER) return this.isEyeInFluidType(net.neoforged.neoforge.common.NeoForgeMod.WATER_TYPE.value());
+        else if (p_204030_ == FluidTags.LAVA) return this.isEyeInFluidType(net.neoforged.neoforge.common.NeoForgeMod.LAVA_TYPE.value());
         return this.fluidOnEyes.contains(p_204030_);
     }
 
     public boolean isInLava() {
-        return !this.firstTick && this.fluidHeight.getDouble(FluidTags.LAVA) > 0.0;
+        return !this.firstTick && this.forgeFluidTypeHeight.getDouble(net.neoforged.neoforge.common.NeoForgeMod.LAVA_TYPE.value()) > 0.0D;
     }
 
     public void moveRelative(float p_19921_, Vec3 p_19922_) {
@@ -1796,6 +_,10 @@
                 p_20241_.put("Tags", listtag);
             }
 
+            CompoundTag attachments = serializeAttachments(registryAccess());
+            if (attachments != null) p_20241_.put(ATTACHMENTS_NBT_KEY, attachments);
+            if (persistentData != null) p_20241_.put("NeoForgeData", persistentData.copy());
+
             this.addAdditionalSaveData(p_20241_);
             if (this.isVehicle()) {
                 ListTag listtag1 = new ListTag();
@@ -1877,6 +_,8 @@
                 this.setGlowingTag(p_20259_.getBoolean("Glowing"));
                 this.setTicksFrozen(p_20259_.getInt("TicksFrozen"));
                 this.hasVisualFire = p_20259_.getBoolean("HasVisualFire");
+                if (p_20259_.contains("NeoForgeData", 10)) persistentData = p_20259_.getCompound("NeoForgeData");
+                if (p_20259_.contains(ATTACHMENTS_NBT_KEY, net.minecraft.nbt.Tag.TAG_COMPOUND)) deserializeAttachments(registryAccess(), p_20259_.getCompound(ATTACHMENTS_NBT_KEY));
                 if (p_20259_.contains("Tags", 9)) {
                     this.tags.clear();
                     ListTag listtag3 = p_20259_.getList("Tags", 8);
@@ -1959,6 +_,8 @@
         } else {
             ItemEntity itementity = new ItemEntity(p_376141_, this.getX(), this.getY() + (double)p_376881_, this.getZ(), p_376472_);
             itementity.setDefaultPickUpDelay();
+            if (captureDrops() != null) captureDrops().add(itementity);
+            else
             p_376141_.addFreshEntity(itementity);
             return itementity;
         }
@@ -2026,7 +_,11 @@
 
     public void rideTick() {
         this.setDeltaMovement(Vec3.ZERO);
-        this.tick();
+        // Neo: Permit cancellation of Entity#tick via EntityTickEvent.Pre
+        if (!net.neoforged.neoforge.event.EventHooks.fireEntityTickPre(this).isCanceled()) {
+            this.tick();
+            net.neoforged.neoforge.event.EventHooks.fireEntityTickPost(this);
+        }
         if (this.isPassenger()) {
             this.getVehicle().positionRider(this);
         }
@@ -2086,6 +_,7 @@
                 }
             }
 
+        if (!net.neoforged.neoforge.event.EventHooks.canMountEntity(this, p_19966_, true)) return false;
             if (p_19967_ || this.canRide(p_19966_) && p_19966_.canAddPassenger(this)) {
                 if (this.isPassenger()) {
                     this.stopRiding();
@@ -2117,6 +_,7 @@
     public void removeVehicle() {
         if (this.vehicle != null) {
             Entity entity = this.vehicle;
+            if (!net.neoforged.neoforge.event.EventHooks.canMountEntity(this, entity, false)) return;
             this.vehicle = null;
             entity.removePassenger(this);
         }
@@ -2166,6 +_,8 @@
         return this.passengers.isEmpty();
     }
 
+    /** @deprecated Forge: Use {@link #canBeRiddenUnderFluidType(net.neoforged.neoforge.fluids.FluidType, Entity) rider sensitive version} */
+    @Deprecated
     protected boolean couldAcceptPassenger() {
         return true;
     }
@@ -2354,7 +_,7 @@
     }
 
     public boolean isVisuallyCrawling() {
-        return this.isVisuallySwimming() && !this.isInWater();
+        return this.isVisuallySwimming() && !this.isInWater() && !this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType));
     }
 
     public void setSwimming(boolean p_20283_) {
@@ -2467,7 +_,7 @@
             this.igniteForSeconds(8.0F);
         }
 
-        this.hurtServer(p_19927_, this.damageSources().lightningBolt(), 5.0F);
+        this.hurt(this.damageSources().lightningBolt(), p_19928_.getDamage());
     }
 
     public void onAboveBubbleCol(boolean p_20313_) {
@@ -2562,7 +_,7 @@
     }
 
     protected Component getTypeName() {
-        return this.type.getDescription();
+        return this.getType().getDescription(); // Forge: Use getter to allow overriding by mods
     }
 
     public boolean is(Entity p_20356_) {
@@ -2617,10 +_,11 @@
     }
 
     protected final boolean isInvulnerableToBase(DamageSource p_20122_) {
-        return this.isRemoved()
+        boolean isVanillaInvulnerable = this.isRemoved()
             || this.invulnerable && !p_20122_.is(DamageTypeTags.BYPASSES_INVULNERABILITY) && !p_20122_.isCreativePlayer()
             || p_20122_.is(DamageTypeTags.IS_FIRE) && this.fireImmune()
             || p_20122_.is(DamageTypeTags.IS_FALL) && this.getType().is(EntityTypeTags.FALL_DAMAGE_IMMUNE);
+        return net.neoforged.neoforge.common.CommonHooks.isEntityInvulnerableTo(this, p_20122_, isVanillaInvulnerable);
     }
 
     public boolean isInvulnerable() {
@@ -2645,6 +_,7 @@
 
     @Nullable
     public Entity teleport(TeleportTransition p_379899_) {
+        if (!net.neoforged.neoforge.common.CommonHooks.onTravelToDimension(this, p_379899_.newLevel().dimension())) return null;
         if (this.level() instanceof ServerLevel serverlevel && !this.isRemoved()) {
             ServerLevel serverlevel1 = p_379899_.newLevel();
             boolean flag = serverlevel1.dimension() != serverlevel.dimension();
@@ -2852,6 +_,7 @@
         return this.stringUUID;
     }
 
+    @Deprecated // Forge: Use FluidType sensitive version
     public boolean isPushedByFluid() {
         return true;
     }
@@ -2960,6 +_,8 @@
         EntityDimensions entitydimensions = this.dimensions;
         Pose pose = this.getPose();
         EntityDimensions entitydimensions1 = this.getDimensions(pose);
+        net.neoforged.neoforge.event.entity.EntityEvent.Size sizeEvent = net.neoforged.neoforge.event.EventHooks.getEntitySizeForge(this, pose, entitydimensions, entitydimensions1);
+        entitydimensions1 = sizeEvent.getNewSize();
         this.dimensions = entitydimensions1;
         this.eyeHeight = entitydimensions1.eyeHeight();
         this.reapplyPosition();
@@ -3265,9 +_,17 @@
         return Mth.lerp(p_352259_, this.yRotO, this.yRot);
     }
 
+    @Deprecated // Forge: Use no parameter version instead, only for vanilla Tags
     public boolean updateFluidHeightAndDoFluidPushing(TagKey<Fluid> p_204032_, double p_204033_) {
+        this.updateFluidHeightAndDoFluidPushing();
+        if(p_204032_ == FluidTags.WATER) return this.isInFluidType(net.neoforged.neoforge.common.NeoForgeMod.WATER_TYPE.value());
+        else if (p_204032_ == FluidTags.LAVA) return this.isInFluidType(net.neoforged.neoforge.common.NeoForgeMod.LAVA_TYPE.value());
+        else return false;
+    }
+
+    public void updateFluidHeightAndDoFluidPushing() {
         if (this.touchingUnloadedChunk()) {
-            return false;
+            return;
         } else {
             AABB aabb = this.getBoundingBox().deflate(0.001);
             int i = Mth.floor(aabb.minX);
@@ -3282,25 +_,36 @@
             Vec3 vec3 = Vec3.ZERO;
             int k1 = 0;
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
+            class InterimCalculation {
+                double fluidHeight = 0.0D;
+                Vec3 flowVector = Vec3.ZERO;
+                int blockCount = 0;
+            }
+            it.unimi.dsi.fastutil.objects.Object2ObjectMap<net.neoforged.neoforge.fluids.FluidType, InterimCalculation> interimCalcs = null;
 
             for (int l1 = i; l1 < j; l1++) {
                 for (int i2 = k; i2 < l; i2++) {
                     for (int j2 = i1; j2 < j1; j2++) {
                         blockpos$mutableblockpos.set(l1, i2, j2);
                         FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                        if (fluidstate.is(p_204032_)) {
+                        net.neoforged.neoforge.fluids.FluidType fluidType = fluidstate.getFluidType();
+                        if (!fluidType.isAir()) {
                             double d1 = (double)((float)i2 + fluidstate.getHeight(this.level(), blockpos$mutableblockpos));
                             if (d1 >= aabb.minY) {
                                 flag1 = true;
-                                d0 = Math.max(d1 - aabb.minY, d0);
-                                if (flag) {
+                                if (interimCalcs == null) {
+                                    interimCalcs = new it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap<>();
+                                }
+                                InterimCalculation interim = interimCalcs.computeIfAbsent(fluidType, t -> new InterimCalculation());
+                                interim.fluidHeight = Math.max(d1 - aabb.minY, interim.fluidHeight);
+                                if (this.isPushedByFluid(fluidType)) {
                                     Vec3 vec31 = fluidstate.getFlow(this.level(), blockpos$mutableblockpos);
-                                    if (d0 < 0.4) {
-                                        vec31 = vec31.scale(d0);
+                                    if (interim.fluidHeight < 0.4D) {
+                                        vec31 = vec31.scale(interim.fluidHeight);
                                     }
 
-                                    vec3 = vec3.add(vec31);
-                                    k1++;
+                                    interim.flowVector = interim.flowVector.add(vec31);
+                                    interim.blockCount++;
                                 }
                             }
                         }
@@ -3308,27 +_,30 @@
                 }
             }
 
-            if (vec3.length() > 0.0) {
-                if (k1 > 0) {
-                    vec3 = vec3.scale(1.0 / (double)k1);
+            if(interimCalcs != null) {
+            interimCalcs.forEach((fluidType, interim) -> {
+            if (interim.flowVector.length() > 0.0D) {
+                if (interim.blockCount > 0) {
+                    interim.flowVector = interim.flowVector.scale(1.0D / (double)interim.blockCount);
                 }
 
                 if (!(this instanceof Player)) {
-                    vec3 = vec3.normalize();
+                    interim.flowVector = interim.flowVector.normalize();
                 }
 
                 Vec3 vec32 = this.getDeltaMovement();
-                vec3 = vec3.scale(p_204033_);
+                interim.flowVector = interim.flowVector.scale(this.getFluidMotionScale(fluidType));
                 double d2 = 0.003;
-                if (Math.abs(vec32.x) < 0.003 && Math.abs(vec32.z) < 0.003 && vec3.length() < 0.0045000000000000005) {
-                    vec3 = vec3.normalize().scale(0.0045000000000000005);
+                if (Math.abs(vec32.x) < 0.003D && Math.abs(vec32.z) < 0.003D && interim.flowVector.length() < 0.0045000000000000005D) {
+                    interim.flowVector = interim.flowVector.normalize().scale(0.0045000000000000005D);
                 }
 
-                this.setDeltaMovement(this.getDeltaMovement().add(vec3));
+                this.setDeltaMovement(this.getDeltaMovement().add(interim.flowVector));
             }
 
-            this.fluidHeight.put(p_204032_, d0);
-            return flag1;
+            this.setFluidTypeHeight(fluidType, interim.fluidHeight);
+            });
+            }
         }
     }
 
@@ -3341,7 +_,10 @@
         return !this.level().hasChunksAt(i, k, j, l);
     }
 
+    @Deprecated // Forge: Use getFluidTypeHeight instead
     public double getFluidHeight(TagKey<Fluid> p_204037_) {
+        if (p_204037_ == FluidTags.WATER) return getFluidTypeHeight(net.neoforged.neoforge.common.NeoForgeMod.WATER_TYPE.value());
+        else if (p_204037_ == FluidTags.LAVA) return getFluidTypeHeight(net.neoforged.neoforge.common.NeoForgeMod.LAVA_TYPE.value());
         return this.fluidHeight.getDouble(p_204037_);
     }
 
@@ -3478,6 +_,7 @@
 
             this.levelCallback.onMove();
         }
+        if (this.isAddedToLevel() && !this.level.isClientSide && !this.isRemoved()) this.level.getChunk((int) Math.floor(p_20344_) >> 4, (int) Math.floor(p_20346_) >> 4); // Forge - ensure target chunk is loaded.
     }
 
     public void checkDespawn() {
@@ -3603,6 +_,128 @@
 
     public boolean mayInteract(ServerLevel p_376870_, BlockPos p_146844_) {
         return true;
+    }
+
+    /**
+     * Neo: Short-lived holder of dropped item entities. Used mainly for Neo hooks and event logic.
+     * <p>
+     * When not null, records all item entities from {@link #spawnAtLocation(ItemStack, float)} and {@link net.minecraft.server.level.ServerPlayer#drop(ItemStack, boolean, boolean)} instead of adding them to the world.
+     */
+    @Nullable
+    private java.util.Collection<ItemEntity> captureDrops = null;
+
+    @Nullable
+    @Override
+    public java.util.Collection<ItemEntity> captureDrops() {
+        return captureDrops;
+    }
+
+    @Nullable
+    @Override
+    public java.util.Collection<ItemEntity> captureDrops(@Nullable java.util.Collection<ItemEntity> value) {
+        java.util.Collection<ItemEntity> ret = captureDrops;
+        this.captureDrops = value;
+        return ret;
+    }
+
+    // Neo: Injected ability to store arbitrary nbt onto entities in ways that allow inter-mod compat without compile-time dependencies
+    private CompoundTag persistentData;
+
+    @Override
+    public CompoundTag getPersistentData() {
+        if (persistentData == null)
+            persistentData = new CompoundTag();
+        return persistentData;
+    }
+
+    // Neo: Set the default behavior for trampling on Farmland
+    @Override
+    public boolean canTrample(ServerLevel level, BlockState state, BlockPos pos, float fallDistance) {
+        return level.random.nextFloat() < fallDistance - 0.5F
+             && this instanceof LivingEntity
+             && (this instanceof Player || net.neoforged.neoforge.event.EventHooks.canEntityGrief(level, this))
+             && this.getBbWidth() * this.getBbWidth() * this.getBbHeight() > 0.512F;
+    }
+
+    /**
+     * Neo: Internal use for keeping track of entities that are tracked by a world, to
+     * allow guarantees that entity position changes will force a chunk load, avoiding
+     * potential issues with entity desyncing and bad chunk data.
+     */
+    private boolean isAddedToLevel;
+
+    @Override
+    public final boolean isAddedToLevel() { return this.isAddedToLevel; }
+
+    @Override
+    public void onAddedToLevel() { this.isAddedToLevel = true; }
+
+    @Override
+    public void onRemovedFromLevel() { this.isAddedToLevel = false; }
+
+    // Neo: Helper method to stop an entity from being removed if already marked for removal
+    @Override
+    public void revive() {
+        this.unsetRemoved();
+    }
+
+    // Neo: New logic for determining entity-fluid interactions. Replaces the vanilla logic that used fluids/fluid tags.
+    protected Object2DoubleMap<net.neoforged.neoforge.fluids.FluidType> forgeFluidTypeHeight = new Object2DoubleArrayMap<>(net.neoforged.neoforge.fluids.FluidType.SIZE.get());
+    private net.neoforged.neoforge.fluids.FluidType forgeFluidTypeOnEyes = net.neoforged.neoforge.common.NeoForgeMod.EMPTY_TYPE.value();
+
+    protected final void setFluidTypeHeight(net.neoforged.neoforge.fluids.FluidType type, double height) {
+        this.forgeFluidTypeHeight.put(type, height);
+    }
+
+    @Override
+    public final double getFluidTypeHeight(net.neoforged.neoforge.fluids.FluidType type) {
+        return this.forgeFluidTypeHeight.getDouble(type);
+    }
+
+    @Override
+    public final boolean isInFluidType(java.util.function.BiPredicate<net.neoforged.neoforge.fluids.FluidType, Double> predicate, boolean forAllTypes) {
+        if (this.forgeFluidTypeHeight.isEmpty()) {
+            return false;
+        }
+        return forAllTypes ? this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().allMatch(e -> predicate.test(e.getKey(), e.getDoubleValue()))
+                  : this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().anyMatch(e -> predicate.test(e.getKey(), e.getDoubleValue()));
+    }
+
+    @Override
+    public final boolean isInFluidType() {
+        return this.forgeFluidTypeHeight.size() > 0;
+    }
+
+    @Override
+    public final net.neoforged.neoforge.fluids.FluidType getEyeInFluidType() {
+        return forgeFluidTypeOnEyes;
+    }
+
+    @Override
+    public net.neoforged.neoforge.fluids.FluidType getMaxHeightFluidType() {
+        if (this.forgeFluidTypeHeight.isEmpty()) {
+            return net.neoforged.neoforge.common.NeoForgeMod.EMPTY_TYPE.value();
+        }
+        return this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().max(java.util.Comparator.comparingDouble(Object2DoubleMap.Entry::getDoubleValue)).map(Object2DoubleMap.Entry::getKey).orElseGet(net.neoforged.neoforge.common.NeoForgeMod.EMPTY_TYPE::value);
+    }
+
+    // Neo: Hookup Attachment data setting
+    @Override
+    @Nullable
+    public final <T> T setData(net.neoforged.neoforge.attachment.AttachmentType<T> type, T data) {
+        // Entities are always saved, no setChanged() call is necessary.
+        return super.setData(type, data);
+    }
+
+    // Neo: Hookup Capabilities getters to entities
+    @Nullable
+    public final <T, C extends @org.jetbrains.annotations.Nullable Object> T getCapability(net.neoforged.neoforge.capabilities.EntityCapability<T, C> capability, C context) {
+        return capability.getCapability(this, context);
+    }
+
+    @Nullable
+    public final <T> T getCapability(net.neoforged.neoforge.capabilities.EntityCapability<T, @org.jetbrains.annotations.Nullable Void> capability) {
+        return capability.getCapability(this, null);
     }
 
     public Level level() {
