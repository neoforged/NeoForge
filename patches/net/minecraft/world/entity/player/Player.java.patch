--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -116,7 +_,8 @@
 import net.minecraft.world.scores.Team;
 import org.slf4j.Logger;
 
-public abstract class Player extends LivingEntity {
+public abstract class Player extends LivingEntity implements net.neoforged.neoforge.common.extensions.IPlayerExtension {
+   public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
    private static final Logger LOGGER = LogUtils.getLogger();
    public static final int MAX_NAME_LENGTH = 16;
    public static final HumanoidArm DEFAULT_MAIN_HAND = HumanoidArm.RIGHT;
@@ -179,6 +_,9 @@
    @Nullable
    public FishingHook fishing;
    protected float hurtDir;
+   private final java.util.Collection<MutableComponent> prefixes = new java.util.LinkedList<>();
+   private final java.util.Collection<MutableComponent> suffixes = new java.util.LinkedList<>();
+   @Nullable private Pose forcedPose;
 
    public Player(Level p_250508_, BlockPos p_250289_, float p_251702_, GameProfile p_252153_) {
       super(EntityType.PLAYER, p_250508_);
@@ -207,11 +_,7 @@
    }
 
    public static AttributeSupplier.Builder createAttributes() {
-      return LivingEntity.createLivingAttributes()
-         .add(Attributes.ATTACK_DAMAGE, 1.0)
-         .add(Attributes.MOVEMENT_SPEED, 0.1F)
-         .add(Attributes.ATTACK_SPEED)
-         .add(Attributes.LUCK);
+      return LivingEntity.createLivingAttributes().add(Attributes.ATTACK_DAMAGE, 1.0D).add(Attributes.MOVEMENT_SPEED, (double) 0.1F).add(Attributes.ATTACK_SPEED).add(Attributes.LUCK).add(net.neoforged.neoforge.common.NeoForgeMod.BLOCK_REACH.get()).add(Attributes.ATTACK_KNOCKBACK).add(net.neoforged.neoforge.common.NeoForgeMod.ENTITY_REACH.get());
    }
 
    @Override
@@ -227,6 +_,7 @@
 
    @Override
    public void tick() {
+      net.neoforged.neoforge.event.EventHooks.onPlayerPreTick(this);
       this.noPhysics = this.isSpectator();
       if (this.isSpectator()) {
          this.setOnGround(false);
@@ -242,7 +_,7 @@
             this.sleepCounter = 100;
          }
 
-         if (!this.level().isClientSide && this.level().isDay()) {
+         if (!this.level().isClientSide && !net.neoforged.neoforge.event.EventHooks.fireSleepingTimeCheck(this, getSleepingPos())) {
             this.stopSleepInBed(false, true);
          }
       } else if (this.sleepCounter > 0) {
@@ -297,6 +_,7 @@
       this.turtleHelmetTick();
       this.cooldowns.tick();
       this.updatePlayerPose();
+      net.neoforged.neoforge.event.EventHooks.onPlayerPostTick(this);
    }
 
    public boolean isSecondaryUseActive() {
@@ -371,6 +_,10 @@
    }
 
    protected void updatePlayerPose() {
+      if(forcedPose != null) {
+         this.setPose(forcedPose);
+         return;
+      }
       if (this.canPlayerFitWithinBlocksAndEntitiesWhen(Pose.SWIMMING)) {
          Pose pose;
          if (this.isFallFlying()) {
@@ -612,6 +_,7 @@
 
    @Override
    public void die(DamageSource p_36152_) {
+      if (net.neoforged.neoforge.common.CommonHooks.onLivingDeath(this, p_36152_)) return;
       super.die(p_36152_);
       this.reapplyPosition();
       if (!this.isSpectator()) {
@@ -666,7 +_,7 @@
 
    @Nullable
    public ItemEntity drop(ItemStack p_36177_, boolean p_36178_) {
-      return this.drop(p_36177_, false, p_36178_);
+      return net.neoforged.neoforge.common.CommonHooks.onPlayerTossEvent(this, p_36177_, p_36178_);
    }
 
    @Nullable
@@ -708,7 +_,12 @@
       }
    }
 
+   @Deprecated //Use location sensitive version below
    public float getDestroySpeed(BlockState p_36282_) {
+      return getDigSpeed(p_36282_, null);
+   }
+
+   public float getDigSpeed(BlockState p_36282_, @Nullable BlockPos pos) {
       float f = this.inventory.getDestroySpeed(p_36282_);
       if (f > 1.0F) {
          int i = EnchantmentHelper.getBlockEfficiency(this);
@@ -739,11 +_,12 @@
          f /= 5.0F;
       }
 
+      f = net.neoforged.neoforge.event.EventHooks.getBreakSpeed(this, p_36282_, f, pos);
       return f;
    }
 
    public boolean hasCorrectToolForDrops(BlockState p_36299_) {
-      return !p_36299_.requiresCorrectToolForDrops() || this.inventory.getSelected().isCorrectToolForDrops(p_36299_);
+      return net.neoforged.neoforge.event.EventHooks.doPlayerHarvestCheck(this, p_36299_, !p_36299_.requiresCorrectToolForDrops() || this.inventory.getSelected().isCorrectToolForDrops(p_36299_));
    }
 
    @Override
@@ -830,6 +_,7 @@
 
    @Override
    public boolean hurt(DamageSource p_36154_, float p_36155_) {
+      if (!net.neoforged.neoforge.common.CommonHooks.onPlayerAttack(this, p_36154_, p_36155_)) return false;
       if (this.isInvulnerableTo(p_36154_)) {
          return false;
       } else if (this.abilities.invulnerable && !p_36154_.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
@@ -865,7 +_,7 @@
    @Override
    protected void blockUsingShield(LivingEntity p_36295_) {
       super.blockUsingShield(p_36295_);
-      if (p_36295_.canDisableShield()) {
+      if (p_36295_.getMainHandItem().canDisableShield(this.useItem, this, p_36295_)) {
          this.disableShield(true);
       }
    }
@@ -897,7 +_,7 @@
 
    @Override
    protected void hurtCurrentlyUsedShield(float p_36383_) {
-      if (this.useItem.is(Items.SHIELD)) {
+      if (this.useItem.canPerformAction(net.neoforged.neoforge.common.ToolActions.SHIELD_BLOCK)) {
          if (!this.level().isClientSide) {
             this.awardStat(Stats.ITEM_USED.get(this.useItem.getItem()));
          }
@@ -905,7 +_,11 @@
          if (p_36383_ >= 3.0F) {
             int i = 1 + Mth.floor(p_36383_);
             InteractionHand interactionhand = this.getUsedItemHand();
-            this.useItem.hurtAndBreak(i, this, p_219739_ -> p_219739_.broadcastBreakEvent(interactionhand));
+            this.useItem.hurtAndBreak(i, this, p_219739_ -> {
+               p_219739_.broadcastBreakEvent(interactionhand);
+               net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, this.useItem, interactionhand);
+               stopUsingItem(); // Neo: Fix MC-168573 ("After breaking a shield, the player's off-hand can't finish using some items")
+            });
             if (this.useItem.isEmpty()) {
                if (interactionhand == InteractionHand.MAIN_HAND) {
                   this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
@@ -923,10 +_,13 @@
    @Override
    protected void actuallyHurt(DamageSource p_36312_, float p_36313_) {
       if (!this.isInvulnerableTo(p_36312_)) {
+         p_36313_ = net.neoforged.neoforge.common.CommonHooks.onLivingHurt(this, p_36312_, p_36313_);
+         if (p_36313_ <= 0) return;
          p_36313_ = this.getDamageAfterArmorAbsorb(p_36312_, p_36313_);
          p_36313_ = this.getDamageAfterMagicAbsorb(p_36312_, p_36313_);
          float f1 = Math.max(p_36313_ - this.getAbsorptionAmount(), 0.0F);
          this.setAbsorptionAmount(this.getAbsorptionAmount() - (p_36313_ - f1));
+         f1 = net.neoforged.neoforge.common.CommonHooks.onLivingDamage(this, p_36312_, f1);
          float f = p_36313_ - f1;
          if (f > 0.0F && f < 3.4028235E37F) {
             this.awardStat(Stats.DAMAGE_ABSORBED, Math.round(f * 10.0F));
@@ -990,6 +_,8 @@
 
          return InteractionResult.PASS;
       } else {
+         InteractionResult cancelResult = net.neoforged.neoforge.common.CommonHooks.onInteractEntity(this, p_36158_, p_36159_);
+         if (cancelResult != null) return cancelResult;
          ItemStack itemstack = this.getItemInHand(p_36159_);
          ItemStack itemstack1 = itemstack.copy();
          InteractionResult interactionresult = p_36158_.interact(this, p_36159_);
@@ -998,6 +_,9 @@
                itemstack.setCount(itemstack1.getCount());
             }
 
+            if (!this.abilities.instabuild && itemstack.isEmpty()) {
+               net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, itemstack1, p_36159_);
+            }
             return interactionresult;
          } else {
             if (!itemstack.isEmpty() && p_36158_ instanceof LivingEntity) {
@@ -1009,6 +_,7 @@
                if (interactionresult1.consumesAction()) {
                   this.level().gameEvent(GameEvent.ENTITY_INTERACT, p_36158_.position(), GameEvent.Context.of(this));
                   if (itemstack.isEmpty() && !this.abilities.instabuild) {
+                     net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, itemstack1, p_36159_);
                      this.setItemInHand(p_36159_, ItemStack.EMPTY);
                   }
 
@@ -1043,6 +_,7 @@
    }
 
    @Override
+   // Forge: Don't update this method to use IForgeEntity#getStepHeight() - https://github.com/MinecraftForge/MinecraftForge/issues/8922
    protected Vec3 maybeBackOffFromEdge(Vec3 p_36201_, MoverType p_36202_) {
       if (!this.abilities.flying
          && p_36201_.y <= 0.0
@@ -1097,6 +_,7 @@
       return p_36201_;
    }
 
+   // Forge: Don't update this method to use IForgeEntity#getStepHeight() - https://github.com/MinecraftForge/MinecraftForge/issues/9376
    private boolean isAboveGround() {
       return this.onGround()
          || this.fallDistance < this.maxUpStep()
@@ -1104,6 +_,7 @@
    }
 
    public void attack(Entity p_36347_) {
+      if (!net.neoforged.neoforge.common.CommonHooks.onPlayerAttackTarget(this, p_36347_)) return;
       if (p_36347_.isAttackable()) {
          if (!p_36347_.skipAttackInteraction(this)) {
             float f = (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
@@ -1117,11 +_,10 @@
             float f2 = this.getAttackStrengthScale(0.5F);
             f *= 0.2F + f2 * f2 * 0.8F;
             f1 *= f2;
-            this.resetAttackStrengthTicker();
             if (f > 0.0F || f1 > 0.0F) {
                boolean flag = f2 > 0.9F;
                boolean flag1 = false;
-               int i = 0;
+               float i = (float)this.getAttributeValue(Attributes.ATTACK_KNOCKBACK); // Forge: Initialize this value to the attack knockback attribute of the player, which is by default 0
                i += EnchantmentHelper.getKnockbackBonus(this);
                if (this.isSprinting() && flag) {
                   this.level().playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_KNOCKBACK, this.getSoundSource(), 1.0F, 1.0F);
@@ -1138,8 +_,10 @@
                   && !this.isPassenger()
                   && p_36347_ instanceof LivingEntity;
                flag2 = flag2 && !this.isSprinting();
+               net.neoforged.neoforge.event.entity.player.CriticalHitEvent hitResult = net.neoforged.neoforge.common.CommonHooks.getCriticalHit(this, p_36347_, flag2, flag2 ? 1.5F : 1.0F);
+               flag2 = hitResult != null;
                if (flag2) {
-                  f *= 1.5F;
+                  f *= hitResult.getDamageModifier();
                }
 
                f += f1;
@@ -1147,9 +_,7 @@
                double d0 = (double)(this.walkDist - this.walkDistO);
                if (flag && !flag2 && !flag1 && this.onGround() && d0 < (double)this.getSpeed()) {
                   ItemStack itemstack = this.getItemInHand(InteractionHand.MAIN_HAND);
-                  if (itemstack.getItem() instanceof SwordItem) {
-                     flag3 = true;
-                  }
+                  flag3 = itemstack.canPerformAction(net.neoforged.neoforge.common.ToolActions.SWORD_SWEEP);
                }
 
                float f4 = 0.0F;
@@ -1190,11 +_,13 @@
                      float f3 = 1.0F + EnchantmentHelper.getSweepingDamageRatio(this) * f;
 
                      for(LivingEntity livingentity : this.level().getEntitiesOfClass(LivingEntity.class, p_36347_.getBoundingBox().inflate(1.0, 0.25, 1.0))) {
+                        //PATCH 1.20.2: Entity reach distance was redone, this needs to be verified.
+                        double entityReachSq = Mth.square(this.getEntityReach()); // Use entity reach instead of constant 9.0. Vanilla uses bottom center-to-center checks here, so don't update this to use canReach, since it uses closest-corner checks.
                         if (livingentity != this
                            && livingentity != p_36347_
                            && !this.isAlliedTo(livingentity)
                            && (!(livingentity instanceof ArmorStand) || !((ArmorStand)livingentity).isMarker())
-                           && this.distanceToSqr(livingentity) < 9.0) {
+                           && this.distanceToSqr(livingentity) < entityReachSq) {
                            livingentity.knockback(
                               0.4F, (double)Mth.sin(this.getYRot() * (float) (Math.PI / 180.0)), (double)(-Mth.cos(this.getYRot() * (float) (Math.PI / 180.0)))
                            );
@@ -1238,13 +_,15 @@
                   EnchantmentHelper.doPostDamageEffects(this, p_36347_);
                   ItemStack itemstack1 = this.getMainHandItem();
                   Entity entity = p_36347_;
-                  if (p_36347_ instanceof EnderDragonPart) {
-                     entity = ((EnderDragonPart)p_36347_).parentMob;
+                  if (p_36347_ instanceof net.neoforged.neoforge.entity.PartEntity) {
+                     entity = ((net.neoforged.neoforge.entity.PartEntity<?>) p_36347_).getParent();
                   }
 
                   if (!this.level().isClientSide && !itemstack1.isEmpty() && entity instanceof LivingEntity) {
+                     ItemStack copy = itemstack1.copy();
                      itemstack1.hurtEnemy((LivingEntity)entity, this);
                      if (itemstack1.isEmpty()) {
+                        net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this, copy, InteractionHand.MAIN_HAND);
                         this.setItemInHand(InteractionHand.MAIN_HAND, ItemStack.EMPTY);
                      }
                   }
@@ -1271,6 +_,7 @@
                   }
                }
             }
+            this.resetAttackStrengthTicker(); // FORGE: Moved from beginning of attack() so that getAttackStrengthScale() returns an accurate value during all attack events
          }
       }
    }
@@ -1287,7 +_,7 @@
       }
 
       if (this.random.nextFloat() < f) {
-         this.getCooldowns().addCooldown(Items.SHIELD, 100);
+         this.getCooldowns().addCooldown(this.getUseItem().getItem(), 100);
          this.stopUsingItem();
          this.level().broadcastEntityEvent(this, (byte)30);
       }
@@ -1349,6 +_,7 @@
    }
 
    public void stopSleepInBed(boolean p_36226_, boolean p_36227_) {
+      net.neoforged.neoforge.event.EventHooks.onPlayerWakeup(this, p_36226_, p_36227_);
       super.stopSleeping();
       if (this.level() instanceof ServerLevel && p_36227_) {
          ((ServerLevel)this.level()).updateSleepingPlayerList();
@@ -1375,7 +_,7 @@
       } else if (block instanceof BedBlock && BedBlock.canSetSpawn(p_36131_)) {
          return BedBlock.findStandUpPosition(EntityType.PLAYER, p_36131_, p_36132_, blockstate.getValue(BedBlock.FACING), p_36133_);
       } else if (!p_36134_) {
-         return Optional.empty();
+         return blockstate.getRespawnPosition(EntityType.PLAYER, p_36131_, p_36132_, p_36133_, null);
       } else {
          boolean flag = block.isPossibleToRespawnInThis(blockstate);
          BlockState blockstate1 = p_36131_.getBlockState(p_36132_.above());
@@ -1561,6 +_,7 @@
    @Override
    public boolean causeFallDamage(float p_150093_, float p_150094_, DamageSource p_150095_) {
       if (this.abilities.mayfly) {
+         net.neoforged.neoforge.event.EventHooks.onPlayerFall(this, p_150093_, p_150093_);
          return false;
       } else {
          if (p_150093_ >= 2.0F) {
@@ -1574,7 +_,7 @@
    public boolean tryToStartFallFlying() {
       if (!this.onGround() && !this.isFallFlying() && !this.isInWater() && !this.hasEffect(MobEffects.LEVITATION)) {
          ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);
-         if (itemstack.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemstack)) {
+         if (itemstack.canElytraFly(this)) {
             this.startFallFlying();
             return true;
          }
@@ -1603,13 +_,13 @@
    protected void playStepSound(BlockPos p_282121_, BlockState p_282194_) {
       if (this.isInWater()) {
          this.waterSwimSound();
-         this.playMuffledStepSound(p_282194_);
+         this.playMuffledStepSound(p_282194_, p_282121_);
       } else {
          BlockPos blockpos = this.getPrimaryStepSoundBlockPos(p_282121_);
          if (!p_282121_.equals(blockpos)) {
             BlockState blockstate = this.level().getBlockState(blockpos);
             if (blockstate.is(BlockTags.COMBINATION_STEP_SOUND_BLOCKS)) {
-               this.playCombinationStepSounds(blockstate, p_282194_);
+               this.playCombinationStepSounds(blockstate, p_282194_, blockpos, p_282121_);
             } else {
                super.playStepSound(blockpos, blockstate);
             }
@@ -1638,6 +_,10 @@
    }
 
    public void giveExperiencePoints(int p_36291_) {
+      net.neoforged.neoforge.event.entity.player.PlayerXpEvent.XpChange event = new net.neoforged.neoforge.event.entity.player.PlayerXpEvent.XpChange(this, p_36291_);
+      if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(event).isCanceled()) return;
+      p_36291_ = event.getAmount();
+
       this.increaseScore(p_36291_);
       this.experienceProgress += (float)p_36291_ / (float)this.getXpNeededForNextLevel();
       this.totalExperience = Mth.clamp(this.totalExperience + p_36291_, 0, Integer.MAX_VALUE);
@@ -1665,7 +_,7 @@
    }
 
    public void onEnchantmentPerformed(ItemStack p_36172_, int p_36173_) {
-      this.experienceLevel -= p_36173_;
+      giveExperienceLevels(-p_36173_);
       if (this.experienceLevel < 0) {
          this.experienceLevel = 0;
          this.experienceProgress = 0.0F;
@@ -1676,6 +_,10 @@
    }
 
    public void giveExperienceLevels(int p_36276_) {
+      net.neoforged.neoforge.event.entity.player.PlayerXpEvent.LevelChange event = new net.neoforged.neoforge.event.entity.player.PlayerXpEvent.LevelChange(this, p_36276_);
+      if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(event).isCanceled()) return;
+      p_36276_ = event.getLevels();
+
       this.experienceLevel += p_36276_;
       if (this.experienceLevel < 0) {
          this.experienceLevel = 0;
@@ -1879,7 +_,11 @@
 
    @Override
    public Component getDisplayName() {
-      MutableComponent mutablecomponent = PlayerTeam.formatNameForTeam(this.getTeam(), this.getName());
+      if (this.displayname == null) this.displayname = net.neoforged.neoforge.event.EventHooks.getPlayerDisplayName(this, this.getName());
+      MutableComponent mutablecomponent = Component.literal("");
+      mutablecomponent = prefixes.stream().reduce(mutablecomponent, MutableComponent::append);
+      mutablecomponent = mutablecomponent.append(PlayerTeam.formatNameForTeam(this.getTeam(), this.displayname));
+      mutablecomponent = suffixes.stream().reduce(mutablecomponent, MutableComponent::append);
       return this.decorateDisplayNameComponent(mutablecomponent);
    }
 
@@ -2026,25 +_,25 @@
          Predicate<ItemStack> predicate = ((ProjectileWeaponItem)p_36349_.getItem()).getSupportedHeldProjectiles();
          ItemStack itemstack = ProjectileWeaponItem.getHeldProjectile(this, predicate);
          if (!itemstack.isEmpty()) {
-            return itemstack;
+            return net.neoforged.neoforge.common.CommonHooks.getProjectile(this, p_36349_, itemstack);
          } else {
             predicate = ((ProjectileWeaponItem)p_36349_.getItem()).getAllSupportedProjectiles();
 
             for(int i = 0; i < this.inventory.getContainerSize(); ++i) {
                ItemStack itemstack1 = this.inventory.getItem(i);
                if (predicate.test(itemstack1)) {
-                  return itemstack1;
+                  return net.neoforged.neoforge.common.CommonHooks.getProjectile(this, p_36349_, itemstack1);
                }
             }
 
-            return this.abilities.instabuild ? new ItemStack(Items.ARROW) : ItemStack.EMPTY;
+            return net.neoforged.neoforge.common.CommonHooks.getProjectile(this, p_36349_, this.abilities.instabuild ? new ItemStack(Items.ARROW) : ItemStack.EMPTY);
          }
       }
    }
 
    @Override
    public ItemStack eat(Level p_36185_, ItemStack p_36186_) {
-      this.getFoodData().eat(p_36186_.getItem(), p_36186_);
+      this.getFoodData().eat(p_36186_.getItem(), p_36186_, this);
       this.awardStat(Stats.ITEM_USED.get(p_36186_.getItem()));
       p_36185_.playSound(
          null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_BURP, SoundSource.PLAYERS, 0.5F, p_36185_.random.nextFloat() * 0.1F + 0.9F
@@ -2160,5 +_,63 @@
       public Component getMessage() {
          return this.message;
       }
+   }
+
+   // =========== FORGE START ==============//
+   public Collection<MutableComponent> getPrefixes() {
+       return this.prefixes;
+   }
+
+   public Collection<MutableComponent> getSuffixes() {
+       return this.suffixes;
+   }
+
+   private Component displayname = null;
+   /**
+    * Force the displayed name to refresh, by firing {@link net.neoforged.neoforge.event.entity.player.PlayerEvent.NameFormat}, using the real player name as event parameter.
+    */
+   public void refreshDisplayName() {
+      this.displayname = net.neoforged.neoforge.event.EventHooks.getPlayerDisplayName(this, this.getName());
+   }
+
+   private final net.neoforged.neoforge.common.util.LazyOptional<net.neoforged.neoforge.items.IItemHandler>
+         playerMainHandler = net.neoforged.neoforge.common.util.LazyOptional.of(
+               () -> new net.neoforged.neoforge.items.wrapper.PlayerMainInvWrapper(inventory));
+
+   private final net.neoforged.neoforge.common.util.LazyOptional<net.neoforged.neoforge.items.IItemHandler>
+         playerEquipmentHandler = net.neoforged.neoforge.common.util.LazyOptional.of(
+               () -> new net.neoforged.neoforge.items.wrapper.CombinedInvWrapper(
+                     new net.neoforged.neoforge.items.wrapper.PlayerArmorInvWrapper(inventory),
+                     new net.neoforged.neoforge.items.wrapper.PlayerOffhandInvWrapper(inventory)));
+
+   private final net.neoforged.neoforge.common.util.LazyOptional<net.neoforged.neoforge.items.IItemHandler>
+         playerJoinedHandler = net.neoforged.neoforge.common.util.LazyOptional.of(
+               () -> new net.neoforged.neoforge.items.wrapper.PlayerInvWrapper(inventory));
+
+   @Override
+   public <T> net.neoforged.neoforge.common.util.LazyOptional<T> getCapability(net.neoforged.neoforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (this.isAlive() && capability == net.neoforged.neoforge.common.capabilities.Capabilities.ITEM_HANDLER) {
+         if (facing == null) return playerJoinedHandler.cast();
+         else if (facing.getAxis().isVertical()) return playerMainHandler.cast();
+         else if (facing.getAxis().isHorizontal()) return playerEquipmentHandler.cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   /**
+    * Force a pose for the player. If set, the vanilla pose determination and clearance check is skipped. Make sure the pose is clear yourself (e.g. in PlayerTick).
+    * This has to be set just once, do not set it every tick.
+    * Make sure to clear (null) the pose if not required anymore and only use if necessary.
+    */
+   public void setForcedPose(@Nullable Pose pose) {
+      this.forcedPose = pose;
+   }
+
+   /**
+    * @return The forced pose if set, null otherwise
+    */
+   @Nullable
+   public Pose getForcedPose() {
+      return this.forcedPose;
    }
 }
