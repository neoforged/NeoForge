--- a/net/minecraft/world/entity/animal/Parrot.java
+++ b/net/minecraft/world/entity/animal/Parrot.java
@@ -70,9 +_,11 @@
     private static final EntityDataAccessor<Integer> DATA_VARIANT_ID = SynchedEntityData.defineId(Parrot.class, EntityDataSerializers.INT);
     private static final Predicate<Mob> NOT_PARROT_PREDICATE = new Predicate<Mob>() {
         public boolean test(@Nullable Mob mob) {
-            return mob != null && Parrot.MOB_SOUND_MAP.containsKey(mob.getType());
+            return mob != null && (Parrot.MOB_SOUND_MAP.containsKey(mob.getType()) || mob.getType().builtInRegistryHolder().getData(net.neoforged.neoforge.registries.datamaps.builtin.NeoForgeDataMaps.PARROT_IMITATIONS) != null);
         }
     };
+    /** @deprecated Neo: use the {@link net.neoforged.neoforge.registries.datamaps.builtin.NeoForgeDataMaps#PARROT_IMITATIONS data map} instead */
+    @Deprecated
     static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP = Util.make(Maps.newHashMap(), p_326764_ -> {
         p_326764_.put(EntityType.BLAZE, SoundEvents.PARROT_IMITATE_BLAZE);
         p_326764_.put(EntityType.BOGGED, SoundEvents.PARROT_IMITATE_BOGGED);
@@ -257,7 +_,7 @@
             }
 
             if (!this.level().isClientSide) {
-                if (this.random.nextInt(10) == 0) {
+                if (this.random.nextInt(10) == 0 && !net.neoforged.neoforge.event.EventHooks.onAnimalTame(this, player)) {
                     this.tame(player);
                     this.level().broadcastEntityEvent(this, (byte)7);
                 } else {
@@ -321,7 +_,10 @@
 
     public static SoundEvent getAmbient(Level level, RandomSource random) {
         if (level.getDifficulty() != Difficulty.PEACEFUL && random.nextInt(1000) == 0) {
-            List<EntityType<?>> list = Lists.newArrayList(MOB_SOUND_MAP.keySet());
+            final var entities = new java.util.HashSet<>(MOB_SOUND_MAP.keySet());
+            final var registry = level.registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.ENTITY_TYPE);
+            registry.getDataMap(net.neoforged.neoforge.registries.datamaps.builtin.NeoForgeDataMaps.PARROT_IMITATIONS).keySet().forEach(key -> entities.add(registry.get(key)));
+            List<EntityType<?>> list = Lists.newArrayList(entities);
             return getImitatedSound(list.get(random.nextInt(list.size())));
         } else {
             return SoundEvents.PARROT_AMBIENT;
@@ -329,7 +_,9 @@
     }
 
     private static SoundEvent getImitatedSound(EntityType<?> type) {
-        return MOB_SOUND_MAP.getOrDefault(type, SoundEvents.PARROT_AMBIENT);
+        var imitation = type.builtInRegistryHolder().getData(net.neoforged.neoforge.registries.datamaps.builtin.NeoForgeDataMaps.PARROT_IMITATIONS);
+        if (imitation != null) return imitation.sound();
+        return SoundEvents.PARROT_AMBIENT;
     }
 
     @Override
