--- a/net/minecraft/world/entity/SpawnPlacements.java
+++ b/net/minecraft/world/entity/SpawnPlacements.java
@@ -46,6 +_,10 @@
 public class SpawnPlacements {
     private static final Map<EntityType<?>, SpawnPlacements.Data> DATA_BY_TYPE = Maps.newHashMap();
 
+    /**
+     * @deprecated Neo: Modders should use {@link net.neoforged.neoforge.event.entity.RegisterSpawnPlacementsEvent} instead.
+     */
+    @Deprecated
     private static <T extends Mob> void register(
         EntityType<T> entityType, SpawnPlacementType spawnPlacementType, Heightmap.Types heightmapType, SpawnPlacements.SpawnPredicate<T> predicate
     ) {
@@ -73,7 +_,13 @@
         EntityType<T> entityType, ServerLevelAccessor serverLevel, MobSpawnType spawnType, BlockPos pos, RandomSource random
     ) {
         SpawnPlacements.Data spawnplacements$data = DATA_BY_TYPE.get(entityType);
-        return spawnplacements$data == null || ((SpawnPredicate<T>)spawnplacements$data.predicate).test(entityType, serverLevel, spawnType, pos, random);
+        boolean vanillaResult = spawnplacements$data == null || spawnplacements$data.predicate.test((EntityType)entityType, serverLevel, spawnType, pos, random);
+        return net.neoforged.neoforge.event.EventHooks.checkSpawnPlacements(entityType, serverLevel, spawnType, pos, random, vanillaResult);
+    }
+
+    // Neo: Added to allow for checking if an entity has a spawn placement
+    public static boolean hasPlacement(EntityType<?> type) {
+        return DATA_BY_TYPE.containsKey(type);
     }
 
     static {
@@ -168,5 +_,16 @@
     @FunctionalInterface
     public interface SpawnPredicate<T extends Entity> {
         boolean test(EntityType<T> entityType, ServerLevelAccessor serverLevel, MobSpawnType spawnType, BlockPos pos, RandomSource random);
+    }
+
+    /**
+     * Neo: Purely for Neo usage to fire off the spawn registering events.
+     */
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public static void fireSpawnPlacementEvent() {
+         Map<EntityType<?>, net.neoforged.neoforge.event.entity.RegisterSpawnPlacementsEvent.MergedSpawnPredicate<?>> map = Maps.newHashMap();
+         DATA_BY_TYPE.forEach((type, data) -> map.put(type, new net.neoforged.neoforge.event.entity.RegisterSpawnPlacementsEvent.MergedSpawnPredicate<>(data.predicate, data.placement, data.heightMap)));
+         net.neoforged.fml.ModLoader.postEvent(new net.neoforged.neoforge.event.entity.RegisterSpawnPlacementsEvent(map));
+         map.forEach(((entityType, merged) -> DATA_BY_TYPE.put(entityType, new SpawnPlacements.Data(merged.getHeightmapType(), merged.getSpawnType(), merged.build()))));
     }
 }
