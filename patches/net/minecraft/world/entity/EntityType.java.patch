--- a/net/minecraft/world/entity/EntityType.java
+++ b/net/minecraft/world/entity/EntityType.java
@@ -834,6 +_,10 @@
     private final float spawnDimensionsScale;
     private final FeatureFlagSet requiredFeatures;
 
+    private final java.util.function.Predicate<EntityType<?>> trackDeltasSupplier;
+    private final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier;
+    private final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier;
+
     private static <T extends Entity> EntityType<T> register(String key, EntityType.Builder<T> builder) {
         return Registry.register(BuiltInRegistries.ENTITY_TYPE, key, builder.build(key));
     }
@@ -860,6 +_,26 @@
         int updateInterval,
         FeatureFlagSet requiredFeatures
     ) {
+        this(factory, category, serialize, summon, fireImmune, canSpawnFarFromPlayer, immuneTo, dimensions, spawnDimensionsScale, clientTrackingRange, updateInterval, requiredFeatures, EntityType::defaultTrackDeltasSupplier, EntityType::defaultTrackingRangeSupplier, EntityType::defaultUpdateIntervalSupplier);
+    }
+
+    public EntityType(
+        EntityType.EntityFactory<T> factory,
+        MobCategory category,
+        boolean serialize,
+        boolean summon,
+        boolean fireImmune,
+        boolean canSpawnFarFromPlayer,
+        ImmutableSet<Block> immuneTo,
+        EntityDimensions dimensions,
+        float spawnDimensionsScale,
+        int clientTrackingRange,
+        int updateInterval,
+        FeatureFlagSet requiredFeatures,
+        final java.util.function.Predicate<EntityType<?>> trackDeltasSupplier,
+        final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier,
+        final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier
+    ) {
         this.factory = factory;
         this.category = category;
         this.canSpawnFarFromPlayer = canSpawnFarFromPlayer;
@@ -872,6 +_,9 @@
         this.clientTrackingRange = clientTrackingRange;
         this.updateInterval = updateInterval;
         this.requiredFeatures = requiredFeatures;
+        this.trackDeltasSupplier = trackDeltasSupplier;
+        this.trackingRangeSupplier = trackingRangeSupplier;
+        this.updateIntervalSupplier = updateIntervalSupplier;
     }
 
     @Nullable
@@ -958,6 +_,15 @@
                 mob.yHeadRot = mob.getYRot();
                 mob.yBodyRot = mob.getYRot();
                 mob.finalizeSpawn(level, level.getCurrentDifficultyAt(mob.blockPosition()), spawnType, null);
+
+                if (mob.isSpawnCancelled()) {
+                    // Neo: Discard mob, spawn was cancelled
+                    mob.discard();
+                    // return null, mob was killed, context should be lost
+                    // fixes llamas for wandering trader spawning if wandering trader was cancelled
+                    return null;
+                }
+
                 mob.playAmbientSound();
             }
 
@@ -1149,14 +_,23 @@
     }
 
     public int clientTrackingRange() {
+        return trackingRangeSupplier.applyAsInt(this);
+    }
+    private int defaultTrackingRangeSupplier() {
         return this.clientTrackingRange;
     }
 
     public int updateInterval() {
+        return updateIntervalSupplier.applyAsInt(this);
+    }
+    private int defaultUpdateIntervalSupplier() {
         return this.updateInterval;
     }
 
     public boolean trackDeltas() {
+        return this.trackDeltasSupplier.test(this);
+    }
+    private boolean defaultTrackDeltasSupplier() {
         return this != PLAYER
             && this != LLAMA_SPIT
             && this != WITHER
@@ -1192,6 +_,8 @@
         return this.builtInRegistryHolder;
     }
 
+    public Stream<TagKey<EntityType<?>>> getTags() {return this.builtInRegistryHolder().tags();}
+
     public static class Builder<T extends Entity> {
         private final EntityType.EntityFactory<T> factory;
         private final MobCategory category;
@@ -1207,6 +_,10 @@
         private EntityAttachments.Builder attachments = EntityAttachments.builder();
         private FeatureFlagSet requiredFeatures = FeatureFlags.VANILLA_SET;
 
+        private java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier = EntityType::defaultTrackDeltasSupplier;
+        private java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier = EntityType::defaultTrackingRangeSupplier;
+        private java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier = EntityType::defaultUpdateIntervalSupplier;
+
         private Builder(EntityType.EntityFactory<T> factory, MobCategory category) {
             this.factory = factory;
             this.category = category;
@@ -1314,6 +_,21 @@
             return this;
         }
 
+        public EntityType.Builder<T> setUpdateInterval(int interval) {
+             this.updateIntervalSupplier = t->interval;
+             return this;
+        }
+
+        public EntityType.Builder<T> setTrackingRange(int range) {
+             this.trackingRangeSupplier = t->range;
+             return this;
+        }
+
+        public EntityType.Builder<T> setShouldReceiveVelocityUpdates(boolean value) {
+             this.velocityUpdateSupplier = t->value;
+             return this;
+        }
+
         public EntityType<T> build(String key) {
             if (this.serialize) {
                 Util.fetchChoiceType(References.ENTITY_TREE, key);
@@ -1331,7 +_,10 @@
                 this.spawnDimensionsScale,
                 this.clientTrackingRange,
                 this.updateInterval,
-                this.requiredFeatures
+                this.requiredFeatures,
+                velocityUpdateSupplier,
+                trackingRangeSupplier,
+                updateIntervalSupplier
             );
         }
     }
