--- a/net/minecraft/world/entity/ai/village/poi/PoiTypes.java
+++ b/net/minecraft/world/entity/ai/village/poi/PoiTypes.java
@@ -66,7 +_,9 @@
       .stream()
       .flatMap(p_218093_ -> p_218093_.getStateDefinition().getPossibleStates().stream())
       .collect(ImmutableSet.toImmutableSet());
-   private static final Map<BlockState, Holder<PoiType>> TYPE_BY_STATE = Maps.newHashMap();
+   // Forge: We patch these 2 fields to support modded entries
+   private static final Map<BlockState, PoiType> TYPE_BY_STATE = net.neoforged.neoforge.registries.GameData.getBlockStatePointOfInterestTypeMap();
+   protected static final Set<BlockState> f_218067_ = TYPE_BY_STATE.keySet();
 
    private static Set<BlockState> getBlockStates(Block p_218074_) {
       return ImmutableSet.copyOf(p_218074_.getStateDefinition().getPossibleStates());
@@ -84,20 +_,10 @@
    }
 
    private static void registerBlockStates(Holder<PoiType> p_250815_, Set<BlockState> p_250679_) {
-      p_250679_.forEach(
-         p_218081_ -> {
-            Holder<PoiType> holder = TYPE_BY_STATE.put(p_218081_, p_250815_);
-            if (holder != null) {
-               throw (IllegalStateException)Util.pauseInIde(
-                  new IllegalStateException(String.format(Locale.ROOT, "%s is defined in more than one PoI type", p_218081_))
-               );
-            }
-         }
-      );
    }
 
    public static Optional<Holder<PoiType>> forState(BlockState p_218076_) {
-      return Optional.ofNullable(TYPE_BY_STATE.get(p_218076_));
+      return Optional.ofNullable(TYPE_BY_STATE.get(p_218076_)).flatMap(net.neoforged.neoforge.registries.ForgeRegistries.POI_TYPES::getHolder);
    }
 
    public static boolean hasPoi(BlockState p_254440_) {
