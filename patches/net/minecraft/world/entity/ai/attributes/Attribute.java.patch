--- a/net/minecraft/world/entity/ai/attributes/Attribute.java
+++ b/net/minecraft/world/entity/ai/attributes/Attribute.java
@@ -9,7 +_,7 @@
 import net.minecraft.network.codec.ByteBufCodecs;
 import net.minecraft.network.codec.StreamCodec;
 
-public class Attribute {
+public class Attribute implements net.neoforged.neoforge.common.extensions.IAttributeExtension {
     public static final Codec<Holder<Attribute>> CODEC = BuiltInRegistries.ATTRIBUTE.holderByNameCodec();
     public static final StreamCodec<RegistryFriendlyByteBuf, Holder<Attribute>> STREAM_CODEC = ByteBufCodecs.holderRegistry(Registries.ATTRIBUTE);
     private final double defaultValue;
@@ -50,6 +_,21 @@
 
     public ChatFormatting getStyle(boolean p_347715_) {
         return this.sentiment.getStyle(p_347715_);
+    }
+
+    // Neo: Patch in the default implementation of IAttributeExtension#getMergedStyle since we need access to Attribute#sentiment
+
+    protected static final net.minecraft.network.chat.TextColor MERGED_RED = net.minecraft.network.chat.TextColor.fromRgb(0xF93131);
+    protected static final net.minecraft.network.chat.TextColor MERGED_BLUE = net.minecraft.network.chat.TextColor.fromRgb(0x7A7AF9);
+    protected static final net.minecraft.network.chat.TextColor MERGED_GRAY = net.minecraft.network.chat.TextColor.fromRgb(0xCCCCCC);
+
+    @Override
+    public net.minecraft.network.chat.TextColor getMergedStyle(boolean isPositive) {
+        return switch (this.sentiment) {
+            case POSITIVE -> isPositive ? MERGED_BLUE : MERGED_RED;
+            case NEGATIVE -> isPositive ? MERGED_RED : MERGED_BLUE;
+            case NEUTRAL -> MERGED_GRAY;
+        };
     }
 
     public static enum Sentiment {
