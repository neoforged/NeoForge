--- a/com/mojang/blaze3d/vertex/VertexConsumer.java
+++ b/com/mojang/blaze3d/vertex/VertexConsumer.java
@@ -13,7 +_,7 @@
 import org.lwjgl.system.MemoryStack;
 
 @OnlyIn(Dist.CLIENT)
-public interface VertexConsumer {
+public interface VertexConsumer extends net.neoforged.neoforge.client.extensions.IVertexConsumerExtension {
     VertexConsumer addVertex(float p_350761_, float p_350704_, float p_350711_);
 
     VertexConsumer setColor(int p_350535_, int p_350875_, int p_350886_, int p_350775_);
@@ -131,11 +_,14 @@
                     f5 = p_331397_[i1] * p_85992_ * 255.0F;
                 }
 
-                int j1 = ARGB.color(k, (int)f3, (int)f4, (int)f5);
-                int k1 = LightTexture.lightCoordsWithEmission(p_331378_[i1], l);
+                // Neo: also apply alpha that's coming from the baked quad
+                int vertexAlpha = p_331268_ ? (int)((p_331416_ * (float) (bytebuffer.get(15) & 255) / 255.0F) * 255) : k;
+                int j1 = ARGB.color(vertexAlpha, (int)f3, (int)f4, (int)f5);
+                int k1 = applyBakedLighting(LightTexture.lightCoordsWithEmission(p_331378_[i1], l), bytebuffer);
                 float f10 = bytebuffer.getFloat(16);
                 float f9 = bytebuffer.getFloat(20);
                 Vector3f vector3f1 = matrix4f.transformPosition(f, f1, f2, new Vector3f());
+                applyBakedNormals(vector3f, bytebuffer, p_85988_.normal());
                 this.addVertex(vector3f1.x(), vector3f1.y(), vector3f1.z(), j1, f10, f9, p_85993_, k1, vector3f.x(), vector3f.y(), vector3f.z());
             }
         }
