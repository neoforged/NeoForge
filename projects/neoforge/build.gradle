import net.neoforged.jarcompatibilitychecker.gradle.JCCPlugin
import net.neoforged.jarcompatibilitychecker.gradle.CompatibilityTask
import net.neoforged.jarcompatibilitychecker.gradle.ProvideNeoForgeJarTask

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.jarcompatibilitychecker' version '0.1.12'
    id 'net.neoforged.gradleutils'
    id 'neoforge.versioning'
}

gradleutils.setupSigning(project: project, signAllPublications: true)

changelog {
    from '21.0'
    disableAutomaticPublicationRegistration()
}

dynamicProject {
    runtime("${project.minecraft_version}-${project.neoform_version}",
            rootProject.layout.projectDirectory.dir('patches'),
            rootProject.layout.projectDirectory.dir('rejects'))
}

final checkVersion = JCCPlugin.providePreviousVersion(
        project.providers, project.providers.provider({['https://maven.neoforged.net/releases']}), project.providers.provider({'net.neoforged:neoforge'}),
        project.provider { project.version }.map { ver -> CompatibilityTask.VersionComponentTest.MINOR.predicate(ver) }
)
final createCompatJar = tasks.register('createCompatibilityCheckJar', ProvideNeoForgeJarTask) {
    // Use the same jar that the patches were generated against
    cleanJar.set(tasks.generateClientBinaryPatches.clean)
    maven.set('https://maven.neoforged.net/releases')
    artifact.set('net.neoforged:neoforge')
    version.set(checkVersion)
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(java_version)
    }
}
checkJarCompatibility {
    isAPI = true
    baseJar = createCompatJar.flatMap { it.output }
}

installerProfile {
    profile = 'NeoForge'
}

minecraft {
    // FML looks for this mod id to find the minecraft classes
    modIdentifier 'minecraft'

    accessTransformers {
        file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

tasks.configureEach { tsk ->
    if (tsk.name == 'neoFormApplyUserAccessTransformer' && project.hasProperty('validateAccessTransformers')) {
        tsk.inputs.property('validation', 'error')
        tsk.logLevel('ERROR')
        tsk.doFirst {
            tsk.getRuntimeProgramArguments().addAll(tsk.getRuntimeProgramArguments().get())
            tsk.getRuntimeProgramArguments().add('--access-transformer-validation=error')
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs rootProject.file('src/main/java')
        }
        resources {
            srcDirs rootProject.file('src/main/resources'), rootProject.file('src/generated/resources')
        }
    }
}

dependencies {
    runtimeOnly "cpw.mods:bootstraplauncher:${project.bootstraplauncher_version}"

    moduleOnly "cpw.mods:securejarhandler:${project.securejarhandler_version}"
    for (var asmModule : ["org.ow2.asm:asm", "org.ow2.asm:asm-commons", "org.ow2.asm:asm-tree", "org.ow2.asm:asm-util", "org.ow2.asm:asm-analysis"]) {
        moduleOnly(asmModule) {
            // Vanilla ships with ASM 9.3 transitively (via their OpenID connect library dependency), we require
            // ASM in a more recent version and have to strictly require this to override the strict Minecraft version.
            version {
                strictly project.asm_version
            }
        }
    }
    moduleOnly "cpw.mods:bootstraplauncher:${project.bootstraplauncher_version}"
    moduleOnly "net.neoforged:JarJarFileSystems:${project.jarjar_version}"

    installer ("net.neoforged.fancymodloader:loader:${project.fancy_mod_loader_version}") {
        exclude group: 'org.slf4j'
        exclude group: 'net.fabricmc'
    }
    installer ("net.neoforged.fancymodloader:earlydisplay:${project.fancy_mod_loader_version}") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.slf4j'
        exclude group: 'net.fabricmc'
    }
    installer "cpw.mods:securejarhandler:${project.securejarhandler_version}"
    installer "org.ow2.asm:asm:${project.asm_version}"
    installer "org.ow2.asm:asm-commons:${project.asm_version}"
    installer "org.ow2.asm:asm-tree:${project.asm_version}"
    installer "org.ow2.asm:asm-util:${project.asm_version}"
    installer "org.ow2.asm:asm-analysis:${project.asm_version}"
    installer "net.neoforged:accesstransformers:${project.accesstransformers_version}"
    installer "net.neoforged:bus:${project.eventbus_version}"
    installer "net.neoforged:coremods:${project.coremods_version}"
    installer "cpw.mods:modlauncher:${project.modlauncher_version}"
    installer "net.neoforged:mergetool:${project.mergetool_version}:api"
    installer "com.electronwill.night-config:core:${project.nightconfig_version}"
    installer "com.electronwill.night-config:toml:${project.nightconfig_version}"
    installer "org.apache.maven:maven-artifact:${project.apache_maven_artifact_version}"
    installer "net.jodah:typetools:${project.typetools_version}"
    installer "net.minecrell:terminalconsoleappender:${project.terminalconsoleappender_version}"
    installer("net.fabricmc:sponge-mixin:${project.mixin_version}") { transitive = false }
    installer "org.openjdk.nashorn:nashorn-core:${project.nashorn_core_version}"
    installer ("net.neoforged:JarJarSelector:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }
    // We depend on apache commons directly as there is a difference between the version the server uses and the one the client does
    installer "org.apache.commons:commons-lang3:${project.apache_commons_lang3_version}"
    installer ("net.neoforged:JarJarMetadata:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }
    // Manually override log4j since the version coming from other `installer` dependencies is outdated
    installer "org.apache.logging.log4j:log4j-api:${project.log4j_version}"
    installer "org.apache.logging.log4j:log4j-core:${project.log4j_version}"

    compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"

    userdevCompileOnly jarJar("io.github.llamalad7:mixinextras-neoforge:${project.mixin_extras_version}"), {
        jarJar.ranged(it, "[${project.mixin_extras_version},)")
    }

    userdevTestImplementation("net.neoforged.fancymodloader:junit-fml:${project.fancy_mod_loader_version}")
    compileOnly(jarJar(project(":neoforge-coremods")))
}

runTypes {
    client {
        singleInstance false
        client true

        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }

    server {
        server true

        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }

    gameTestServer {
        from project.runTypes.server

        gameTest true
    }

    gameTestClient {
        from project.runTypes.client

        gameTest true
    }

    data {
        dataGenerator true

        // Don't set modid here so we can reuse this runType for test datagen
        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }

    junit {
        junit true
        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }
}

runs {
    client { }
    server { }
    gameTestServer { }
    gameTestClient { }
    data {
        arguments.addAll '--mod', 'neoforge'

        modSources.add project.sourceSets.main

        idea {
            primarySourceSet project.sourceSets.main
        }
    }
}

runs.configureEach { it ->
    modSources.add project(":neoforge-coremods").sourceSets.main

    final File gameDir = project.file("run/${it.name}") as File
    gameDir.mkdirs();

    it.workingDirectory.set gameDir
    it.arguments.addAll '--gameDir', gameDir.absolutePath
}

tasks.register("genPatches") {
    dependsOn tasks.unpackSourcePatches
}

launcherProfile {
    arguments {
        game '--fml.neoForgeVersion'
        game project.version
        game '--fml.fmlVersion'
        game project.fancy_mod_loader_version
        game '--fml.mcVersion'
        game project.minecraft_version
        game '--fml.neoFormVersion'
        game project.neoform_version
    }
}

userdevProfile {
    runTypes.configureEach {
        argument '--fml.neoForgeVersion'
        argument project.version
        argument '--fml.fmlVersion'
        argument project.fancy_mod_loader_version
        argument '--fml.mcVersion'
        argument project.minecraft_version
        argument '--fml.neoFormVersion'
        argument project.neoform_version
    }
    additionalTestDependencyArtifactCoordinate "net.neoforged:testframework:${project.version}"
}

tasks.withType(Javadoc.class).configureEach {
    options.tags = [
            'apiNote:a:<em>API Note:</em>',
            'implSpec:a:<em>Implementation Requirements:</em>',
            'implNote:a:<em>Implementation Note:</em>'
    ]
    options.addStringOption('Xdoclint:all,-missing', '-public')
}

configurations {
    forValidation {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }

        extendsFrom api, runtimeOnly
    }
}

artifacts {
    forValidation(jar.archiveFile) {
        builtBy(jar)
    }
}

AdhocComponentWithVariants javaComponent = (AdhocComponentWithVariants) project.components.findByName("java")
// Ensure the two default variants are not published, since they
// contain Minecraft classes
javaComponent.withVariantsFromConfiguration(configurations.apiElements) {
    it.skip()
}
javaComponent.withVariantsFromConfiguration(configurations.runtimeElements) {
    it.skip()
}

configurations {
    modDevBundle {
        canBeResolved = false
        canBeConsumed = true
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "data"))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
        outgoing {
            capability("net.neoforged:neoforge-moddev-bundle:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {} // Publish it
    }
    modDevConfig {
        canBeResolved = false
        canBeConsumed = true
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "data"))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
        outgoing {
            capability("net.neoforged:neoforge-moddev-config:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {} // Publish it
    }
    installerJar {
        canBeResolved = false
        canBeConsumed = true
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EMBEDDED))
            // The installer targets JDK 8
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 8)
        }
        outgoing {
            capability("net.neoforged:neoforge-installer:${project.version}")
        }
        // Publish it
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    universalJar {
        canBeResolved = false
        canBeConsumed = true
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, JavaVersion.current().majorVersion.toInteger())
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }
        // Publish it
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    changelog {
        canBeResolved = false
        canBeConsumed = true
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, "changelog"))
        }
        // Publish it, but only for release versions
        if (!rootProject.isPreReleaseVersion) {
            javaComponent.addVariantsFromConfiguration(it) {}
        }
    }
    modDevApiElements {
        canBeResolved = false
        canBeConsumed = true
        afterEvaluate {
            extendsFrom userdevCompileOnly, installerLibraries, moduleOnly
        }
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API))
        }
        outgoing {
            capability("net.neoforged:neoforge-dependencies:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    modDevRuntimeElements {
        canBeResolved = false
        canBeConsumed = true
        afterEvaluate {
            extendsFrom installerLibraries, moduleOnly
        }
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        }
        outgoing {
            capability("net.neoforged:neoforge-dependencies:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    modDevModulePath {
        canBeResolved = false
        canBeConsumed = true
        afterEvaluate {
            extendsFrom moduleOnly
        }
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
        outgoing {
            capability("net.neoforged:neoforge-moddev-module-path:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    modDevTestFixtures {
        canBeResolved = false
        canBeConsumed = true
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        }
        outgoing {
            capability("net.neoforged:neoforge-moddev-test-fixtures:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
}

dependencies {
    modDevBundle("net.neoforged:neoform:${project.minecraft_version}-${project.neoform_version}") {
        capabilities {
            requireCapability 'net.neoforged:neoform'
        }
        endorseStrictVersions()
    }
    modDevApiElements("net.neoforged:neoform:${project.minecraft_version}-${project.neoform_version}") {
        capabilities {
            requireCapability 'net.neoforged:neoform-dependencies'
        }
        endorseStrictVersions()
    }
    modDevRuntimeElements("net.neoforged:neoform:${project.minecraft_version}-${project.neoform_version}") {
        capabilities {
            requireCapability 'net.neoforged:neoform-dependencies'
        }
        endorseStrictVersions()
    }
    modDevTestFixtures("net.neoforged.fancymodloader:junit-fml:${project.fancy_mod_loader_version}") {
        endorseStrictVersions()
    }
}

processResources {
    inputs.property("version", project.version)
    filesMatching("META-INF/neoforge.mods.toml") {
        expand([
                "global": [
                        "neoForgeVersion": project.version
                ]
        ])
    }
}

afterEvaluate {
    artifacts {
        modDevBundle(userdevJar) {
            setClassifier("userdev") // Legacy
        }
        modDevConfig(createUserdevJson.output) {
            builtBy(createUserdevJson)
            setClassifier("moddev-config")
        }
        universalJar(signUniversalJar.output) {
            builtBy(signUniversalJar)
            setClassifier("universal")
        }
        installerJar(signInstallerJar.output) {
            builtBy(signInstallerJar)
            setClassifier("installer")
        }
        changelog(createChangelog.outputFile) {
            builtBy(createChangelog)
            setClassifier("changelog")
            setExtension("txt")
        }
    }
}

publishing {
    publications.create('NeoForge', MavenPublication) {
        groupId = project.group
        artifactId = project.name
        version = project.version

        from components.java

        versionMapping {
            usage('java-api') {
                fromResolutionOf('runtimeClasspath')
            }
            usage('java-runtime') {
                fromResolutionResult()
            }
        }

        pom {
            name = project.name
            description = 'Modifactions to Minecraft to enable mod developers.'
            url = 'https://github.com/NeoForged/NeoForge'

            scm {
                url = 'https://github.com/NeoForged/NeoForge'
                connection = 'scm:git:git://github.com/NeoForged/NeoForge.git'
                developerConnection = 'scm:git:git@github.com:NeoForged/NeoForge.git'
            }

            issueManagement {
                system = 'github'
                url = 'https://github.com/NeoForged/NeoForge/issues'
            }

            licenses {
                license {
                    name = 'LGPL 2.1'
                    url = 'https://github.com/NeoForged/NeoForge/blob/1.13-pre/LICENSE.txt'
                    distribution = 'repo'
                }
            }
        }
    }
    repositories {
        maven gradleutils.getPublishingMaven()
    }
}
